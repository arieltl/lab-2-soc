
niosLab2.elf:     file format elf32-littlenios2
niosLab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000224

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000587c memsz 0x0000587c flags r-x
    LOAD off    0x00007000 vaddr 0x00010000 paddr 0x0000589c align 2**12
         filesz 0x000017b4 memsz 0x00001bdc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005678  00000224  00000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00010000  0000589c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000176c  00010048  000058e4  00007048  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000428  000117b4  00007050  000087b4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00007050  00007050  000087b4  2**0
                  CONTENTS
  7 .onchip_memory_0 00000000  00011bdc  00011bdc  000087b4  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  000087b4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a58  00000000  00000000  000087e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00014937  00000000  00000000  00009240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006892  00000000  00000000  0001db77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00005feb  00000000  00000000  00024409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  000015ac  00000000  00000000  0002a3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00001a5e  00000000  00000000  0002b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000040  00000000  00000000  0002d400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  0002d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 0000133a  00000000  00000000  0002d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 000041d6  00000000  00000000  0002e7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000005e0  00000000  00000000  000329c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .thread_model 00000003  00000000  00000000  0003559e  2**0
                  CONTENTS, READONLY
 21 .cpu          0000000c  00000000  00000000  000355a1  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  000355ad  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  000355ae  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000355af  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000355ba  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000355c5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  000355d0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002d  00000000  00000000  000355d8  2**0
                  CONTENTS, READONLY
 29 .jdi          00004e8b  00000000  00000000  00035605  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004712b  00000000  00000000  0003a490  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000224 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010048 l    d  .rwdata	00000000 .rwdata
000117b4 l    d  .bss	00000000 .bss
00007050 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00011bdc l    d  .onchip_memory_0	00000000 .onchip_memory_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
0000025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 findfp.c
00000434 l     F .text	00000008 __fp_lock
0000043c l     F .text	0000001c stdio_exit_handler
00000458 l     F .text	00000070 cleanup_stdio
000004c8 l     F .text	00000008 __fp_unlock
000004d0 l     F .text	00000174 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 freer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00003278 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00003390 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000033f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000034f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000035dc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000036c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000038a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000117a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00003b44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00003c84 l     F .text	00000034 alt_dev_reg
00010720 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00003f60 l     F .text	00000214 altera_avalon_jtag_uart_irq
00004174 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004a98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004efc l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000504c l     F .text	0000003c alt_get_errno
00005088 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
000117e8 g     O .bss	00000004 alt_instruction_exception_handler
00002ed4 g     F .text	00000058 _isatty_r
000037e4 g     F .text	0000007c alt_main
000002bc g     F .text	000000d0 _puts_r
0001194c g     O .bss	00000100 alt_irq
00001514 g     F .text	00000064 _lseek_r
000058e4 g       *ABS*	00000000 __flash_rwdata_start
00011bdc g       *ABS*	00000000 __alt_heap_start
00000de8 g     F .text	0000005c __sseek
00000764 g     F .text	00000028 __sinit
00003884 g     F .text	00000024 __malloc_unlock
0000118c g     F .text	00000128 memmove
00005494 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
000117b8 g     O .bss	00000004 __stdio_exit_handler
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002e74 g     F .text	00000060 _fstat_r
000117b4 g     O .bss	00000004 errno
00000d60 g     F .text	00000008 __seofread
000117d0 g     O .bss	00000004 alt_argv
00019780 g       *ABS*	00000000 _gp
00003b14 g     F .text	00000030 usleep
000105a0 g     O .rwdata	00000180 alt_fd_list
000054b8 g     F .text	00000090 alt_find_dev
0000108c g     F .text	00000100 memcpy
00004fd0 g     F .text	0000007c alt_io_redirect
0000589c g       *ABS*	00000000 __DTOR_END__
0000038c g     F .text	00000010 puts
00005708 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00004378 g     F .text	00000220 altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00003190 g     F .text	00000064 .hidden __udivsi3
0000352c g     F .text	000000b0 isatty
000117c4 g     O .bss	00000004 __malloc_top_pad
000007c4 g     F .text	000004a0 __sfvwrite_r
00002f2c g     F .text	00000058 _sbrk_r
00001578 g     F .text	00000064 _read_r
0001179c g     O .rwdata	00000004 alt_max_fd
00002850 g     F .text	000000f0 _fclose_r
00002bb4 g     F .text	0000008c fflush
000117c0 g     O .bss	00000004 __malloc_max_sbrked_mem
00003704 g     F .text	000000e0 lseek
00002264 g     F .text	000005ec _realloc_r
00011bdc g       *ABS*	00000000 __bss_end
00004e14 g     F .text	000000e8 alt_iic_isr_register
00005368 g     F .text	0000012c alt_tick
00000794 g     F .text	00000018 __fp_lock_all
00004dc8 g     F .text	0000004c alt_ic_irq_enabled
000052c4 g     F .text	000000a4 alt_alarm_stop
000117d8 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000c8 alt_irq_handler
00010578 g     O .rwdata	00000028 alt_dev_null
0000144c g     F .text	000000c8 _reclaim_reent
00004a78 g     F .text	00000020 alt_dcache_flush_all
000117b4 g       *ABS*	00000000 __ram_rwdata_end
000117ec g     O .bss	00000138 __sf
00011794 g     O .rwdata	00000008 alt_dev_list
00003b80 g     F .text	00000104 write
00010048 g       *ABS*	00000000 __ram_rodata_end
00003434 g     F .text	000000bc fstat
000031f4 g     F .text	0000005c .hidden __umodsi3
00011bdc g       *ABS*	00000000 end
00003ea0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
0000589c g       *ABS*	00000000 __CTOR_LIST__
00018000 g       *ABS*	00000000 __alt_stack_pointer
00004598 g     F .text	00000228 altera_avalon_jtag_uart_write
0000078c g     F .text	00000004 __sfp_lock_acquire
00000f90 g     F .text	000000fc memchr
00001794 g     F .text	00000308 _free_r
00002f84 g     F .text	00000118 __call_exitprocs
00011a4c g     O .bss	00000190 __atexit0
00011784 g     O .rwdata	00000004 __malloc_sbrk_base
00000224 g     F .text	0000003c _start
000117dc g     O .bss	00000004 _alt_tick_rate
000117e0 g     O .bss	00000008 _alt_nticks
000038e4 g     F .text	00000108 read
00003cf4 g     F .text	00000048 alt_sys_init
00005808 g     F .text	00000094 __register_exitproc
0000421c g     F .text	00000068 altera_avalon_jtag_uart_close
00003250 g     F .text	00000028 .hidden __mulsi3
00010048 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00011924 g     O .bss	00000028 __malloc_current_mallinfo
00003d3c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00005650 g     F .text	000000b8 alt_get_fd
00004920 g     F .text	00000158 alt_busy_sleep
000013f4 g     F .text	00000058 _close_r
00005790 g     F .text	00000078 memcmp
00003dfc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00011bdc g       *ABS*	00000000 __alt_stack_base
00003e4c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00000e4c g     F .text	00000144 __swsetup_r
00000644 g     F .text	00000120 __sfp
00010170 g     O .rwdata	00000408 __malloc_av_
000117c8 g     O .bss	00000004 __atexit
00000d0c g     F .text	00000054 __sread
00005548 g     F .text	00000108 alt_find_file
00004ad4 g     F .text	000000a8 alt_dev_llist_insert
00003860 g     F .text	00000024 __malloc_lock
00003a5c g     F .text	000000b8 sbrk
00002b58 g     F .text	0000005c _fflush_r
000117b4 g       *ABS*	00000000 __bss_start
000012b4 g     F .text	00000140 memset
00000260 g     F .text	0000005c main
000117d4 g     O .bss	00000004 alt_envp
000117bc g     O .bss	00000004 __malloc_max_total_mem
00003d9c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory_0
00000e44 g     F .text	00000008 __sclose
00018000 g       *ABS*	00000000 __alt_heap_limit
00002940 g     F .text	00000010 fclose
00001a9c g     F .text	000007c8 _malloc_r
000117a0 g     O .rwdata	00000004 alt_errno
0000309c g     F .text	00000080 .hidden __divsi3
00001670 g     F .text	00000124 _malloc_trim_r
0000589c g       *ABS*	00000000 __CTOR_END__
0000589c g       *ABS*	00000000 __flash_rodata_start
0000589c g       *ABS*	00000000 __DTOR_LIST__
00003cb8 g     F .text	0000003c alt_irq_init
000039ec g     F .text	00000070 alt_release_fd
0000577c g     F .text	00000014 atexit
000015dc g     F .text	00000064 _write_r
00011780 g     O .rwdata	00000004 _impure_ptr
000117cc g     O .bss	00000004 alt_argc
00002950 g     F .text	00000208 __sflush_r
00004be0 g     F .text	00000064 _do_dtors
00000c64 g     F .text	000000a8 _fwalk_sglue
00000020 g       .exceptions	00000000 alt_irq_entry
000007ac g     F .text	00000018 __fp_unlock_all
0001178c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002de8 g     F .text	0000008c __swhatbuf_r
00004c64 g     F .text	00000050 alt_ic_isr_register
00010164 g     O .rwdata	0000000c __sglue
000117b4 g       *ABS*	00000000 _edata
00011bdc g       *ABS*	00000000 _end
00000224 g       *ABS*	00000000 __ram_exceptions_end
00004284 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00004d3c g     F .text	0000008c alt_ic_irq_disable
00000d68 g     F .text	00000080 __swrite
00011788 g     O .rwdata	00000004 __malloc_trim_threshold
00001640 g     F .text	00000030 exit
0000311c g     F .text	00000074 .hidden __modsi3
00010048 g     O .rwdata	0000011c _impure_data
00018000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000790 g     F .text	00000004 __sfp_lock_release
000033bc g     F .text	0000003c _exit
000047c0 g     F .text	00000160 alt_alarm_start
00002c40 g     F .text	000001a8 __smakebuf_r
0000039c g     F .text	00000098 strlen
00005164 g     F .text	00000160 open
00004c44 g     F .text	00000020 alt_icache_flush_all
000117a8 g     O .rwdata	00000004 alt_priority_mask
00004cb4 g     F .text	00000088 alt_ic_irq_enable
000117ac g     O .rwdata	00000008 alt_alarm_list
00004b7c g     F .text	00000064 _do_ctors
000032b4 g     F .text	000000dc close
00003644 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408914 	ori	at,at,548
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
  94:	e93fff04 	addi	r4,ea,-4
  98:	00001c40 	call	1c4 <alt_instruction_exception_entry>
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>
  a0:	ebffff04 	addi	r15,ea,-4
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001126 	beq	r2,zero,180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	00800074 	movhi	r2,1
 148:	1885883a 	add	r2,r3,r2
 14c:	10c65317 	ldw	r3,6476(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	00800074 	movhi	r2,1
 15c:	2085883a 	add	r2,r4,r2
 160:	10865417 	ldw	r2,6480(r2)
 164:	1009883a 	mov	r4,r2
 168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 16c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 170:	0005313a 	rdctl	r2,ipending
 174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 178:	e0bffb17 	ldw	r2,-20(fp)
 17c:	00000706 	br	19c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 180:	e0bffe17 	ldw	r2,-8(fp)
 184:	1085883a 	add	r2,r2,r2
 188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 18c:	e0bffd17 	ldw	r2,-12(fp)
 190:	10800044 	addi	r2,r2,1
 194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 198:	003fe406 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 19c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a0:	e0bfff17 	ldw	r2,-4(fp)
 1a4:	103fde1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a8:	0001883a 	nop
}
 1ac:	0001883a 	nop
 1b0:	e037883a 	mov	sp,fp
 1b4:	dfc00117 	ldw	ra,4(sp)
 1b8:	df000017 	ldw	fp,0(sp)
 1bc:	dec00204 	addi	sp,sp,8
 1c0:	f800283a 	ret

000001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c4:	defffb04 	addi	sp,sp,-20
 1c8:	dfc00415 	stw	ra,16(sp)
 1cc:	df000315 	stw	fp,12(sp)
 1d0:	df000304 	addi	fp,sp,12
 1d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1d8:	00bfffc4 	movi	r2,-1
 1dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 1e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1e4:	d0a01a17 	ldw	r2,-32664(gp)
 1e8:	10000726 	beq	r2,zero,208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1ec:	d0a01a17 	ldw	r2,-32664(gp)
 1f0:	e0ffff17 	ldw	r3,-4(fp)
 1f4:	e1bffe17 	ldw	r6,-8(fp)
 1f8:	e17ffd17 	ldw	r5,-12(fp)
 1fc:	1809883a 	mov	r4,r3
 200:	103ee83a 	callr	r2
 204:	00000206 	br	210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 20c:	0005883a 	mov	r2,zero
}
 210:	e037883a 	mov	sp,fp
 214:	dfc00117 	ldw	ra,4(sp)
 218:	df000017 	ldw	fp,0(sp)
 21c:	dec00204 	addi	sp,sp,8
 220:	f800283a 	ret

Disassembly of section .text:

00000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     224:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     228:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
     22c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     230:	d6a5e014 	ori	gp,gp,38784
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     234:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     238:	1085ed14 	ori	r2,r2,6068

    movhi r3, %hi(__bss_end)
     23c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     240:	18c6f714 	ori	r3,r3,7132

    beq r2, r3, 1f
     244:	10c00326 	beq	r2,r3,254 <_start+0x30>

0:
    stw zero, (r2)
     248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     24c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     250:	10fffd36 	bltu	r2,r3,248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     254:	00036440 	call	3644 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     258:	00037e40 	call	37e4 <alt_main>

0000025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     25c:	003fff06 	br	25c <alt_after_alt_main>

00000260 <main>:
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */



int main(void){
     260:	defffd04 	addi	sp,sp,-12
     264:	dfc00215 	stw	ra,8(sp)
     268:	df000115 	stw	fp,4(sp)
     26c:	df000104 	addi	fp,sp,4
  unsigned int led = 0;
     270:	e03fff15 	stw	zero,-4(fp)

  printf("Embarcados++ \n");
     274:	01000074 	movhi	r4,1
     278:	21000004 	addi	r4,r4,0
     27c:	000038c0 	call	38c <puts>

  while(1){
      if (led <= 5){
     280:	e0bfff17 	ldw	r2,-4(fp)
     284:	108001a8 	cmpgeui	r2,r2,6
     288:	10000a1e 	bne	r2,zero,2b4 <main+0x54>
          IOWR_32DIRECT(PIO_LEDS_BASE, 0, 0x01 <<led++);
     28c:	e0bfff17 	ldw	r2,-4(fp)
     290:	10c00044 	addi	r3,r2,1
     294:	e0ffff15 	stw	r3,-4(fp)
     298:	00c00044 	movi	r3,1
     29c:	1886983a 	sll	r3,r3,r2
     2a0:	008000b4 	movhi	r2,2
     2a4:	10e40835 	stwio	r3,-28640(r2)
          usleep(50000);
     2a8:	0130d414 	movui	r4,50000
     2ac:	0003b140 	call	3b14 <usleep>
     2b0:	003ff306 	br	280 <main+0x20>
      }
      else{
          led = 0;
     2b4:	e03fff15 	stw	zero,-4(fp)
      if (led <= 5){
     2b8:	003ff106 	br	280 <main+0x20>

000002bc <_puts_r>:
     2bc:	defff504 	addi	sp,sp,-44
     2c0:	dc000815 	stw	r16,32(sp)
     2c4:	2021883a 	mov	r16,r4
     2c8:	2809883a 	mov	r4,r5
     2cc:	dc400915 	stw	r17,36(sp)
     2d0:	dfc00a15 	stw	ra,40(sp)
     2d4:	2823883a 	mov	r17,r5
     2d8:	000039c0 	call	39c <strlen>
     2dc:	11000044 	addi	r4,r2,1
     2e0:	d8800515 	stw	r2,20(sp)
     2e4:	00800044 	movi	r2,1
     2e8:	00c00074 	movhi	r3,1
     2ec:	d8800715 	stw	r2,28(sp)
     2f0:	d8800404 	addi	r2,sp,16
     2f4:	18c00404 	addi	r3,r3,16
     2f8:	d8800115 	stw	r2,4(sp)
     2fc:	00800084 	movi	r2,2
     300:	dc400415 	stw	r17,16(sp)
     304:	d8c00615 	stw	r3,24(sp)
     308:	d9000315 	stw	r4,12(sp)
     30c:	d8800215 	stw	r2,8(sp)
     310:	81400217 	ldw	r5,8(r16)
     314:	80000226 	beq	r16,zero,320 <_puts_r+0x64>
     318:	80800d17 	ldw	r2,52(r16)
     31c:	10001426 	beq	r2,zero,370 <_puts_r+0xb4>
     320:	2880030b 	ldhu	r2,12(r5)
     324:	10c8000c 	andi	r3,r2,8192
     328:	1800061e 	bne	r3,zero,344 <_puts_r+0x88>
     32c:	28c01917 	ldw	r3,100(r5)
     330:	0137ffc4 	movi	r4,-8193
     334:	10880014 	ori	r2,r2,8192
     338:	1906703a 	and	r3,r3,r4
     33c:	2880030d 	sth	r2,12(r5)
     340:	28c01915 	stw	r3,100(r5)
     344:	d9800104 	addi	r6,sp,4
     348:	8009883a 	mov	r4,r16
     34c:	00007c40 	call	7c4 <__sfvwrite_r>
     350:	1007883a 	mov	r3,r2
     354:	00800284 	movi	r2,10
     358:	18000a1e 	bne	r3,zero,384 <_puts_r+0xc8>
     35c:	dfc00a17 	ldw	ra,40(sp)
     360:	dc400917 	ldw	r17,36(sp)
     364:	dc000817 	ldw	r16,32(sp)
     368:	dec00b04 	addi	sp,sp,44
     36c:	f800283a 	ret
     370:	8009883a 	mov	r4,r16
     374:	d9400015 	stw	r5,0(sp)
     378:	00007640 	call	764 <__sinit>
     37c:	d9400017 	ldw	r5,0(sp)
     380:	003fe706 	br	320 <_puts_r+0x64>
     384:	00bfffc4 	movi	r2,-1
     388:	003ff406 	br	35c <_puts_r+0xa0>

0000038c <puts>:
     38c:	00800074 	movhi	r2,1
     390:	200b883a 	mov	r5,r4
     394:	1105e017 	ldw	r4,6016(r2)
     398:	00002bc1 	jmpi	2bc <_puts_r>

0000039c <strlen>:
     39c:	208000cc 	andi	r2,r4,3
     3a0:	10000926 	beq	r2,zero,3c8 <strlen+0x2c>
     3a4:	2005883a 	mov	r2,r4
     3a8:	00000306 	br	3b8 <strlen+0x1c>
     3ac:	10800044 	addi	r2,r2,1
     3b0:	10c000cc 	andi	r3,r2,3
     3b4:	18000526 	beq	r3,zero,3cc <strlen+0x30>
     3b8:	10c00007 	ldb	r3,0(r2)
     3bc:	183ffb1e 	bne	r3,zero,3ac <strlen+0x10>
     3c0:	1105c83a 	sub	r2,r2,r4
     3c4:	f800283a 	ret
     3c8:	2005883a 	mov	r2,r4
     3cc:	11400017 	ldw	r5,0(r2)
     3d0:	01ffbff4 	movhi	r7,65279
     3d4:	39ffbfc4 	addi	r7,r7,-257
     3d8:	29c7883a 	add	r3,r5,r7
     3dc:	01a02074 	movhi	r6,32897
     3e0:	014a303a 	nor	r5,zero,r5
     3e4:	1946703a 	and	r3,r3,r5
     3e8:	31a02004 	addi	r6,r6,-32640
     3ec:	1986703a 	and	r3,r3,r6
     3f0:	1800071e 	bne	r3,zero,410 <strlen+0x74>
     3f4:	11400117 	ldw	r5,4(r2)
     3f8:	10800104 	addi	r2,r2,4
     3fc:	29c7883a 	add	r3,r5,r7
     400:	014a303a 	nor	r5,zero,r5
     404:	1946703a 	and	r3,r3,r5
     408:	1986703a 	and	r3,r3,r6
     40c:	183ff926 	beq	r3,zero,3f4 <strlen+0x58>
     410:	10c00007 	ldb	r3,0(r2)
     414:	183fea26 	beq	r3,zero,3c0 <strlen+0x24>
     418:	10c00047 	ldb	r3,1(r2)
     41c:	10800044 	addi	r2,r2,1
     420:	183fe726 	beq	r3,zero,3c0 <strlen+0x24>
     424:	10c00047 	ldb	r3,1(r2)
     428:	10800044 	addi	r2,r2,1
     42c:	183ffa1e 	bne	r3,zero,418 <strlen+0x7c>
     430:	003fe306 	br	3c0 <strlen+0x24>

00000434 <__fp_lock>:
     434:	0005883a 	mov	r2,zero
     438:	f800283a 	ret

0000043c <stdio_exit_handler>:
     43c:	01800074 	movhi	r6,1
     440:	01400034 	movhi	r5,0
     444:	01000074 	movhi	r4,1
     448:	31805904 	addi	r6,r6,356
     44c:	294a1404 	addi	r5,r5,10320
     450:	21001204 	addi	r4,r4,72
     454:	0000c641 	jmpi	c64 <_fwalk_sglue>

00000458 <cleanup_stdio>:
     458:	21400117 	ldw	r5,4(r4)
     45c:	defffe04 	addi	sp,sp,-8
     460:	00800074 	movhi	r2,1
     464:	dc000015 	stw	r16,0(sp)
     468:	dfc00115 	stw	ra,4(sp)
     46c:	1085fb04 	addi	r2,r2,6124
     470:	2021883a 	mov	r16,r4
     474:	28800126 	beq	r5,r2,47c <cleanup_stdio+0x24>
     478:	00028500 	call	2850 <_fclose_r>
     47c:	81400217 	ldw	r5,8(r16)
     480:	00800074 	movhi	r2,1
     484:	10861504 	addi	r2,r2,6228
     488:	28800226 	beq	r5,r2,494 <cleanup_stdio+0x3c>
     48c:	8009883a 	mov	r4,r16
     490:	00028500 	call	2850 <_fclose_r>
     494:	81400317 	ldw	r5,12(r16)
     498:	00800074 	movhi	r2,1
     49c:	10862f04 	addi	r2,r2,6332
     4a0:	28800526 	beq	r5,r2,4b8 <cleanup_stdio+0x60>
     4a4:	8009883a 	mov	r4,r16
     4a8:	dfc00117 	ldw	ra,4(sp)
     4ac:	dc000017 	ldw	r16,0(sp)
     4b0:	dec00204 	addi	sp,sp,8
     4b4:	00028501 	jmpi	2850 <_fclose_r>
     4b8:	dfc00117 	ldw	ra,4(sp)
     4bc:	dc000017 	ldw	r16,0(sp)
     4c0:	dec00204 	addi	sp,sp,8
     4c4:	f800283a 	ret

000004c8 <__fp_unlock>:
     4c8:	0005883a 	mov	r2,zero
     4cc:	f800283a 	ret

000004d0 <global_stdio_init.part.0>:
     4d0:	00800034 	movhi	r2,0
     4d4:	defffa04 	addi	sp,sp,-24
     4d8:	00c00074 	movhi	r3,1
     4dc:	10810f04 	addi	r2,r2,1084
     4e0:	dc000015 	stw	r16,0(sp)
     4e4:	1885ee15 	stw	r2,6072(r3)
     4e8:	04000074 	movhi	r16,1
     4ec:	00800074 	movhi	r2,1
     4f0:	01000074 	movhi	r4,1
     4f4:	8405fb04 	addi	r16,r16,6124
     4f8:	dfc00515 	stw	ra,20(sp)
     4fc:	dd000415 	stw	r20,16(sp)
     500:	dcc00315 	stw	r19,12(sp)
     504:	dc800215 	stw	r18,8(sp)
     508:	dc400115 	stw	r17,4(sp)
     50c:	01800204 	movi	r6,8
     510:	000b883a 	mov	r5,zero
     514:	21061204 	addi	r4,r4,6216
     518:	1005fb15 	stw	zero,6124(r2)
     51c:	00800104 	movi	r2,4
     520:	80000115 	stw	zero,4(r16)
     524:	80000215 	stw	zero,8(r16)
     528:	80001915 	stw	zero,100(r16)
     52c:	80800315 	stw	r2,12(r16)
     530:	80000415 	stw	zero,16(r16)
     534:	80000515 	stw	zero,20(r16)
     538:	80000615 	stw	zero,24(r16)
     53c:	00012b40 	call	12b4 <memset>
     540:	05000034 	movhi	r20,0
     544:	04c00034 	movhi	r19,0
     548:	04800034 	movhi	r18,0
     54c:	04400034 	movhi	r17,0
     550:	00800074 	movhi	r2,1
     554:	01000074 	movhi	r4,1
     558:	a5034304 	addi	r20,r20,3340
     55c:	9cc35a04 	addi	r19,r19,3432
     560:	94837a04 	addi	r18,r18,3560
     564:	8c439104 	addi	r17,r17,3652
     568:	10800284 	addi	r2,r2,10
     56c:	01800204 	movi	r6,8
     570:	000b883a 	mov	r5,zero
     574:	21062c04 	addi	r4,r4,6320
     578:	84000715 	stw	r16,28(r16)
     57c:	85000815 	stw	r20,32(r16)
     580:	84c00915 	stw	r19,36(r16)
     584:	84800a15 	stw	r18,40(r16)
     588:	84400b15 	stw	r17,44(r16)
     58c:	80001a15 	stw	zero,104(r16)
     590:	80001b15 	stw	zero,108(r16)
     594:	80001c15 	stw	zero,112(r16)
     598:	80003315 	stw	zero,204(r16)
     59c:	80801d15 	stw	r2,116(r16)
     5a0:	80001e15 	stw	zero,120(r16)
     5a4:	80001f15 	stw	zero,124(r16)
     5a8:	80002015 	stw	zero,128(r16)
     5ac:	00012b40 	call	12b4 <memset>
     5b0:	01000074 	movhi	r4,1
     5b4:	00c00074 	movhi	r3,1
     5b8:	008000b4 	movhi	r2,2
     5bc:	18c61504 	addi	r3,r3,6228
     5c0:	10800484 	addi	r2,r2,18
     5c4:	01800204 	movi	r6,8
     5c8:	000b883a 	mov	r5,zero
     5cc:	21064604 	addi	r4,r4,6424
     5d0:	80c02115 	stw	r3,132(r16)
     5d4:	85002215 	stw	r20,136(r16)
     5d8:	84c02315 	stw	r19,140(r16)
     5dc:	84802415 	stw	r18,144(r16)
     5e0:	84402515 	stw	r17,148(r16)
     5e4:	80003415 	stw	zero,208(r16)
     5e8:	80003515 	stw	zero,212(r16)
     5ec:	80003615 	stw	zero,216(r16)
     5f0:	80004d15 	stw	zero,308(r16)
     5f4:	80803715 	stw	r2,220(r16)
     5f8:	80003815 	stw	zero,224(r16)
     5fc:	80003915 	stw	zero,228(r16)
     600:	80003a15 	stw	zero,232(r16)
     604:	00012b40 	call	12b4 <memset>
     608:	00800074 	movhi	r2,1
     60c:	10862f04 	addi	r2,r2,6332
     610:	80803b15 	stw	r2,236(r16)
     614:	85003c15 	stw	r20,240(r16)
     618:	84c03d15 	stw	r19,244(r16)
     61c:	84803e15 	stw	r18,248(r16)
     620:	84403f15 	stw	r17,252(r16)
     624:	dfc00517 	ldw	ra,20(sp)
     628:	dd000417 	ldw	r20,16(sp)
     62c:	dcc00317 	ldw	r19,12(sp)
     630:	dc800217 	ldw	r18,8(sp)
     634:	dc400117 	ldw	r17,4(sp)
     638:	dc000017 	ldw	r16,0(sp)
     63c:	dec00604 	addi	sp,sp,24
     640:	f800283a 	ret

00000644 <__sfp>:
     644:	00800074 	movhi	r2,1
     648:	1085ee17 	ldw	r2,6072(r2)
     64c:	defffc04 	addi	sp,sp,-16
     650:	dc800215 	stw	r18,8(sp)
     654:	dfc00315 	stw	ra,12(sp)
     658:	dc400115 	stw	r17,4(sp)
     65c:	dc000015 	stw	r16,0(sp)
     660:	2025883a 	mov	r18,r4
     664:	10003926 	beq	r2,zero,74c <__sfp+0x108>
     668:	04400074 	movhi	r17,1
     66c:	8c405904 	addi	r17,r17,356
     670:	88800117 	ldw	r2,4(r17)
     674:	8c000217 	ldw	r16,8(r17)
     678:	10bfffc4 	addi	r2,r2,-1
     67c:	1000030e 	bge	r2,zero,68c <__sfp+0x48>
     680:	00001f06 	br	700 <__sfp+0xbc>
     684:	84001a04 	addi	r16,r16,104
     688:	28001d26 	beq	r5,zero,700 <__sfp+0xbc>
     68c:	80c0030f 	ldh	r3,12(r16)
     690:	10bfffc4 	addi	r2,r2,-1
     694:	117fffd8 	cmpnei	r5,r2,-1
     698:	183ffa1e 	bne	r3,zero,684 <__sfp+0x40>
     69c:	00bffff4 	movhi	r2,65535
     6a0:	10800044 	addi	r2,r2,1
     6a4:	80800315 	stw	r2,12(r16)
     6a8:	80001915 	stw	zero,100(r16)
     6ac:	80000015 	stw	zero,0(r16)
     6b0:	80000215 	stw	zero,8(r16)
     6b4:	80000115 	stw	zero,4(r16)
     6b8:	80000415 	stw	zero,16(r16)
     6bc:	80000515 	stw	zero,20(r16)
     6c0:	80000615 	stw	zero,24(r16)
     6c4:	01800204 	movi	r6,8
     6c8:	000b883a 	mov	r5,zero
     6cc:	81001704 	addi	r4,r16,92
     6d0:	00012b40 	call	12b4 <memset>
     6d4:	80000c15 	stw	zero,48(r16)
     6d8:	80000d15 	stw	zero,52(r16)
     6dc:	80001115 	stw	zero,68(r16)
     6e0:	80001215 	stw	zero,72(r16)
     6e4:	8005883a 	mov	r2,r16
     6e8:	dfc00317 	ldw	ra,12(sp)
     6ec:	dc800217 	ldw	r18,8(sp)
     6f0:	dc400117 	ldw	r17,4(sp)
     6f4:	dc000017 	ldw	r16,0(sp)
     6f8:	dec00404 	addi	sp,sp,16
     6fc:	f800283a 	ret
     700:	8c000017 	ldw	r16,0(r17)
     704:	80000226 	beq	r16,zero,710 <__sfp+0xcc>
     708:	8023883a 	mov	r17,r16
     70c:	003fd806 	br	670 <__sfp+0x2c>
     710:	01406b04 	movi	r5,428
     714:	9009883a 	mov	r4,r18
     718:	0001a9c0 	call	1a9c <_malloc_r>
     71c:	1021883a 	mov	r16,r2
     720:	10000c26 	beq	r2,zero,754 <__sfp+0x110>
     724:	10000015 	stw	zero,0(r2)
     728:	11000304 	addi	r4,r2,12
     72c:	00800104 	movi	r2,4
     730:	80800115 	stw	r2,4(r16)
     734:	81000215 	stw	r4,8(r16)
     738:	01806804 	movi	r6,416
     73c:	000b883a 	mov	r5,zero
     740:	00012b40 	call	12b4 <memset>
     744:	8c000015 	stw	r16,0(r17)
     748:	003fef06 	br	708 <__sfp+0xc4>
     74c:	00004d00 	call	4d0 <global_stdio_init.part.0>
     750:	003fc506 	br	668 <__sfp+0x24>
     754:	88000015 	stw	zero,0(r17)
     758:	00800304 	movi	r2,12
     75c:	90800015 	stw	r2,0(r18)
     760:	003fe006 	br	6e4 <__sfp+0xa0>

00000764 <__sinit>:
     764:	20800d17 	ldw	r2,52(r4)
     768:	10000126 	beq	r2,zero,770 <__sinit+0xc>
     76c:	f800283a 	ret
     770:	00c00074 	movhi	r3,1
     774:	00800034 	movhi	r2,0
     778:	18c5ee17 	ldw	r3,6072(r3)
     77c:	10811604 	addi	r2,r2,1112
     780:	20800d15 	stw	r2,52(r4)
     784:	183ff91e 	bne	r3,zero,76c <__sinit+0x8>
     788:	00004d01 	jmpi	4d0 <global_stdio_init.part.0>

0000078c <__sfp_lock_acquire>:
     78c:	f800283a 	ret

00000790 <__sfp_lock_release>:
     790:	f800283a 	ret

00000794 <__fp_lock_all>:
     794:	01800074 	movhi	r6,1
     798:	01400034 	movhi	r5,0
     79c:	31805904 	addi	r6,r6,356
     7a0:	29410d04 	addi	r5,r5,1076
     7a4:	0009883a 	mov	r4,zero
     7a8:	0000c641 	jmpi	c64 <_fwalk_sglue>

000007ac <__fp_unlock_all>:
     7ac:	01800074 	movhi	r6,1
     7b0:	01400034 	movhi	r5,0
     7b4:	31805904 	addi	r6,r6,356
     7b8:	29413204 	addi	r5,r5,1224
     7bc:	0009883a 	mov	r4,zero
     7c0:	0000c641 	jmpi	c64 <_fwalk_sglue>

000007c4 <__sfvwrite_r>:
     7c4:	30800217 	ldw	r2,8(r6)
     7c8:	1000c426 	beq	r2,zero,adc <__sfvwrite_r+0x318>
     7cc:	2a80030b 	ldhu	r10,12(r5)
     7d0:	defff504 	addi	sp,sp,-44
     7d4:	df000915 	stw	fp,36(sp)
     7d8:	dcc00415 	stw	r19,16(sp)
     7dc:	dc000115 	stw	r16,4(sp)
     7e0:	dfc00a15 	stw	ra,40(sp)
     7e4:	ddc00815 	stw	r23,32(sp)
     7e8:	dd800715 	stw	r22,28(sp)
     7ec:	dd400615 	stw	r21,24(sp)
     7f0:	dd000515 	stw	r20,20(sp)
     7f4:	dc800315 	stw	r18,12(sp)
     7f8:	dc400215 	stw	r17,8(sp)
     7fc:	5080020c 	andi	r2,r10,8
     800:	3039883a 	mov	fp,r6
     804:	2027883a 	mov	r19,r4
     808:	2821883a 	mov	r16,r5
     80c:	10002226 	beq	r2,zero,898 <__sfvwrite_r+0xd4>
     810:	28800417 	ldw	r2,16(r5)
     814:	10002026 	beq	r2,zero,898 <__sfvwrite_r+0xd4>
     818:	5080008c 	andi	r2,r10,2
     81c:	e4400017 	ldw	r17,0(fp)
     820:	10002526 	beq	r2,zero,8b8 <__sfvwrite_r+0xf4>
     824:	80800917 	ldw	r2,36(r16)
     828:	81400717 	ldw	r5,28(r16)
     82c:	05600034 	movhi	r21,32768
     830:	0029883a 	mov	r20,zero
     834:	0025883a 	mov	r18,zero
     838:	ad7f0004 	addi	r21,r21,-1024
     83c:	a00d883a 	mov	r6,r20
     840:	9809883a 	mov	r4,r19
     844:	90001026 	beq	r18,zero,888 <__sfvwrite_r+0xc4>
     848:	900f883a 	mov	r7,r18
     84c:	ac80012e 	bgeu	r21,r18,854 <__sfvwrite_r+0x90>
     850:	a80f883a 	mov	r7,r21
     854:	103ee83a 	callr	r2
     858:	00809b0e 	bge	zero,r2,ac8 <__sfvwrite_r+0x304>
     85c:	e0c00217 	ldw	r3,8(fp)
     860:	a0a9883a 	add	r20,r20,r2
     864:	90a5c83a 	sub	r18,r18,r2
     868:	1885c83a 	sub	r2,r3,r2
     86c:	e0800215 	stw	r2,8(fp)
     870:	10008426 	beq	r2,zero,a84 <__sfvwrite_r+0x2c0>
     874:	80800917 	ldw	r2,36(r16)
     878:	81400717 	ldw	r5,28(r16)
     87c:	a00d883a 	mov	r6,r20
     880:	9809883a 	mov	r4,r19
     884:	903ff01e 	bne	r18,zero,848 <__sfvwrite_r+0x84>
     888:	8d000017 	ldw	r20,0(r17)
     88c:	8c800117 	ldw	r18,4(r17)
     890:	8c400204 	addi	r17,r17,8
     894:	003fe906 	br	83c <__sfvwrite_r+0x78>
     898:	800b883a 	mov	r5,r16
     89c:	9809883a 	mov	r4,r19
     8a0:	0000e4c0 	call	e4c <__swsetup_r>
     8a4:	10008b1e 	bne	r2,zero,ad4 <__sfvwrite_r+0x310>
     8a8:	8280030b 	ldhu	r10,12(r16)
     8ac:	e4400017 	ldw	r17,0(fp)
     8b0:	5080008c 	andi	r2,r10,2
     8b4:	103fdb1e 	bne	r2,zero,824 <__sfvwrite_r+0x60>
     8b8:	5080004c 	andi	r2,r10,1
     8bc:	1000501e 	bne	r2,zero,a00 <__sfvwrite_r+0x23c>
     8c0:	00a00034 	movhi	r2,32768
     8c4:	81c00017 	ldw	r7,0(r16)
     8c8:	80c00217 	ldw	r3,8(r16)
     8cc:	10bfffc4 	addi	r2,r2,-1
     8d0:	002d883a 	mov	r22,zero
     8d4:	0025883a 	mov	r18,zero
     8d8:	d8800015 	stw	r2,0(sp)
     8dc:	3809883a 	mov	r4,r7
     8e0:	1829883a 	mov	r20,r3
     8e4:	90004226 	beq	r18,zero,9f0 <__sfvwrite_r+0x22c>
     8e8:	5080800c 	andi	r2,r10,512
     8ec:	10009526 	beq	r2,zero,b44 <__sfvwrite_r+0x380>
     8f0:	182b883a 	mov	r21,r3
     8f4:	90c0ba36 	bltu	r18,r3,be0 <__sfvwrite_r+0x41c>
     8f8:	5081200c 	andi	r2,r10,1152
     8fc:	10002626 	beq	r2,zero,998 <__sfvwrite_r+0x1d4>
     900:	80c00517 	ldw	r3,20(r16)
     904:	81400417 	ldw	r5,16(r16)
     908:	18c5883a 	add	r2,r3,r3
     90c:	10c5883a 	add	r2,r2,r3
     910:	1006d7fa 	srli	r3,r2,31
     914:	396bc83a 	sub	r21,r7,r5
     918:	a9000044 	addi	r4,r21,1
     91c:	1887883a 	add	r3,r3,r2
     920:	1829d07a 	srai	r20,r3,1
     924:	2485883a 	add	r2,r4,r18
     928:	a00d883a 	mov	r6,r20
     92c:	a080022e 	bgeu	r20,r2,938 <__sfvwrite_r+0x174>
     930:	1029883a 	mov	r20,r2
     934:	100d883a 	mov	r6,r2
     938:	5281000c 	andi	r10,r10,1024
     93c:	5000b626 	beq	r10,zero,c18 <__sfvwrite_r+0x454>
     940:	300b883a 	mov	r5,r6
     944:	9809883a 	mov	r4,r19
     948:	0001a9c0 	call	1a9c <_malloc_r>
     94c:	102f883a 	mov	r23,r2
     950:	1000c026 	beq	r2,zero,c54 <__sfvwrite_r+0x490>
     954:	81400417 	ldw	r5,16(r16)
     958:	a80d883a 	mov	r6,r21
     95c:	1009883a 	mov	r4,r2
     960:	000108c0 	call	108c <memcpy>
     964:	8080030b 	ldhu	r2,12(r16)
     968:	00fedfc4 	movi	r3,-1153
     96c:	10c4703a 	and	r2,r2,r3
     970:	10802014 	ori	r2,r2,128
     974:	8080030d 	sth	r2,12(r16)
     978:	a54fc83a 	sub	r7,r20,r21
     97c:	bd49883a 	add	r4,r23,r21
     980:	85000515 	stw	r20,20(r16)
     984:	85c00415 	stw	r23,16(r16)
     988:	81000015 	stw	r4,0(r16)
     98c:	9029883a 	mov	r20,r18
     990:	81c00215 	stw	r7,8(r16)
     994:	902b883a 	mov	r21,r18
     998:	a80d883a 	mov	r6,r21
     99c:	b00b883a 	mov	r5,r22
     9a0:	000118c0 	call	118c <memmove>
     9a4:	80c00217 	ldw	r3,8(r16)
     9a8:	81c00017 	ldw	r7,0(r16)
     9ac:	902f883a 	mov	r23,r18
     9b0:	1d07c83a 	sub	r3,r3,r20
     9b4:	3d4d883a 	add	r6,r7,r21
     9b8:	80c00215 	stw	r3,8(r16)
     9bc:	81800015 	stw	r6,0(r16)
     9c0:	0025883a 	mov	r18,zero
     9c4:	e0800217 	ldw	r2,8(fp)
     9c8:	b5ed883a 	add	r22,r22,r23
     9cc:	15c5c83a 	sub	r2,r2,r23
     9d0:	e0800215 	stw	r2,8(fp)
     9d4:	10002b26 	beq	r2,zero,a84 <__sfvwrite_r+0x2c0>
     9d8:	81c00017 	ldw	r7,0(r16)
     9dc:	80c00217 	ldw	r3,8(r16)
     9e0:	8280030b 	ldhu	r10,12(r16)
     9e4:	3809883a 	mov	r4,r7
     9e8:	1829883a 	mov	r20,r3
     9ec:	903fbe1e 	bne	r18,zero,8e8 <__sfvwrite_r+0x124>
     9f0:	8d800017 	ldw	r22,0(r17)
     9f4:	8c800117 	ldw	r18,4(r17)
     9f8:	8c400204 	addi	r17,r17,8
     9fc:	003fb706 	br	8dc <__sfvwrite_r+0x118>
     a00:	002f883a 	mov	r23,zero
     a04:	0005883a 	mov	r2,zero
     a08:	002d883a 	mov	r22,zero
     a0c:	002b883a 	mov	r21,zero
     a10:	a8003426 	beq	r21,zero,ae4 <__sfvwrite_r+0x320>
     a14:	10003826 	beq	r2,zero,af8 <__sfvwrite_r+0x334>
     a18:	b829883a 	mov	r20,r23
     a1c:	ad00012e 	bgeu	r21,r20,a24 <__sfvwrite_r+0x260>
     a20:	a829883a 	mov	r20,r21
     a24:	81000017 	ldw	r4,0(r16)
     a28:	80800417 	ldw	r2,16(r16)
     a2c:	84800217 	ldw	r18,8(r16)
     a30:	81c00517 	ldw	r7,20(r16)
     a34:	1100022e 	bgeu	r2,r4,a40 <__sfvwrite_r+0x27c>
     a38:	91e5883a 	add	r18,r18,r7
     a3c:	95003616 	blt	r18,r20,b18 <__sfvwrite_r+0x354>
     a40:	a1c06a16 	blt	r20,r7,bec <__sfvwrite_r+0x428>
     a44:	80800917 	ldw	r2,36(r16)
     a48:	81400717 	ldw	r5,28(r16)
     a4c:	b00d883a 	mov	r6,r22
     a50:	9809883a 	mov	r4,r19
     a54:	103ee83a 	callr	r2
     a58:	1025883a 	mov	r18,r2
     a5c:	00801a0e 	bge	zero,r2,ac8 <__sfvwrite_r+0x304>
     a60:	bcafc83a 	sub	r23,r23,r18
     a64:	b8001426 	beq	r23,zero,ab8 <__sfvwrite_r+0x2f4>
     a68:	00800044 	movi	r2,1
     a6c:	e0c00217 	ldw	r3,8(fp)
     a70:	b4ad883a 	add	r22,r22,r18
     a74:	acabc83a 	sub	r21,r21,r18
     a78:	1c87c83a 	sub	r3,r3,r18
     a7c:	e0c00215 	stw	r3,8(fp)
     a80:	183fe31e 	bne	r3,zero,a10 <__sfvwrite_r+0x24c>
     a84:	0005883a 	mov	r2,zero
     a88:	dfc00a17 	ldw	ra,40(sp)
     a8c:	df000917 	ldw	fp,36(sp)
     a90:	ddc00817 	ldw	r23,32(sp)
     a94:	dd800717 	ldw	r22,28(sp)
     a98:	dd400617 	ldw	r21,24(sp)
     a9c:	dd000517 	ldw	r20,20(sp)
     aa0:	dcc00417 	ldw	r19,16(sp)
     aa4:	dc800317 	ldw	r18,12(sp)
     aa8:	dc400217 	ldw	r17,8(sp)
     aac:	dc000117 	ldw	r16,4(sp)
     ab0:	dec00b04 	addi	sp,sp,44
     ab4:	f800283a 	ret
     ab8:	800b883a 	mov	r5,r16
     abc:	9809883a 	mov	r4,r19
     ac0:	0002b580 	call	2b58 <_fflush_r>
     ac4:	103fe926 	beq	r2,zero,a6c <__sfvwrite_r+0x2a8>
     ac8:	8080030b 	ldhu	r2,12(r16)
     acc:	10801014 	ori	r2,r2,64
     ad0:	8080030d 	sth	r2,12(r16)
     ad4:	00bfffc4 	movi	r2,-1
     ad8:	003feb06 	br	a88 <__sfvwrite_r+0x2c4>
     adc:	0005883a 	mov	r2,zero
     ae0:	f800283a 	ret
     ae4:	8d400117 	ldw	r21,4(r17)
     ae8:	8805883a 	mov	r2,r17
     aec:	8c400204 	addi	r17,r17,8
     af0:	a83ffc26 	beq	r21,zero,ae4 <__sfvwrite_r+0x320>
     af4:	15800017 	ldw	r22,0(r2)
     af8:	a80d883a 	mov	r6,r21
     afc:	01400284 	movi	r5,10
     b00:	b009883a 	mov	r4,r22
     b04:	0000f900 	call	f90 <memchr>
     b08:	10004f26 	beq	r2,zero,c48 <__sfvwrite_r+0x484>
     b0c:	10800044 	addi	r2,r2,1
     b10:	15afc83a 	sub	r23,r2,r22
     b14:	003fc006 	br	a18 <__sfvwrite_r+0x254>
     b18:	b00b883a 	mov	r5,r22
     b1c:	900d883a 	mov	r6,r18
     b20:	000118c0 	call	118c <memmove>
     b24:	80800017 	ldw	r2,0(r16)
     b28:	800b883a 	mov	r5,r16
     b2c:	9809883a 	mov	r4,r19
     b30:	1485883a 	add	r2,r2,r18
     b34:	80800015 	stw	r2,0(r16)
     b38:	0002b580 	call	2b58 <_fflush_r>
     b3c:	103fc826 	beq	r2,zero,a60 <__sfvwrite_r+0x29c>
     b40:	003fe106 	br	ac8 <__sfvwrite_r+0x304>
     b44:	80800417 	ldw	r2,16(r16)
     b48:	11c01236 	bltu	r2,r7,b94 <__sfvwrite_r+0x3d0>
     b4c:	81400517 	ldw	r5,20(r16)
     b50:	91401036 	bltu	r18,r5,b94 <__sfvwrite_r+0x3d0>
     b54:	00a00034 	movhi	r2,32768
     b58:	902f883a 	mov	r23,r18
     b5c:	90800136 	bltu	r18,r2,b64 <__sfvwrite_r+0x3a0>
     b60:	ddc00017 	ldw	r23,0(sp)
     b64:	b809883a 	mov	r4,r23
     b68:	000311c0 	call	311c <__modsi3>
     b6c:	80c00917 	ldw	r3,36(r16)
     b70:	81400717 	ldw	r5,28(r16)
     b74:	b88fc83a 	sub	r7,r23,r2
     b78:	b00d883a 	mov	r6,r22
     b7c:	9809883a 	mov	r4,r19
     b80:	183ee83a 	callr	r3
     b84:	102f883a 	mov	r23,r2
     b88:	00bfcf0e 	bge	zero,r2,ac8 <__sfvwrite_r+0x304>
     b8c:	95e5c83a 	sub	r18,r18,r23
     b90:	003f8c06 	br	9c4 <__sfvwrite_r+0x200>
     b94:	182f883a 	mov	r23,r3
     b98:	90c0012e 	bgeu	r18,r3,ba0 <__sfvwrite_r+0x3dc>
     b9c:	902f883a 	mov	r23,r18
     ba0:	3809883a 	mov	r4,r7
     ba4:	b80d883a 	mov	r6,r23
     ba8:	b00b883a 	mov	r5,r22
     bac:	000118c0 	call	118c <memmove>
     bb0:	80c00217 	ldw	r3,8(r16)
     bb4:	81c00017 	ldw	r7,0(r16)
     bb8:	1dc7c83a 	sub	r3,r3,r23
     bbc:	3dcf883a 	add	r7,r7,r23
     bc0:	80c00215 	stw	r3,8(r16)
     bc4:	81c00015 	stw	r7,0(r16)
     bc8:	183ff01e 	bne	r3,zero,b8c <__sfvwrite_r+0x3c8>
     bcc:	800b883a 	mov	r5,r16
     bd0:	9809883a 	mov	r4,r19
     bd4:	0002b580 	call	2b58 <_fflush_r>
     bd8:	103fec26 	beq	r2,zero,b8c <__sfvwrite_r+0x3c8>
     bdc:	003fba06 	br	ac8 <__sfvwrite_r+0x304>
     be0:	9029883a 	mov	r20,r18
     be4:	902b883a 	mov	r21,r18
     be8:	003f6b06 	br	998 <__sfvwrite_r+0x1d4>
     bec:	a00d883a 	mov	r6,r20
     bf0:	b00b883a 	mov	r5,r22
     bf4:	000118c0 	call	118c <memmove>
     bf8:	80c00217 	ldw	r3,8(r16)
     bfc:	80800017 	ldw	r2,0(r16)
     c00:	a025883a 	mov	r18,r20
     c04:	1d07c83a 	sub	r3,r3,r20
     c08:	1505883a 	add	r2,r2,r20
     c0c:	80c00215 	stw	r3,8(r16)
     c10:	80800015 	stw	r2,0(r16)
     c14:	003f9206 	br	a60 <__sfvwrite_r+0x29c>
     c18:	9809883a 	mov	r4,r19
     c1c:	00022640 	call	2264 <_realloc_r>
     c20:	102f883a 	mov	r23,r2
     c24:	103f541e 	bne	r2,zero,978 <__sfvwrite_r+0x1b4>
     c28:	81400417 	ldw	r5,16(r16)
     c2c:	9809883a 	mov	r4,r19
     c30:	00017940 	call	1794 <_free_r>
     c34:	8080030b 	ldhu	r2,12(r16)
     c38:	00c00304 	movi	r3,12
     c3c:	98c00015 	stw	r3,0(r19)
     c40:	10bfdfcc 	andi	r2,r2,65407
     c44:	003fa106 	br	acc <__sfvwrite_r+0x308>
     c48:	ad000044 	addi	r20,r21,1
     c4c:	a02f883a 	mov	r23,r20
     c50:	003f7206 	br	a1c <__sfvwrite_r+0x258>
     c54:	00c00304 	movi	r3,12
     c58:	8080030b 	ldhu	r2,12(r16)
     c5c:	98c00015 	stw	r3,0(r19)
     c60:	003f9a06 	br	acc <__sfvwrite_r+0x308>

00000c64 <_fwalk_sglue>:
     c64:	defff904 	addi	sp,sp,-28
     c68:	dd400515 	stw	r21,20(sp)
     c6c:	dd000415 	stw	r20,16(sp)
     c70:	dcc00315 	stw	r19,12(sp)
     c74:	dc800215 	stw	r18,8(sp)
     c78:	dfc00615 	stw	ra,24(sp)
     c7c:	dc400115 	stw	r17,4(sp)
     c80:	dc000015 	stw	r16,0(sp)
     c84:	2027883a 	mov	r19,r4
     c88:	2829883a 	mov	r20,r5
     c8c:	3025883a 	mov	r18,r6
     c90:	002b883a 	mov	r21,zero
     c94:	94400117 	ldw	r17,4(r18)
     c98:	94000217 	ldw	r16,8(r18)
     c9c:	8c7fffc4 	addi	r17,r17,-1
     ca0:	88000e16 	blt	r17,zero,cdc <_fwalk_sglue+0x78>
     ca4:	8080030b 	ldhu	r2,12(r16)
     ca8:	8c7fffc4 	addi	r17,r17,-1
     cac:	108000b0 	cmpltui	r2,r2,2
     cb0:	1000071e 	bne	r2,zero,cd0 <_fwalk_sglue+0x6c>
     cb4:	8080038f 	ldh	r2,14(r16)
     cb8:	800b883a 	mov	r5,r16
     cbc:	9809883a 	mov	r4,r19
     cc0:	10bfffe0 	cmpeqi	r2,r2,-1
     cc4:	1000021e 	bne	r2,zero,cd0 <_fwalk_sglue+0x6c>
     cc8:	a03ee83a 	callr	r20
     ccc:	a8aab03a 	or	r21,r21,r2
     cd0:	88bfffd8 	cmpnei	r2,r17,-1
     cd4:	84001a04 	addi	r16,r16,104
     cd8:	103ff21e 	bne	r2,zero,ca4 <_fwalk_sglue+0x40>
     cdc:	94800017 	ldw	r18,0(r18)
     ce0:	903fec1e 	bne	r18,zero,c94 <_fwalk_sglue+0x30>
     ce4:	a805883a 	mov	r2,r21
     ce8:	dfc00617 	ldw	ra,24(sp)
     cec:	dd400517 	ldw	r21,20(sp)
     cf0:	dd000417 	ldw	r20,16(sp)
     cf4:	dcc00317 	ldw	r19,12(sp)
     cf8:	dc800217 	ldw	r18,8(sp)
     cfc:	dc400117 	ldw	r17,4(sp)
     d00:	dc000017 	ldw	r16,0(sp)
     d04:	dec00704 	addi	sp,sp,28
     d08:	f800283a 	ret

00000d0c <__sread>:
     d0c:	defffe04 	addi	sp,sp,-8
     d10:	dc000015 	stw	r16,0(sp)
     d14:	2821883a 	mov	r16,r5
     d18:	2940038f 	ldh	r5,14(r5)
     d1c:	dfc00115 	stw	ra,4(sp)
     d20:	00015780 	call	1578 <_read_r>
     d24:	10000716 	blt	r2,zero,d44 <__sread+0x38>
     d28:	80c01417 	ldw	r3,80(r16)
     d2c:	1887883a 	add	r3,r3,r2
     d30:	80c01415 	stw	r3,80(r16)
     d34:	dfc00117 	ldw	ra,4(sp)
     d38:	dc000017 	ldw	r16,0(sp)
     d3c:	dec00204 	addi	sp,sp,8
     d40:	f800283a 	ret
     d44:	80c0030b 	ldhu	r3,12(r16)
     d48:	18fbffcc 	andi	r3,r3,61439
     d4c:	80c0030d 	sth	r3,12(r16)
     d50:	dfc00117 	ldw	ra,4(sp)
     d54:	dc000017 	ldw	r16,0(sp)
     d58:	dec00204 	addi	sp,sp,8
     d5c:	f800283a 	ret

00000d60 <__seofread>:
     d60:	0005883a 	mov	r2,zero
     d64:	f800283a 	ret

00000d68 <__swrite>:
     d68:	2880030b 	ldhu	r2,12(r5)
     d6c:	defffb04 	addi	sp,sp,-20
     d70:	dcc00315 	stw	r19,12(sp)
     d74:	dc800215 	stw	r18,8(sp)
     d78:	dc400115 	stw	r17,4(sp)
     d7c:	dc000015 	stw	r16,0(sp)
     d80:	dfc00415 	stw	ra,16(sp)
     d84:	10c0400c 	andi	r3,r2,256
     d88:	2821883a 	mov	r16,r5
     d8c:	2023883a 	mov	r17,r4
     d90:	3025883a 	mov	r18,r6
     d94:	3827883a 	mov	r19,r7
     d98:	18000d1e 	bne	r3,zero,dd0 <__swrite+0x68>
     d9c:	8140038f 	ldh	r5,14(r16)
     da0:	10bbffcc 	andi	r2,r2,61439
     da4:	980f883a 	mov	r7,r19
     da8:	900d883a 	mov	r6,r18
     dac:	8809883a 	mov	r4,r17
     db0:	8080030d 	sth	r2,12(r16)
     db4:	dfc00417 	ldw	ra,16(sp)
     db8:	dcc00317 	ldw	r19,12(sp)
     dbc:	dc800217 	ldw	r18,8(sp)
     dc0:	dc400117 	ldw	r17,4(sp)
     dc4:	dc000017 	ldw	r16,0(sp)
     dc8:	dec00504 	addi	sp,sp,20
     dcc:	00015dc1 	jmpi	15dc <_write_r>
     dd0:	2940038f 	ldh	r5,14(r5)
     dd4:	01c00084 	movi	r7,2
     dd8:	000d883a 	mov	r6,zero
     ddc:	00015140 	call	1514 <_lseek_r>
     de0:	8080030b 	ldhu	r2,12(r16)
     de4:	003fed06 	br	d9c <__swrite+0x34>

00000de8 <__sseek>:
     de8:	defffe04 	addi	sp,sp,-8
     dec:	dc000015 	stw	r16,0(sp)
     df0:	2821883a 	mov	r16,r5
     df4:	2940038f 	ldh	r5,14(r5)
     df8:	dfc00115 	stw	ra,4(sp)
     dfc:	00015140 	call	1514 <_lseek_r>
     e00:	10ffffd8 	cmpnei	r3,r2,-1
     e04:	18000826 	beq	r3,zero,e28 <__sseek+0x40>
     e08:	80c0030b 	ldhu	r3,12(r16)
     e0c:	80801415 	stw	r2,80(r16)
     e10:	18c40014 	ori	r3,r3,4096
     e14:	80c0030d 	sth	r3,12(r16)
     e18:	dfc00117 	ldw	ra,4(sp)
     e1c:	dc000017 	ldw	r16,0(sp)
     e20:	dec00204 	addi	sp,sp,8
     e24:	f800283a 	ret
     e28:	80c0030b 	ldhu	r3,12(r16)
     e2c:	18fbffcc 	andi	r3,r3,61439
     e30:	80c0030d 	sth	r3,12(r16)
     e34:	dfc00117 	ldw	ra,4(sp)
     e38:	dc000017 	ldw	r16,0(sp)
     e3c:	dec00204 	addi	sp,sp,8
     e40:	f800283a 	ret

00000e44 <__sclose>:
     e44:	2940038f 	ldh	r5,14(r5)
     e48:	00013f41 	jmpi	13f4 <_close_r>

00000e4c <__swsetup_r>:
     e4c:	00800074 	movhi	r2,1
     e50:	1085e017 	ldw	r2,6016(r2)
     e54:	defffd04 	addi	sp,sp,-12
     e58:	dc400115 	stw	r17,4(sp)
     e5c:	dc000015 	stw	r16,0(sp)
     e60:	dfc00215 	stw	ra,8(sp)
     e64:	2023883a 	mov	r17,r4
     e68:	2821883a 	mov	r16,r5
     e6c:	10000226 	beq	r2,zero,e78 <__swsetup_r+0x2c>
     e70:	10c00d17 	ldw	r3,52(r2)
     e74:	18003f26 	beq	r3,zero,f74 <__swsetup_r+0x128>
     e78:	80c0030b 	ldhu	r3,12(r16)
     e7c:	1880020c 	andi	r2,r3,8
     e80:	10001a26 	beq	r2,zero,eec <__swsetup_r+0xa0>
     e84:	80800417 	ldw	r2,16(r16)
     e88:	10002126 	beq	r2,zero,f10 <__swsetup_r+0xc4>
     e8c:	1900004c 	andi	r4,r3,1
     e90:	20000b1e 	bne	r4,zero,ec0 <__swsetup_r+0x74>
     e94:	1900008c 	andi	r4,r3,2
     e98:	2000261e 	bne	r4,zero,f34 <__swsetup_r+0xe8>
     e9c:	81000517 	ldw	r4,20(r16)
     ea0:	81000215 	stw	r4,8(r16)
     ea4:	10000b26 	beq	r2,zero,ed4 <__swsetup_r+0x88>
     ea8:	0005883a 	mov	r2,zero
     eac:	dfc00217 	ldw	ra,8(sp)
     eb0:	dc400117 	ldw	r17,4(sp)
     eb4:	dc000017 	ldw	r16,0(sp)
     eb8:	dec00304 	addi	sp,sp,12
     ebc:	f800283a 	ret
     ec0:	81000517 	ldw	r4,20(r16)
     ec4:	80000215 	stw	zero,8(r16)
     ec8:	0109c83a 	sub	r4,zero,r4
     ecc:	81000615 	stw	r4,24(r16)
     ed0:	103ff51e 	bne	r2,zero,ea8 <__swsetup_r+0x5c>
     ed4:	1900200c 	andi	r4,r3,128
     ed8:	203ff426 	beq	r4,zero,eac <__swsetup_r+0x60>
     edc:	18c01014 	ori	r3,r3,64
     ee0:	80c0030d 	sth	r3,12(r16)
     ee4:	00bfffc4 	movi	r2,-1
     ee8:	003ff006 	br	eac <__swsetup_r+0x60>
     eec:	1880040c 	andi	r2,r3,16
     ef0:	10002326 	beq	r2,zero,f80 <__swsetup_r+0x134>
     ef4:	1880010c 	andi	r2,r3,4
     ef8:	1000101e 	bne	r2,zero,f3c <__swsetup_r+0xf0>
     efc:	80800417 	ldw	r2,16(r16)
     f00:	19000214 	ori	r4,r3,8
     f04:	8100030d 	sth	r4,12(r16)
     f08:	2007883a 	mov	r3,r4
     f0c:	103fdf1e 	bne	r2,zero,e8c <__swsetup_r+0x40>
     f10:	1900a00c 	andi	r4,r3,640
     f14:	21008020 	cmpeqi	r4,r4,512
     f18:	203fdc1e 	bne	r4,zero,e8c <__swsetup_r+0x40>
     f1c:	800b883a 	mov	r5,r16
     f20:	8809883a 	mov	r4,r17
     f24:	0002c400 	call	2c40 <__smakebuf_r>
     f28:	80c0030b 	ldhu	r3,12(r16)
     f2c:	80800417 	ldw	r2,16(r16)
     f30:	003fd606 	br	e8c <__swsetup_r+0x40>
     f34:	0009883a 	mov	r4,zero
     f38:	003fd906 	br	ea0 <__swsetup_r+0x54>
     f3c:	81400c17 	ldw	r5,48(r16)
     f40:	28000626 	beq	r5,zero,f5c <__swsetup_r+0x110>
     f44:	80801004 	addi	r2,r16,64
     f48:	28800326 	beq	r5,r2,f58 <__swsetup_r+0x10c>
     f4c:	8809883a 	mov	r4,r17
     f50:	00017940 	call	1794 <_free_r>
     f54:	80c0030b 	ldhu	r3,12(r16)
     f58:	80000c15 	stw	zero,48(r16)
     f5c:	80800417 	ldw	r2,16(r16)
     f60:	013ff6c4 	movi	r4,-37
     f64:	20c6703a 	and	r3,r4,r3
     f68:	80000115 	stw	zero,4(r16)
     f6c:	80800015 	stw	r2,0(r16)
     f70:	003fe306 	br	f00 <__swsetup_r+0xb4>
     f74:	1009883a 	mov	r4,r2
     f78:	00007640 	call	764 <__sinit>
     f7c:	003fbe06 	br	e78 <__swsetup_r+0x2c>
     f80:	00800244 	movi	r2,9
     f84:	88800015 	stw	r2,0(r17)
     f88:	18c01014 	ori	r3,r3,64
     f8c:	003fd406 	br	ee0 <__swsetup_r+0x94>

00000f90 <memchr>:
     f90:	defffc04 	addi	sp,sp,-16
     f94:	dc000015 	stw	r16,0(sp)
     f98:	2021883a 	mov	r16,r4
     f9c:	dc800215 	stw	r18,8(sp)
     fa0:	dfc00315 	stw	ra,12(sp)
     fa4:	dc400115 	stw	r17,4(sp)
     fa8:	808000cc 	andi	r2,r16,3
     fac:	2809883a 	mov	r4,r5
     fb0:	2825883a 	mov	r18,r5
     fb4:	10000e26 	beq	r2,zero,ff0 <memchr+0x60>
     fb8:	347fffc4 	addi	r17,r6,-1
     fbc:	30001726 	beq	r6,zero,101c <memchr+0x8c>
     fc0:	28c03fcc 	andi	r3,r5,255
     fc4:	00000606 	br	fe0 <memchr+0x50>
     fc8:	84000044 	addi	r16,r16,1
     fcc:	808000cc 	andi	r2,r16,3
     fd0:	10000826 	beq	r2,zero,ff4 <memchr+0x64>
     fd4:	8c7fffc4 	addi	r17,r17,-1
     fd8:	88bfffe0 	cmpeqi	r2,r17,-1
     fdc:	10000f1e 	bne	r2,zero,101c <memchr+0x8c>
     fe0:	80800003 	ldbu	r2,0(r16)
     fe4:	10fff81e 	bne	r2,r3,fc8 <memchr+0x38>
     fe8:	8005883a 	mov	r2,r16
     fec:	00000c06 	br	1020 <memchr+0x90>
     ff0:	3023883a 	mov	r17,r6
     ff4:	88800130 	cmpltui	r2,r17,4
     ff8:	10000f26 	beq	r2,zero,1038 <memchr+0xa8>
     ffc:	88000726 	beq	r17,zero,101c <memchr+0x8c>
    1000:	8463883a 	add	r17,r16,r17
    1004:	8005883a 	mov	r2,r16
    1008:	90c03fcc 	andi	r3,r18,255
    100c:	11000003 	ldbu	r4,0(r2)
    1010:	20c00326 	beq	r4,r3,1020 <memchr+0x90>
    1014:	10800044 	addi	r2,r2,1
    1018:	88bffc1e 	bne	r17,r2,100c <memchr+0x7c>
    101c:	0005883a 	mov	r2,zero
    1020:	dfc00317 	ldw	ra,12(sp)
    1024:	dc800217 	ldw	r18,8(sp)
    1028:	dc400117 	ldw	r17,4(sp)
    102c:	dc000017 	ldw	r16,0(sp)
    1030:	dec00404 	addi	sp,sp,16
    1034:	f800283a 	ret
    1038:	01404074 	movhi	r5,257
    103c:	29404044 	addi	r5,r5,257
    1040:	21003fcc 	andi	r4,r4,255
    1044:	00032500 	call	3250 <__mulsi3>
    1048:	01bfbff4 	movhi	r6,65279
    104c:	01602074 	movhi	r5,32897
    1050:	31bfbfc4 	addi	r6,r6,-257
    1054:	29602004 	addi	r5,r5,-32640
    1058:	00000406 	br	106c <memchr+0xdc>
    105c:	8c7fff04 	addi	r17,r17,-4
    1060:	88c00128 	cmpgeui	r3,r17,4
    1064:	84000104 	addi	r16,r16,4
    1068:	183fe426 	beq	r3,zero,ffc <memchr+0x6c>
    106c:	80c00017 	ldw	r3,0(r16)
    1070:	10c6f03a 	xor	r3,r2,r3
    1074:	1989883a 	add	r4,r3,r6
    1078:	00c6303a 	nor	r3,zero,r3
    107c:	20c6703a 	and	r3,r4,r3
    1080:	1946703a 	and	r3,r3,r5
    1084:	183ff526 	beq	r3,zero,105c <memchr+0xcc>
    1088:	003fdc06 	br	ffc <memchr+0x6c>

0000108c <memcpy>:
    108c:	30c00428 	cmpgeui	r3,r6,16
    1090:	2005883a 	mov	r2,r4
    1094:	18000b1e 	bne	r3,zero,10c4 <memcpy+0x38>
    1098:	2007883a 	mov	r3,r4
    109c:	31ffffc4 	addi	r7,r6,-1
    10a0:	30003426 	beq	r6,zero,1174 <memcpy+0xe8>
    10a4:	39c00044 	addi	r7,r7,1
    10a8:	19cf883a 	add	r7,r3,r7
    10ac:	29800003 	ldbu	r6,0(r5)
    10b0:	18c00044 	addi	r3,r3,1
    10b4:	29400044 	addi	r5,r5,1
    10b8:	19bfffc5 	stb	r6,-1(r3)
    10bc:	19fffb1e 	bne	r3,r7,10ac <memcpy+0x20>
    10c0:	f800283a 	ret
    10c4:	2146b03a 	or	r3,r4,r5
    10c8:	18c000cc 	andi	r3,r3,3
    10cc:	18002a1e 	bne	r3,zero,1178 <memcpy+0xec>
    10d0:	333ffc04 	addi	r12,r6,-16
    10d4:	6018d13a 	srli	r12,r12,4
    10d8:	2811883a 	mov	r8,r5
    10dc:	200f883a 	mov	r7,r4
    10e0:	63000044 	addi	r12,r12,1
    10e4:	6018913a 	slli	r12,r12,4
    10e8:	2307883a 	add	r3,r4,r12
    10ec:	42c00017 	ldw	r11,0(r8)
    10f0:	42800117 	ldw	r10,4(r8)
    10f4:	42400217 	ldw	r9,8(r8)
    10f8:	41000317 	ldw	r4,12(r8)
    10fc:	39c00404 	addi	r7,r7,16
    1100:	3afffc15 	stw	r11,-16(r7)
    1104:	3abffd15 	stw	r10,-12(r7)
    1108:	3a7ffe15 	stw	r9,-8(r7)
    110c:	393fff15 	stw	r4,-4(r7)
    1110:	42000404 	addi	r8,r8,16
    1114:	38fff51e 	bne	r7,r3,10ec <memcpy+0x60>
    1118:	3100030c 	andi	r4,r6,12
    111c:	2b0b883a 	add	r5,r5,r12
    1120:	324003cc 	andi	r9,r6,15
    1124:	20001726 	beq	r4,zero,1184 <memcpy+0xf8>
    1128:	2811883a 	mov	r8,r5
    112c:	1809883a 	mov	r4,r3
    1130:	1a57883a 	add	r11,r3,r9
    1134:	42800017 	ldw	r10,0(r8)
    1138:	21000104 	addi	r4,r4,4
    113c:	590fc83a 	sub	r7,r11,r4
    1140:	39c00128 	cmpgeui	r7,r7,4
    1144:	22bfff15 	stw	r10,-4(r4)
    1148:	42000104 	addi	r8,r8,4
    114c:	383ff91e 	bne	r7,zero,1134 <memcpy+0xa8>
    1150:	493fff04 	addi	r4,r9,-4
    1154:	2008d0ba 	srli	r4,r4,2
    1158:	318000cc 	andi	r6,r6,3
    115c:	31ffffc4 	addi	r7,r6,-1
    1160:	21000044 	addi	r4,r4,1
    1164:	200890ba 	slli	r4,r4,2
    1168:	1907883a 	add	r3,r3,r4
    116c:	290b883a 	add	r5,r5,r4
    1170:	303fcc1e 	bne	r6,zero,10a4 <memcpy+0x18>
    1174:	f800283a 	ret
    1178:	31ffffc4 	addi	r7,r6,-1
    117c:	2007883a 	mov	r3,r4
    1180:	003fc806 	br	10a4 <memcpy+0x18>
    1184:	480d883a 	mov	r6,r9
    1188:	003fc406 	br	109c <memcpy+0x10>

0000118c <memmove>:
    118c:	2005883a 	mov	r2,r4
    1190:	29000a2e 	bgeu	r5,r4,11bc <memmove+0x30>
    1194:	298f883a 	add	r7,r5,r6
    1198:	21c0082e 	bgeu	r4,r7,11bc <memmove+0x30>
    119c:	2187883a 	add	r3,r4,r6
    11a0:	30001226 	beq	r6,zero,11ec <memmove+0x60>
    11a4:	397fffc3 	ldbu	r5,-1(r7)
    11a8:	18ffffc4 	addi	r3,r3,-1
    11ac:	39ffffc4 	addi	r7,r7,-1
    11b0:	19400005 	stb	r5,0(r3)
    11b4:	10fffb1e 	bne	r2,r3,11a4 <memmove+0x18>
    11b8:	f800283a 	ret
    11bc:	30c00428 	cmpgeui	r3,r6,16
    11c0:	18000b1e 	bne	r3,zero,11f0 <memmove+0x64>
    11c4:	1007883a 	mov	r3,r2
    11c8:	31ffffc4 	addi	r7,r6,-1
    11cc:	30003626 	beq	r6,zero,12a8 <memmove+0x11c>
    11d0:	39c00044 	addi	r7,r7,1
    11d4:	19cf883a 	add	r7,r3,r7
    11d8:	29800003 	ldbu	r6,0(r5)
    11dc:	18c00044 	addi	r3,r3,1
    11e0:	29400044 	addi	r5,r5,1
    11e4:	19bfffc5 	stb	r6,-1(r3)
    11e8:	19fffb1e 	bne	r3,r7,11d8 <memmove+0x4c>
    11ec:	f800283a 	ret
    11f0:	1146b03a 	or	r3,r2,r5
    11f4:	18c000cc 	andi	r3,r3,3
    11f8:	1800281e 	bne	r3,zero,129c <memmove+0x110>
    11fc:	313ffc04 	addi	r4,r6,-16
    1200:	2008d13a 	srli	r4,r4,4
    1204:	2811883a 	mov	r8,r5
    1208:	100f883a 	mov	r7,r2
    120c:	21000044 	addi	r4,r4,1
    1210:	2008913a 	slli	r4,r4,4
    1214:	1107883a 	add	r3,r2,r4
    1218:	42400017 	ldw	r9,0(r8)
    121c:	42000404 	addi	r8,r8,16
    1220:	39c00404 	addi	r7,r7,16
    1224:	3a7ffc15 	stw	r9,-16(r7)
    1228:	427ffd17 	ldw	r9,-12(r8)
    122c:	3a7ffd15 	stw	r9,-12(r7)
    1230:	427ffe17 	ldw	r9,-8(r8)
    1234:	3a7ffe15 	stw	r9,-8(r7)
    1238:	427fff17 	ldw	r9,-4(r8)
    123c:	3a7fff15 	stw	r9,-4(r7)
    1240:	38fff51e 	bne	r7,r3,1218 <memmove+0x8c>
    1244:	31c0030c 	andi	r7,r6,12
    1248:	290b883a 	add	r5,r5,r4
    124c:	324003cc 	andi	r9,r6,15
    1250:	38001626 	beq	r7,zero,12ac <memmove+0x120>
    1254:	2809883a 	mov	r4,r5
    1258:	180f883a 	mov	r7,r3
    125c:	1a57883a 	add	r11,r3,r9
    1260:	22800017 	ldw	r10,0(r4)
    1264:	39c00104 	addi	r7,r7,4
    1268:	59d1c83a 	sub	r8,r11,r7
    126c:	42000128 	cmpgeui	r8,r8,4
    1270:	3abfff15 	stw	r10,-4(r7)
    1274:	21000104 	addi	r4,r4,4
    1278:	403ff91e 	bne	r8,zero,1260 <memmove+0xd4>
    127c:	493fff04 	addi	r4,r9,-4
    1280:	2008d0ba 	srli	r4,r4,2
    1284:	318000cc 	andi	r6,r6,3
    1288:	21000044 	addi	r4,r4,1
    128c:	200890ba 	slli	r4,r4,2
    1290:	1907883a 	add	r3,r3,r4
    1294:	290b883a 	add	r5,r5,r4
    1298:	003fcb06 	br	11c8 <memmove+0x3c>
    129c:	31ffffc4 	addi	r7,r6,-1
    12a0:	1007883a 	mov	r3,r2
    12a4:	003fca06 	br	11d0 <memmove+0x44>
    12a8:	f800283a 	ret
    12ac:	480d883a 	mov	r6,r9
    12b0:	003fc506 	br	11c8 <memmove+0x3c>

000012b4 <memset>:
    12b4:	defffb04 	addi	sp,sp,-20
    12b8:	dc800215 	stw	r18,8(sp)
    12bc:	dc400115 	stw	r17,4(sp)
    12c0:	dfc00415 	stw	ra,16(sp)
    12c4:	dcc00315 	stw	r19,12(sp)
    12c8:	dc000015 	stw	r16,0(sp)
    12cc:	208000cc 	andi	r2,r4,3
    12d0:	2023883a 	mov	r17,r4
    12d4:	2825883a 	mov	r18,r5
    12d8:	10004026 	beq	r2,zero,13dc <memset+0x128>
    12dc:	34ffffc4 	addi	r19,r6,-1
    12e0:	30003326 	beq	r6,zero,13b0 <memset+0xfc>
    12e4:	280f883a 	mov	r7,r5
    12e8:	2021883a 	mov	r16,r4
    12ec:	00000306 	br	12fc <memset+0x48>
    12f0:	9cffffc4 	addi	r19,r19,-1
    12f4:	99bfffe0 	cmpeqi	r6,r19,-1
    12f8:	30002d1e 	bne	r6,zero,13b0 <memset+0xfc>
    12fc:	84000044 	addi	r16,r16,1
    1300:	818000cc 	andi	r6,r16,3
    1304:	81ffffc5 	stb	r7,-1(r16)
    1308:	303ff91e 	bne	r6,zero,12f0 <memset+0x3c>
    130c:	98800128 	cmpgeui	r2,r19,4
    1310:	10002126 	beq	r2,zero,1398 <memset+0xe4>
    1314:	01404074 	movhi	r5,257
    1318:	29404044 	addi	r5,r5,257
    131c:	91003fcc 	andi	r4,r18,255
    1320:	00032500 	call	3250 <__mulsi3>
    1324:	98c00430 	cmpltui	r3,r19,16
    1328:	18002f1e 	bne	r3,zero,13e8 <memset+0x134>
    132c:	99bffc04 	addi	r6,r19,-16
    1330:	300cd13a 	srli	r6,r6,4
    1334:	31800044 	addi	r6,r6,1
    1338:	300c913a 	slli	r6,r6,4
    133c:	818d883a 	add	r6,r16,r6
    1340:	80800015 	stw	r2,0(r16)
    1344:	80800115 	stw	r2,4(r16)
    1348:	80800215 	stw	r2,8(r16)
    134c:	80800315 	stw	r2,12(r16)
    1350:	84000404 	addi	r16,r16,16
    1354:	81bffa1e 	bne	r16,r6,1340 <memset+0x8c>
    1358:	9900030c 	andi	r4,r19,12
    135c:	98c003cc 	andi	r3,r19,15
    1360:	20001b26 	beq	r4,zero,13d0 <memset+0x11c>
    1364:	3009883a 	mov	r4,r6
    1368:	30cb883a 	add	r5,r6,r3
    136c:	21000104 	addi	r4,r4,4
    1370:	290fc83a 	sub	r7,r5,r4
    1374:	39c00128 	cmpgeui	r7,r7,4
    1378:	20bfff15 	stw	r2,-4(r4)
    137c:	383ffb1e 	bne	r7,zero,136c <memset+0xb8>
    1380:	1c3fff04 	addi	r16,r3,-4
    1384:	8020d0ba 	srli	r16,r16,2
    1388:	1cc000cc 	andi	r19,r3,3
    138c:	84000044 	addi	r16,r16,1
    1390:	802090ba 	slli	r16,r16,2
    1394:	3421883a 	add	r16,r6,r16
    1398:	98000526 	beq	r19,zero,13b0 <memset+0xfc>
    139c:	900b883a 	mov	r5,r18
    13a0:	84c7883a 	add	r3,r16,r19
    13a4:	84000044 	addi	r16,r16,1
    13a8:	817fffc5 	stb	r5,-1(r16)
    13ac:	1c3ffd1e 	bne	r3,r16,13a4 <memset+0xf0>
    13b0:	8805883a 	mov	r2,r17
    13b4:	dfc00417 	ldw	ra,16(sp)
    13b8:	dcc00317 	ldw	r19,12(sp)
    13bc:	dc800217 	ldw	r18,8(sp)
    13c0:	dc400117 	ldw	r17,4(sp)
    13c4:	dc000017 	ldw	r16,0(sp)
    13c8:	dec00504 	addi	sp,sp,20
    13cc:	f800283a 	ret
    13d0:	1827883a 	mov	r19,r3
    13d4:	983ff11e 	bne	r19,zero,139c <memset+0xe8>
    13d8:	003ff506 	br	13b0 <memset+0xfc>
    13dc:	2021883a 	mov	r16,r4
    13e0:	3027883a 	mov	r19,r6
    13e4:	003fc906 	br	130c <memset+0x58>
    13e8:	800d883a 	mov	r6,r16
    13ec:	9807883a 	mov	r3,r19
    13f0:	003fdc06 	br	1364 <memset+0xb0>

000013f4 <_close_r>:
    13f4:	defffe04 	addi	sp,sp,-8
    13f8:	dc000015 	stw	r16,0(sp)
    13fc:	00800074 	movhi	r2,1
    1400:	2021883a 	mov	r16,r4
    1404:	2809883a 	mov	r4,r5
    1408:	dfc00115 	stw	ra,4(sp)
    140c:	1005ed15 	stw	zero,6068(r2)
    1410:	00032b40 	call	32b4 <close>
    1414:	10ffffd8 	cmpnei	r3,r2,-1
    1418:	18000426 	beq	r3,zero,142c <_close_r+0x38>
    141c:	dfc00117 	ldw	ra,4(sp)
    1420:	dc000017 	ldw	r16,0(sp)
    1424:	dec00204 	addi	sp,sp,8
    1428:	f800283a 	ret
    142c:	00c00074 	movhi	r3,1
    1430:	18c5ed17 	ldw	r3,6068(r3)
    1434:	183ff926 	beq	r3,zero,141c <_close_r+0x28>
    1438:	80c00015 	stw	r3,0(r16)
    143c:	dfc00117 	ldw	ra,4(sp)
    1440:	dc000017 	ldw	r16,0(sp)
    1444:	dec00204 	addi	sp,sp,8
    1448:	f800283a 	ret

0000144c <_reclaim_reent>:
    144c:	00800074 	movhi	r2,1
    1450:	1085e017 	ldw	r2,6016(r2)
    1454:	11002e26 	beq	r2,r4,1510 <_reclaim_reent+0xc4>
    1458:	21401117 	ldw	r5,68(r4)
    145c:	defffc04 	addi	sp,sp,-16
    1460:	dc400115 	stw	r17,4(sp)
    1464:	dfc00315 	stw	ra,12(sp)
    1468:	dc800215 	stw	r18,8(sp)
    146c:	dc000015 	stw	r16,0(sp)
    1470:	2023883a 	mov	r17,r4
    1474:	28000f26 	beq	r5,zero,14b4 <_reclaim_reent+0x68>
    1478:	0025883a 	mov	r18,zero
    147c:	2c85883a 	add	r2,r5,r18
    1480:	14000017 	ldw	r16,0(r2)
    1484:	80000626 	beq	r16,zero,14a0 <_reclaim_reent+0x54>
    1488:	800b883a 	mov	r5,r16
    148c:	84000017 	ldw	r16,0(r16)
    1490:	8809883a 	mov	r4,r17
    1494:	00017940 	call	1794 <_free_r>
    1498:	803ffb1e 	bne	r16,zero,1488 <_reclaim_reent+0x3c>
    149c:	89401117 	ldw	r5,68(r17)
    14a0:	94800104 	addi	r18,r18,4
    14a4:	90802018 	cmpnei	r2,r18,128
    14a8:	103ff41e 	bne	r2,zero,147c <_reclaim_reent+0x30>
    14ac:	8809883a 	mov	r4,r17
    14b0:	00017940 	call	1794 <_free_r>
    14b4:	89400e17 	ldw	r5,56(r17)
    14b8:	28000226 	beq	r5,zero,14c4 <_reclaim_reent+0x78>
    14bc:	8809883a 	mov	r4,r17
    14c0:	00017940 	call	1794 <_free_r>
    14c4:	89401317 	ldw	r5,76(r17)
    14c8:	28000226 	beq	r5,zero,14d4 <_reclaim_reent+0x88>
    14cc:	8809883a 	mov	r4,r17
    14d0:	00017940 	call	1794 <_free_r>
    14d4:	88800d17 	ldw	r2,52(r17)
    14d8:	10000726 	beq	r2,zero,14f8 <_reclaim_reent+0xac>
    14dc:	8809883a 	mov	r4,r17
    14e0:	dfc00317 	ldw	ra,12(sp)
    14e4:	dc800217 	ldw	r18,8(sp)
    14e8:	dc400117 	ldw	r17,4(sp)
    14ec:	dc000017 	ldw	r16,0(sp)
    14f0:	dec00404 	addi	sp,sp,16
    14f4:	1000683a 	jmp	r2
    14f8:	dfc00317 	ldw	ra,12(sp)
    14fc:	dc800217 	ldw	r18,8(sp)
    1500:	dc400117 	ldw	r17,4(sp)
    1504:	dc000017 	ldw	r16,0(sp)
    1508:	dec00404 	addi	sp,sp,16
    150c:	f800283a 	ret
    1510:	f800283a 	ret

00001514 <_lseek_r>:
    1514:	2807883a 	mov	r3,r5
    1518:	defffe04 	addi	sp,sp,-8
    151c:	dc000015 	stw	r16,0(sp)
    1520:	300b883a 	mov	r5,r6
    1524:	00800074 	movhi	r2,1
    1528:	380d883a 	mov	r6,r7
    152c:	2021883a 	mov	r16,r4
    1530:	1809883a 	mov	r4,r3
    1534:	dfc00115 	stw	ra,4(sp)
    1538:	1005ed15 	stw	zero,6068(r2)
    153c:	00037040 	call	3704 <lseek>
    1540:	10ffffd8 	cmpnei	r3,r2,-1
    1544:	18000426 	beq	r3,zero,1558 <_lseek_r+0x44>
    1548:	dfc00117 	ldw	ra,4(sp)
    154c:	dc000017 	ldw	r16,0(sp)
    1550:	dec00204 	addi	sp,sp,8
    1554:	f800283a 	ret
    1558:	00c00074 	movhi	r3,1
    155c:	18c5ed17 	ldw	r3,6068(r3)
    1560:	183ff926 	beq	r3,zero,1548 <_lseek_r+0x34>
    1564:	80c00015 	stw	r3,0(r16)
    1568:	dfc00117 	ldw	ra,4(sp)
    156c:	dc000017 	ldw	r16,0(sp)
    1570:	dec00204 	addi	sp,sp,8
    1574:	f800283a 	ret

00001578 <_read_r>:
    1578:	2807883a 	mov	r3,r5
    157c:	defffe04 	addi	sp,sp,-8
    1580:	dc000015 	stw	r16,0(sp)
    1584:	300b883a 	mov	r5,r6
    1588:	00800074 	movhi	r2,1
    158c:	380d883a 	mov	r6,r7
    1590:	2021883a 	mov	r16,r4
    1594:	1809883a 	mov	r4,r3
    1598:	dfc00115 	stw	ra,4(sp)
    159c:	1005ed15 	stw	zero,6068(r2)
    15a0:	00038e40 	call	38e4 <read>
    15a4:	10ffffd8 	cmpnei	r3,r2,-1
    15a8:	18000426 	beq	r3,zero,15bc <_read_r+0x44>
    15ac:	dfc00117 	ldw	ra,4(sp)
    15b0:	dc000017 	ldw	r16,0(sp)
    15b4:	dec00204 	addi	sp,sp,8
    15b8:	f800283a 	ret
    15bc:	00c00074 	movhi	r3,1
    15c0:	18c5ed17 	ldw	r3,6068(r3)
    15c4:	183ff926 	beq	r3,zero,15ac <_read_r+0x34>
    15c8:	80c00015 	stw	r3,0(r16)
    15cc:	dfc00117 	ldw	ra,4(sp)
    15d0:	dc000017 	ldw	r16,0(sp)
    15d4:	dec00204 	addi	sp,sp,8
    15d8:	f800283a 	ret

000015dc <_write_r>:
    15dc:	2807883a 	mov	r3,r5
    15e0:	defffe04 	addi	sp,sp,-8
    15e4:	dc000015 	stw	r16,0(sp)
    15e8:	300b883a 	mov	r5,r6
    15ec:	00800074 	movhi	r2,1
    15f0:	380d883a 	mov	r6,r7
    15f4:	2021883a 	mov	r16,r4
    15f8:	1809883a 	mov	r4,r3
    15fc:	dfc00115 	stw	ra,4(sp)
    1600:	1005ed15 	stw	zero,6068(r2)
    1604:	0003b800 	call	3b80 <write>
    1608:	10ffffd8 	cmpnei	r3,r2,-1
    160c:	18000426 	beq	r3,zero,1620 <_write_r+0x44>
    1610:	dfc00117 	ldw	ra,4(sp)
    1614:	dc000017 	ldw	r16,0(sp)
    1618:	dec00204 	addi	sp,sp,8
    161c:	f800283a 	ret
    1620:	00c00074 	movhi	r3,1
    1624:	18c5ed17 	ldw	r3,6068(r3)
    1628:	183ff926 	beq	r3,zero,1610 <_write_r+0x34>
    162c:	80c00015 	stw	r3,0(r16)
    1630:	dfc00117 	ldw	ra,4(sp)
    1634:	dc000017 	ldw	r16,0(sp)
    1638:	dec00204 	addi	sp,sp,8
    163c:	f800283a 	ret

00001640 <exit>:
    1640:	defffe04 	addi	sp,sp,-8
    1644:	000b883a 	mov	r5,zero
    1648:	dc000015 	stw	r16,0(sp)
    164c:	dfc00115 	stw	ra,4(sp)
    1650:	2021883a 	mov	r16,r4
    1654:	0002f840 	call	2f84 <__call_exitprocs>
    1658:	00800074 	movhi	r2,1
    165c:	1085ee17 	ldw	r2,6072(r2)
    1660:	10000126 	beq	r2,zero,1668 <exit+0x28>
    1664:	103ee83a 	callr	r2
    1668:	8009883a 	mov	r4,r16
    166c:	00033bc0 	call	33bc <_exit>

00001670 <_malloc_trim_r>:
    1670:	defffa04 	addi	sp,sp,-24
    1674:	dcc00315 	stw	r19,12(sp)
    1678:	04c00074 	movhi	r19,1
    167c:	dd000415 	stw	r20,16(sp)
    1680:	dc800215 	stw	r18,8(sp)
    1684:	dc400115 	stw	r17,4(sp)
    1688:	dc000015 	stw	r16,0(sp)
    168c:	2829883a 	mov	r20,r5
    1690:	dfc00515 	stw	ra,20(sp)
    1694:	9cc05c04 	addi	r19,r19,368
    1698:	2025883a 	mov	r18,r4
    169c:	00038600 	call	3860 <__malloc_lock>
    16a0:	98800217 	ldw	r2,8(r19)
    16a4:	14400117 	ldw	r17,4(r2)
    16a8:	00bfff04 	movi	r2,-4
    16ac:	88a2703a 	and	r17,r17,r2
    16b0:	8c03fbc4 	addi	r16,r17,4079
    16b4:	8521c83a 	sub	r16,r16,r20
    16b8:	8020d33a 	srli	r16,r16,12
    16bc:	843fffc4 	addi	r16,r16,-1
    16c0:	8020933a 	slli	r16,r16,12
    16c4:	80840008 	cmpgei	r2,r16,4096
    16c8:	10000626 	beq	r2,zero,16e4 <_malloc_trim_r+0x74>
    16cc:	000b883a 	mov	r5,zero
    16d0:	9009883a 	mov	r4,r18
    16d4:	0002f2c0 	call	2f2c <_sbrk_r>
    16d8:	98c00217 	ldw	r3,8(r19)
    16dc:	1c47883a 	add	r3,r3,r17
    16e0:	10c00b26 	beq	r2,r3,1710 <_malloc_trim_r+0xa0>
    16e4:	9009883a 	mov	r4,r18
    16e8:	00038840 	call	3884 <__malloc_unlock>
    16ec:	0005883a 	mov	r2,zero
    16f0:	dfc00517 	ldw	ra,20(sp)
    16f4:	dd000417 	ldw	r20,16(sp)
    16f8:	dcc00317 	ldw	r19,12(sp)
    16fc:	dc800217 	ldw	r18,8(sp)
    1700:	dc400117 	ldw	r17,4(sp)
    1704:	dc000017 	ldw	r16,0(sp)
    1708:	dec00604 	addi	sp,sp,24
    170c:	f800283a 	ret
    1710:	040bc83a 	sub	r5,zero,r16
    1714:	9009883a 	mov	r4,r18
    1718:	0002f2c0 	call	2f2c <_sbrk_r>
    171c:	10bfffd8 	cmpnei	r2,r2,-1
    1720:	10000d26 	beq	r2,zero,1758 <_malloc_trim_r+0xe8>
    1724:	00800074 	movhi	r2,1
    1728:	10864917 	ldw	r2,6436(r2)
    172c:	98c00217 	ldw	r3,8(r19)
    1730:	8c23c83a 	sub	r17,r17,r16
    1734:	8c400054 	ori	r17,r17,1
    1738:	1405c83a 	sub	r2,r2,r16
    173c:	1c400115 	stw	r17,4(r3)
    1740:	9009883a 	mov	r4,r18
    1744:	00c00074 	movhi	r3,1
    1748:	18864915 	stw	r2,6436(r3)
    174c:	00038840 	call	3884 <__malloc_unlock>
    1750:	00800044 	movi	r2,1
    1754:	003fe606 	br	16f0 <_malloc_trim_r+0x80>
    1758:	000b883a 	mov	r5,zero
    175c:	9009883a 	mov	r4,r18
    1760:	0002f2c0 	call	2f2c <_sbrk_r>
    1764:	99000217 	ldw	r4,8(r19)
    1768:	1107c83a 	sub	r3,r2,r4
    176c:	19400410 	cmplti	r5,r3,16
    1770:	283fdc1e 	bne	r5,zero,16e4 <_malloc_trim_r+0x74>
    1774:	01400074 	movhi	r5,1
    1778:	2945e117 	ldw	r5,6020(r5)
    177c:	18c00054 	ori	r3,r3,1
    1780:	20c00115 	stw	r3,4(r4)
    1784:	1145c83a 	sub	r2,r2,r5
    1788:	01400074 	movhi	r5,1
    178c:	28864915 	stw	r2,6436(r5)
    1790:	003fd406 	br	16e4 <_malloc_trim_r+0x74>

00001794 <_free_r>:
    1794:	28005f26 	beq	r5,zero,1914 <_free_r+0x180>
    1798:	defffd04 	addi	sp,sp,-12
    179c:	dc400115 	stw	r17,4(sp)
    17a0:	dc000015 	stw	r16,0(sp)
    17a4:	2023883a 	mov	r17,r4
    17a8:	2821883a 	mov	r16,r5
    17ac:	dfc00215 	stw	ra,8(sp)
    17b0:	00038600 	call	3860 <__malloc_lock>
    17b4:	81ffff17 	ldw	r7,-4(r16)
    17b8:	00bfff84 	movi	r2,-2
    17bc:	80fffe04 	addi	r3,r16,-8
    17c0:	3884703a 	and	r2,r7,r2
    17c4:	01800074 	movhi	r6,1
    17c8:	1889883a 	add	r4,r3,r2
    17cc:	31805c04 	addi	r6,r6,368
    17d0:	21400117 	ldw	r5,4(r4)
    17d4:	32000217 	ldw	r8,8(r6)
    17d8:	027fff04 	movi	r9,-4
    17dc:	2a4a703a 	and	r5,r5,r9
    17e0:	41006526 	beq	r8,r4,1978 <_free_r+0x1e4>
    17e4:	21400115 	stw	r5,4(r4)
    17e8:	39c0004c 	andi	r7,r7,1
    17ec:	2151883a 	add	r8,r4,r5
    17f0:	3800281e 	bne	r7,zero,1894 <_free_r+0x100>
    17f4:	82bffe17 	ldw	r10,-8(r16)
    17f8:	42000117 	ldw	r8,4(r8)
    17fc:	01c00074 	movhi	r7,1
    1800:	1a87c83a 	sub	r3,r3,r10
    1804:	1a400217 	ldw	r9,8(r3)
    1808:	39c05e04 	addi	r7,r7,376
    180c:	1285883a 	add	r2,r2,r10
    1810:	4200004c 	andi	r8,r8,1
    1814:	49c04d26 	beq	r9,r7,194c <_free_r+0x1b8>
    1818:	1a800317 	ldw	r10,12(r3)
    181c:	4a800315 	stw	r10,12(r9)
    1820:	52400215 	stw	r9,8(r10)
    1824:	40006926 	beq	r8,zero,19cc <_free_r+0x238>
    1828:	11400054 	ori	r5,r2,1
    182c:	19400115 	stw	r5,4(r3)
    1830:	20800015 	stw	r2,0(r4)
    1834:	11008028 	cmpgeui	r4,r2,512
    1838:	20001e1e 	bne	r4,zero,18b4 <_free_r+0x120>
    183c:	1008d0fa 	srli	r4,r2,3
    1840:	100ad17a 	srli	r5,r2,5
    1844:	31c00117 	ldw	r7,4(r6)
    1848:	20800044 	addi	r2,r4,1
    184c:	100490fa 	slli	r2,r2,3
    1850:	01000044 	movi	r4,1
    1854:	2148983a 	sll	r4,r4,r5
    1858:	3085883a 	add	r2,r6,r2
    185c:	11400017 	ldw	r5,0(r2)
    1860:	21c8b03a 	or	r4,r4,r7
    1864:	11fffe04 	addi	r7,r2,-8
    1868:	19c00315 	stw	r7,12(r3)
    186c:	19400215 	stw	r5,8(r3)
    1870:	31000115 	stw	r4,4(r6)
    1874:	10c00015 	stw	r3,0(r2)
    1878:	28c00315 	stw	r3,12(r5)
    187c:	8809883a 	mov	r4,r17
    1880:	dfc00217 	ldw	ra,8(sp)
    1884:	dc400117 	ldw	r17,4(sp)
    1888:	dc000017 	ldw	r16,0(sp)
    188c:	dec00304 	addi	sp,sp,12
    1890:	00038841 	jmpi	3884 <__malloc_unlock>
    1894:	41c00117 	ldw	r7,4(r8)
    1898:	39c0004c 	andi	r7,r7,1
    189c:	38001e26 	beq	r7,zero,1918 <_free_r+0x184>
    18a0:	11400054 	ori	r5,r2,1
    18a4:	817fff15 	stw	r5,-4(r16)
    18a8:	20800015 	stw	r2,0(r4)
    18ac:	11008028 	cmpgeui	r4,r2,512
    18b0:	203fe226 	beq	r4,zero,183c <_free_r+0xa8>
    18b4:	1008d27a 	srli	r4,r2,9
    18b8:	21400168 	cmpgeui	r5,r4,5
    18bc:	2800451e 	bne	r5,zero,19d4 <_free_r+0x240>
    18c0:	1008d1ba 	srli	r4,r2,6
    18c4:	21c00e44 	addi	r7,r4,57
    18c8:	380e90fa 	slli	r7,r7,3
    18cc:	21000e04 	addi	r4,r4,56
    18d0:	31cf883a 	add	r7,r6,r7
    18d4:	39400017 	ldw	r5,0(r7)
    18d8:	39fffe04 	addi	r7,r7,-8
    18dc:	39405326 	beq	r7,r5,1a2c <_free_r+0x298>
    18e0:	01bfff04 	movi	r6,-4
    18e4:	00000206 	br	18f0 <_free_r+0x15c>
    18e8:	29400217 	ldw	r5,8(r5)
    18ec:	39400326 	beq	r7,r5,18fc <_free_r+0x168>
    18f0:	29000117 	ldw	r4,4(r5)
    18f4:	2188703a 	and	r4,r4,r6
    18f8:	113ffb36 	bltu	r2,r4,18e8 <_free_r+0x154>
    18fc:	29c00317 	ldw	r7,12(r5)
    1900:	19c00315 	stw	r7,12(r3)
    1904:	19400215 	stw	r5,8(r3)
    1908:	38c00215 	stw	r3,8(r7)
    190c:	28c00315 	stw	r3,12(r5)
    1910:	003fda06 	br	187c <_free_r+0xe8>
    1914:	f800283a 	ret
    1918:	01c00074 	movhi	r7,1
    191c:	1145883a 	add	r2,r2,r5
    1920:	39c05e04 	addi	r7,r7,376
    1924:	21400217 	ldw	r5,8(r4)
    1928:	29c03726 	beq	r5,r7,1a08 <_free_r+0x274>
    192c:	22000317 	ldw	r8,12(r4)
    1930:	11c00054 	ori	r7,r2,1
    1934:	1889883a 	add	r4,r3,r2
    1938:	2a000315 	stw	r8,12(r5)
    193c:	41400215 	stw	r5,8(r8)
    1940:	19c00115 	stw	r7,4(r3)
    1944:	20800015 	stw	r2,0(r4)
    1948:	003fba06 	br	1834 <_free_r+0xa0>
    194c:	40004f1e 	bne	r8,zero,1a8c <_free_r+0x2f8>
    1950:	21800217 	ldw	r6,8(r4)
    1954:	21000317 	ldw	r4,12(r4)
    1958:	288b883a 	add	r5,r5,r2
    195c:	28800054 	ori	r2,r5,1
    1960:	31000315 	stw	r4,12(r6)
    1964:	21800215 	stw	r6,8(r4)
    1968:	18800115 	stw	r2,4(r3)
    196c:	1947883a 	add	r3,r3,r5
    1970:	19400015 	stw	r5,0(r3)
    1974:	003fc106 	br	187c <_free_r+0xe8>
    1978:	39c0004c 	andi	r7,r7,1
    197c:	114b883a 	add	r5,r2,r5
    1980:	3800071e 	bne	r7,zero,19a0 <_free_r+0x20c>
    1984:	81fffe17 	ldw	r7,-8(r16)
    1988:	19c7c83a 	sub	r3,r3,r7
    198c:	18800317 	ldw	r2,12(r3)
    1990:	19000217 	ldw	r4,8(r3)
    1994:	29cb883a 	add	r5,r5,r7
    1998:	20800315 	stw	r2,12(r4)
    199c:	11000215 	stw	r4,8(r2)
    19a0:	00800074 	movhi	r2,1
    19a4:	29000054 	ori	r4,r5,1
    19a8:	1085e217 	ldw	r2,6024(r2)
    19ac:	19000115 	stw	r4,4(r3)
    19b0:	30c00215 	stw	r3,8(r6)
    19b4:	28bfb136 	bltu	r5,r2,187c <_free_r+0xe8>
    19b8:	00800074 	movhi	r2,1
    19bc:	1145f117 	ldw	r5,6084(r2)
    19c0:	8809883a 	mov	r4,r17
    19c4:	00016700 	call	1670 <_malloc_trim_r>
    19c8:	003fac06 	br	187c <_free_r+0xe8>
    19cc:	1145883a 	add	r2,r2,r5
    19d0:	003fd406 	br	1924 <_free_r+0x190>
    19d4:	21400568 	cmpgeui	r5,r4,21
    19d8:	28000726 	beq	r5,zero,19f8 <_free_r+0x264>
    19dc:	21401568 	cmpgeui	r5,r4,85
    19e0:	2800191e 	bne	r5,zero,1a48 <_free_r+0x2b4>
    19e4:	1008d33a 	srli	r4,r2,12
    19e8:	21c01bc4 	addi	r7,r4,111
    19ec:	380e90fa 	slli	r7,r7,3
    19f0:	21001b84 	addi	r4,r4,110
    19f4:	003fb606 	br	18d0 <_free_r+0x13c>
    19f8:	21c01704 	addi	r7,r4,92
    19fc:	380e90fa 	slli	r7,r7,3
    1a00:	210016c4 	addi	r4,r4,91
    1a04:	003fb206 	br	18d0 <_free_r+0x13c>
    1a08:	30c00515 	stw	r3,20(r6)
    1a0c:	30c00415 	stw	r3,16(r6)
    1a10:	11000054 	ori	r4,r2,1
    1a14:	19c00315 	stw	r7,12(r3)
    1a18:	19c00215 	stw	r7,8(r3)
    1a1c:	19000115 	stw	r4,4(r3)
    1a20:	1887883a 	add	r3,r3,r2
    1a24:	18800015 	stw	r2,0(r3)
    1a28:	003f9406 	br	187c <_free_r+0xe8>
    1a2c:	2009d0ba 	srai	r4,r4,2
    1a30:	00800044 	movi	r2,1
    1a34:	32000117 	ldw	r8,4(r6)
    1a38:	1104983a 	sll	r2,r2,r4
    1a3c:	1204b03a 	or	r2,r2,r8
    1a40:	30800115 	stw	r2,4(r6)
    1a44:	003fae06 	br	1900 <_free_r+0x16c>
    1a48:	21405568 	cmpgeui	r5,r4,341
    1a4c:	2800051e 	bne	r5,zero,1a64 <_free_r+0x2d0>
    1a50:	1008d3fa 	srli	r4,r2,15
    1a54:	21c01e04 	addi	r7,r4,120
    1a58:	380e90fa 	slli	r7,r7,3
    1a5c:	21001dc4 	addi	r4,r4,119
    1a60:	003f9b06 	br	18d0 <_free_r+0x13c>
    1a64:	21015568 	cmpgeui	r4,r4,1365
    1a68:	2000051e 	bne	r4,zero,1a80 <_free_r+0x2ec>
    1a6c:	1008d4ba 	srli	r4,r2,18
    1a70:	21c01f44 	addi	r7,r4,125
    1a74:	380e90fa 	slli	r7,r7,3
    1a78:	21001f04 	addi	r4,r4,124
    1a7c:	003f9406 	br	18d0 <_free_r+0x13c>
    1a80:	01c0fe04 	movi	r7,1016
    1a84:	01001f84 	movi	r4,126
    1a88:	003f9106 	br	18d0 <_free_r+0x13c>
    1a8c:	11400054 	ori	r5,r2,1
    1a90:	19400115 	stw	r5,4(r3)
    1a94:	20800015 	stw	r2,0(r4)
    1a98:	003f7806 	br	187c <_free_r+0xe8>

00001a9c <_malloc_r>:
    1a9c:	defff604 	addi	sp,sp,-40
    1aa0:	dc400115 	stw	r17,4(sp)
    1aa4:	2c4002c4 	addi	r17,r5,11
    1aa8:	dc800215 	stw	r18,8(sp)
    1aac:	dfc00915 	stw	ra,36(sp)
    1ab0:	df000815 	stw	fp,32(sp)
    1ab4:	ddc00715 	stw	r23,28(sp)
    1ab8:	dd800615 	stw	r22,24(sp)
    1abc:	dd400515 	stw	r21,20(sp)
    1ac0:	dd000415 	stw	r20,16(sp)
    1ac4:	dcc00315 	stw	r19,12(sp)
    1ac8:	dc000015 	stw	r16,0(sp)
    1acc:	888005e8 	cmpgeui	r2,r17,23
    1ad0:	2025883a 	mov	r18,r4
    1ad4:	1000261e 	bne	r2,zero,1b70 <_malloc_r+0xd4>
    1ad8:	29400468 	cmpgeui	r5,r5,17
    1adc:	28008e1e 	bne	r5,zero,1d18 <_malloc_r+0x27c>
    1ae0:	00038600 	call	3860 <__malloc_lock>
    1ae4:	04400404 	movi	r17,16
    1ae8:	00800604 	movi	r2,24
    1aec:	01c00084 	movi	r7,2
    1af0:	04c00074 	movhi	r19,1
    1af4:	9cc05c04 	addi	r19,r19,368
    1af8:	9885883a 	add	r2,r19,r2
    1afc:	14000117 	ldw	r16,4(r2)
    1b00:	10fffe04 	addi	r3,r2,-8
    1b04:	80c0d026 	beq	r16,r3,1e48 <_malloc_r+0x3ac>
    1b08:	80800117 	ldw	r2,4(r16)
    1b0c:	81000317 	ldw	r4,12(r16)
    1b10:	81400217 	ldw	r5,8(r16)
    1b14:	00ffff04 	movi	r3,-4
    1b18:	10c4703a 	and	r2,r2,r3
    1b1c:	8085883a 	add	r2,r16,r2
    1b20:	10c00117 	ldw	r3,4(r2)
    1b24:	29000315 	stw	r4,12(r5)
    1b28:	21400215 	stw	r5,8(r4)
    1b2c:	18c00054 	ori	r3,r3,1
    1b30:	10c00115 	stw	r3,4(r2)
    1b34:	9009883a 	mov	r4,r18
    1b38:	00038840 	call	3884 <__malloc_unlock>
    1b3c:	80800204 	addi	r2,r16,8
    1b40:	dfc00917 	ldw	ra,36(sp)
    1b44:	df000817 	ldw	fp,32(sp)
    1b48:	ddc00717 	ldw	r23,28(sp)
    1b4c:	dd800617 	ldw	r22,24(sp)
    1b50:	dd400517 	ldw	r21,20(sp)
    1b54:	dd000417 	ldw	r20,16(sp)
    1b58:	dcc00317 	ldw	r19,12(sp)
    1b5c:	dc800217 	ldw	r18,8(sp)
    1b60:	dc400117 	ldw	r17,4(sp)
    1b64:	dc000017 	ldw	r16,0(sp)
    1b68:	dec00a04 	addi	sp,sp,40
    1b6c:	f800283a 	ret
    1b70:	00bffe04 	movi	r2,-8
    1b74:	88a2703a 	and	r17,r17,r2
    1b78:	88006716 	blt	r17,zero,1d18 <_malloc_r+0x27c>
    1b7c:	89406636 	bltu	r17,r5,1d18 <_malloc_r+0x27c>
    1b80:	00038600 	call	3860 <__malloc_lock>
    1b84:	88807e28 	cmpgeui	r2,r17,504
    1b88:	1000f426 	beq	r2,zero,1f5c <_malloc_r+0x4c0>
    1b8c:	8804d27a 	srli	r2,r17,9
    1b90:	10006526 	beq	r2,zero,1d28 <_malloc_r+0x28c>
    1b94:	10c00168 	cmpgeui	r3,r2,5
    1b98:	1800c81e 	bne	r3,zero,1ebc <_malloc_r+0x420>
    1b9c:	8804d1ba 	srli	r2,r17,6
    1ba0:	11c00e44 	addi	r7,r2,57
    1ba4:	380890fa 	slli	r4,r7,3
    1ba8:	12000e04 	addi	r8,r2,56
    1bac:	04c00074 	movhi	r19,1
    1bb0:	9cc05c04 	addi	r19,r19,368
    1bb4:	9909883a 	add	r4,r19,r4
    1bb8:	24000117 	ldw	r16,4(r4)
    1bbc:	213ffe04 	addi	r4,r4,-8
    1bc0:	24000c26 	beq	r4,r16,1bf4 <_malloc_r+0x158>
    1bc4:	01bfff04 	movi	r6,-4
    1bc8:	00000406 	br	1bdc <_malloc_r+0x140>
    1bcc:	81400317 	ldw	r5,12(r16)
    1bd0:	1800970e 	bge	r3,zero,1e30 <_malloc_r+0x394>
    1bd4:	21400726 	beq	r4,r5,1bf4 <_malloc_r+0x158>
    1bd8:	2821883a 	mov	r16,r5
    1bdc:	80800117 	ldw	r2,4(r16)
    1be0:	1184703a 	and	r2,r2,r6
    1be4:	1447c83a 	sub	r3,r2,r17
    1be8:	19400408 	cmpgei	r5,r3,16
    1bec:	283ff726 	beq	r5,zero,1bcc <_malloc_r+0x130>
    1bf0:	400f883a 	mov	r7,r8
    1bf4:	9c000417 	ldw	r16,16(r19)
    1bf8:	02400074 	movhi	r9,1
    1bfc:	4a405e04 	addi	r9,r9,376
    1c00:	82407f26 	beq	r16,r9,1e00 <_malloc_r+0x364>
    1c04:	80800117 	ldw	r2,4(r16)
    1c08:	00ffff04 	movi	r3,-4
    1c0c:	10c4703a 	and	r2,r2,r3
    1c10:	1447c83a 	sub	r3,r2,r17
    1c14:	19000410 	cmplti	r4,r3,16
    1c18:	2000d326 	beq	r4,zero,1f68 <_malloc_r+0x4cc>
    1c1c:	9a400515 	stw	r9,20(r19)
    1c20:	9a400415 	stw	r9,16(r19)
    1c24:	1800c50e 	bge	r3,zero,1f3c <_malloc_r+0x4a0>
    1c28:	10c08028 	cmpgeui	r3,r2,512
    1c2c:	99400117 	ldw	r5,4(r19)
    1c30:	1800891e 	bne	r3,zero,1e58 <_malloc_r+0x3bc>
    1c34:	1006d0fa 	srli	r3,r2,3
    1c38:	1008d17a 	srli	r4,r2,5
    1c3c:	18800044 	addi	r2,r3,1
    1c40:	100490fa 	slli	r2,r2,3
    1c44:	00c00044 	movi	r3,1
    1c48:	1906983a 	sll	r3,r3,r4
    1c4c:	9885883a 	add	r2,r19,r2
    1c50:	11000017 	ldw	r4,0(r2)
    1c54:	28cab03a 	or	r5,r5,r3
    1c58:	10fffe04 	addi	r3,r2,-8
    1c5c:	80c00315 	stw	r3,12(r16)
    1c60:	81000215 	stw	r4,8(r16)
    1c64:	99400115 	stw	r5,4(r19)
    1c68:	14000015 	stw	r16,0(r2)
    1c6c:	24000315 	stw	r16,12(r4)
    1c70:	3805d0ba 	srai	r2,r7,2
    1c74:	01000044 	movi	r4,1
    1c78:	2088983a 	sll	r4,r4,r2
    1c7c:	29002e36 	bltu	r5,r4,1d38 <_malloc_r+0x29c>
    1c80:	2144703a 	and	r2,r4,r5
    1c84:	10000a1e 	bne	r2,zero,1cb0 <_malloc_r+0x214>
    1c88:	2109883a 	add	r4,r4,r4
    1c8c:	00bfff04 	movi	r2,-4
    1c90:	3884703a 	and	r2,r7,r2
    1c94:	2146703a 	and	r3,r4,r5
    1c98:	11c00104 	addi	r7,r2,4
    1c9c:	1800041e 	bne	r3,zero,1cb0 <_malloc_r+0x214>
    1ca0:	2109883a 	add	r4,r4,r4
    1ca4:	2144703a 	and	r2,r4,r5
    1ca8:	39c00104 	addi	r7,r7,4
    1cac:	103ffc26 	beq	r2,zero,1ca0 <_malloc_r+0x204>
    1cb0:	02bfff04 	movi	r10,-4
    1cb4:	381690fa 	slli	r11,r7,3
    1cb8:	3819883a 	mov	r12,r7
    1cbc:	9ad7883a 	add	r11,r19,r11
    1cc0:	5811883a 	mov	r8,r11
    1cc4:	40800317 	ldw	r2,12(r8)
    1cc8:	40808526 	beq	r8,r2,1ee0 <_malloc_r+0x444>
    1ccc:	10c00117 	ldw	r3,4(r2)
    1cd0:	1021883a 	mov	r16,r2
    1cd4:	10800317 	ldw	r2,12(r2)
    1cd8:	1a86703a 	and	r3,r3,r10
    1cdc:	1c4bc83a 	sub	r5,r3,r17
    1ce0:	29800410 	cmplti	r6,r5,16
    1ce4:	30008326 	beq	r6,zero,1ef4 <_malloc_r+0x458>
    1ce8:	283ff716 	blt	r5,zero,1cc8 <_malloc_r+0x22c>
    1cec:	80c7883a 	add	r3,r16,r3
    1cf0:	19400117 	ldw	r5,4(r3)
    1cf4:	81800217 	ldw	r6,8(r16)
    1cf8:	9009883a 	mov	r4,r18
    1cfc:	29400054 	ori	r5,r5,1
    1d00:	19400115 	stw	r5,4(r3)
    1d04:	30800315 	stw	r2,12(r6)
    1d08:	11800215 	stw	r6,8(r2)
    1d0c:	00038840 	call	3884 <__malloc_unlock>
    1d10:	80800204 	addi	r2,r16,8
    1d14:	003f8a06 	br	1b40 <_malloc_r+0xa4>
    1d18:	00800304 	movi	r2,12
    1d1c:	90800015 	stw	r2,0(r18)
    1d20:	0005883a 	mov	r2,zero
    1d24:	003f8606 	br	1b40 <_malloc_r+0xa4>
    1d28:	01008004 	movi	r4,512
    1d2c:	01c01004 	movi	r7,64
    1d30:	02000fc4 	movi	r8,63
    1d34:	003f9d06 	br	1bac <_malloc_r+0x110>
    1d38:	9c000217 	ldw	r16,8(r19)
    1d3c:	00bfff04 	movi	r2,-4
    1d40:	80c00117 	ldw	r3,4(r16)
    1d44:	18aa703a 	and	r21,r3,r2
    1d48:	ac400336 	bltu	r21,r17,1d58 <_malloc_r+0x2bc>
    1d4c:	ac47c83a 	sub	r3,r21,r17
    1d50:	18800408 	cmpgei	r2,r3,16
    1d54:	10002c1e 	bne	r2,zero,1e08 <_malloc_r+0x36c>
    1d58:	00800074 	movhi	r2,1
    1d5c:	1085e117 	ldw	r2,6020(r2)
    1d60:	00c00074 	movhi	r3,1
    1d64:	1d05f117 	ldw	r20,6084(r3)
    1d68:	10bfffd8 	cmpnei	r2,r2,-1
    1d6c:	856f883a 	add	r23,r16,r21
    1d70:	8d29883a 	add	r20,r17,r20
    1d74:	1000eb26 	beq	r2,zero,2124 <_malloc_r+0x688>
    1d78:	a50403c4 	addi	r20,r20,4111
    1d7c:	00bc0004 	movi	r2,-4096
    1d80:	a0a8703a 	and	r20,r20,r2
    1d84:	a00b883a 	mov	r5,r20
    1d88:	9009883a 	mov	r4,r18
    1d8c:	0002f2c0 	call	2f2c <_sbrk_r>
    1d90:	102d883a 	mov	r22,r2
    1d94:	10bfffd8 	cmpnei	r2,r2,-1
    1d98:	10008826 	beq	r2,zero,1fbc <_malloc_r+0x520>
    1d9c:	b5c08636 	bltu	r22,r23,1fb8 <_malloc_r+0x51c>
    1da0:	00800074 	movhi	r2,1
    1da4:	11064917 	ldw	r4,6436(r2)
    1da8:	a109883a 	add	r4,r20,r4
    1dac:	11064915 	stw	r4,6436(r2)
    1db0:	2007883a 	mov	r3,r4
    1db4:	bd80a91e 	bne	r23,r22,205c <_malloc_r+0x5c0>
    1db8:	b083ffcc 	andi	r2,r22,4095
    1dbc:	1000a71e 	bne	r2,zero,205c <_malloc_r+0x5c0>
    1dc0:	9d800217 	ldw	r22,8(r19)
    1dc4:	ad07883a 	add	r3,r21,r20
    1dc8:	18c00054 	ori	r3,r3,1
    1dcc:	b0c00115 	stw	r3,4(r22)
    1dd0:	00800074 	movhi	r2,1
    1dd4:	1085f017 	ldw	r2,6080(r2)
    1dd8:	1100022e 	bgeu	r2,r4,1de4 <_malloc_r+0x348>
    1ddc:	00800074 	movhi	r2,1
    1de0:	1105f015 	stw	r4,6080(r2)
    1de4:	00800074 	movhi	r2,1
    1de8:	1085ef17 	ldw	r2,6076(r2)
    1dec:	1100022e 	bgeu	r2,r4,1df8 <_malloc_r+0x35c>
    1df0:	00800074 	movhi	r2,1
    1df4:	1105ef15 	stw	r4,6076(r2)
    1df8:	b021883a 	mov	r16,r22
    1dfc:	00007106 	br	1fc4 <_malloc_r+0x528>
    1e00:	99400117 	ldw	r5,4(r19)
    1e04:	003f9a06 	br	1c70 <_malloc_r+0x1d4>
    1e08:	88800054 	ori	r2,r17,1
    1e0c:	80800115 	stw	r2,4(r16)
    1e10:	8463883a 	add	r17,r16,r17
    1e14:	9c400215 	stw	r17,8(r19)
    1e18:	18c00054 	ori	r3,r3,1
    1e1c:	88c00115 	stw	r3,4(r17)
    1e20:	9009883a 	mov	r4,r18
    1e24:	00038840 	call	3884 <__malloc_unlock>
    1e28:	80800204 	addi	r2,r16,8
    1e2c:	003f4406 	br	1b40 <_malloc_r+0xa4>
    1e30:	81000217 	ldw	r4,8(r16)
    1e34:	8085883a 	add	r2,r16,r2
    1e38:	10c00117 	ldw	r3,4(r2)
    1e3c:	21400315 	stw	r5,12(r4)
    1e40:	29000215 	stw	r4,8(r5)
    1e44:	003f3906 	br	1b2c <_malloc_r+0x90>
    1e48:	14000317 	ldw	r16,12(r2)
    1e4c:	143f2e1e 	bne	r2,r16,1b08 <_malloc_r+0x6c>
    1e50:	39c00084 	addi	r7,r7,2
    1e54:	003f6706 	br	1bf4 <_malloc_r+0x158>
    1e58:	1006d27a 	srli	r3,r2,9
    1e5c:	19000168 	cmpgeui	r4,r3,5
    1e60:	20005026 	beq	r4,zero,1fa4 <_malloc_r+0x508>
    1e64:	19000568 	cmpgeui	r4,r3,21
    1e68:	2000c01e 	bne	r4,zero,216c <_malloc_r+0x6d0>
    1e6c:	19801704 	addi	r6,r3,92
    1e70:	300c90fa 	slli	r6,r6,3
    1e74:	190016c4 	addi	r4,r3,91
    1e78:	998d883a 	add	r6,r19,r6
    1e7c:	30c00017 	ldw	r3,0(r6)
    1e80:	31bffe04 	addi	r6,r6,-8
    1e84:	30c0a926 	beq	r6,r3,212c <_malloc_r+0x690>
    1e88:	023fff04 	movi	r8,-4
    1e8c:	00000206 	br	1e98 <_malloc_r+0x3fc>
    1e90:	18c00217 	ldw	r3,8(r3)
    1e94:	30c00326 	beq	r6,r3,1ea4 <_malloc_r+0x408>
    1e98:	19000117 	ldw	r4,4(r3)
    1e9c:	2208703a 	and	r4,r4,r8
    1ea0:	113ffb36 	bltu	r2,r4,1e90 <_malloc_r+0x3f4>
    1ea4:	19800317 	ldw	r6,12(r3)
    1ea8:	81800315 	stw	r6,12(r16)
    1eac:	80c00215 	stw	r3,8(r16)
    1eb0:	34000215 	stw	r16,8(r6)
    1eb4:	1c000315 	stw	r16,12(r3)
    1eb8:	003f6d06 	br	1c70 <_malloc_r+0x1d4>
    1ebc:	10c00568 	cmpgeui	r3,r2,21
    1ec0:	18004926 	beq	r3,zero,1fe8 <_malloc_r+0x54c>
    1ec4:	10c01568 	cmpgeui	r3,r2,85
    1ec8:	1800af1e 	bne	r3,zero,2188 <_malloc_r+0x6ec>
    1ecc:	8804d33a 	srli	r2,r17,12
    1ed0:	11c01bc4 	addi	r7,r2,111
    1ed4:	380890fa 	slli	r4,r7,3
    1ed8:	12001b84 	addi	r8,r2,110
    1edc:	003f3306 	br	1bac <_malloc_r+0x110>
    1ee0:	63000044 	addi	r12,r12,1
    1ee4:	608000cc 	andi	r2,r12,3
    1ee8:	42000204 	addi	r8,r8,8
    1eec:	103f751e 	bne	r2,zero,1cc4 <_malloc_r+0x228>
    1ef0:	00004406 	br	2004 <_malloc_r+0x568>
    1ef4:	81000217 	ldw	r4,8(r16)
    1ef8:	89800054 	ori	r6,r17,1
    1efc:	81800115 	stw	r6,4(r16)
    1f00:	20800315 	stw	r2,12(r4)
    1f04:	11000215 	stw	r4,8(r2)
    1f08:	8463883a 	add	r17,r16,r17
    1f0c:	9c400515 	stw	r17,20(r19)
    1f10:	9c400415 	stw	r17,16(r19)
    1f14:	28800054 	ori	r2,r5,1
    1f18:	88800115 	stw	r2,4(r17)
    1f1c:	8a400315 	stw	r9,12(r17)
    1f20:	8a400215 	stw	r9,8(r17)
    1f24:	80c7883a 	add	r3,r16,r3
    1f28:	19400015 	stw	r5,0(r3)
    1f2c:	9009883a 	mov	r4,r18
    1f30:	00038840 	call	3884 <__malloc_unlock>
    1f34:	80800204 	addi	r2,r16,8
    1f38:	003f0106 	br	1b40 <_malloc_r+0xa4>
    1f3c:	8085883a 	add	r2,r16,r2
    1f40:	10c00117 	ldw	r3,4(r2)
    1f44:	9009883a 	mov	r4,r18
    1f48:	18c00054 	ori	r3,r3,1
    1f4c:	10c00115 	stw	r3,4(r2)
    1f50:	00038840 	call	3884 <__malloc_unlock>
    1f54:	80800204 	addi	r2,r16,8
    1f58:	003ef906 	br	1b40 <_malloc_r+0xa4>
    1f5c:	880ed0fa 	srli	r7,r17,3
    1f60:	88800204 	addi	r2,r17,8
    1f64:	003ee206 	br	1af0 <_malloc_r+0x54>
    1f68:	89000054 	ori	r4,r17,1
    1f6c:	81000115 	stw	r4,4(r16)
    1f70:	8463883a 	add	r17,r16,r17
    1f74:	9c400515 	stw	r17,20(r19)
    1f78:	9c400415 	stw	r17,16(r19)
    1f7c:	19000054 	ori	r4,r3,1
    1f80:	89000115 	stw	r4,4(r17)
    1f84:	8085883a 	add	r2,r16,r2
    1f88:	8a400315 	stw	r9,12(r17)
    1f8c:	8a400215 	stw	r9,8(r17)
    1f90:	10c00015 	stw	r3,0(r2)
    1f94:	9009883a 	mov	r4,r18
    1f98:	00038840 	call	3884 <__malloc_unlock>
    1f9c:	80800204 	addi	r2,r16,8
    1fa0:	003ee706 	br	1b40 <_malloc_r+0xa4>
    1fa4:	1006d1ba 	srli	r3,r2,6
    1fa8:	19800e44 	addi	r6,r3,57
    1fac:	300c90fa 	slli	r6,r6,3
    1fb0:	19000e04 	addi	r4,r3,56
    1fb4:	003fb006 	br	1e78 <_malloc_r+0x3dc>
    1fb8:	84c02426 	beq	r16,r19,204c <_malloc_r+0x5b0>
    1fbc:	9c000217 	ldw	r16,8(r19)
    1fc0:	80c00117 	ldw	r3,4(r16)
    1fc4:	00bfff04 	movi	r2,-4
    1fc8:	1884703a 	and	r2,r3,r2
    1fcc:	1447c83a 	sub	r3,r2,r17
    1fd0:	14400236 	bltu	r2,r17,1fdc <_malloc_r+0x540>
    1fd4:	18800408 	cmpgei	r2,r3,16
    1fd8:	103f8b1e 	bne	r2,zero,1e08 <_malloc_r+0x36c>
    1fdc:	9009883a 	mov	r4,r18
    1fe0:	00038840 	call	3884 <__malloc_unlock>
    1fe4:	003f4e06 	br	1d20 <_malloc_r+0x284>
    1fe8:	11c01704 	addi	r7,r2,92
    1fec:	380890fa 	slli	r4,r7,3
    1ff0:	120016c4 	addi	r8,r2,91
    1ff4:	003eed06 	br	1bac <_malloc_r+0x110>
    1ff8:	58800217 	ldw	r2,8(r11)
    1ffc:	39ffffc4 	addi	r7,r7,-1
    2000:	12c0961e 	bne	r2,r11,225c <_malloc_r+0x7c0>
    2004:	388000cc 	andi	r2,r7,3
    2008:	5afffe04 	addi	r11,r11,-8
    200c:	103ffa1e 	bne	r2,zero,1ff8 <_malloc_r+0x55c>
    2010:	98c00117 	ldw	r3,4(r19)
    2014:	0104303a 	nor	r2,zero,r4
    2018:	10c4703a 	and	r2,r2,r3
    201c:	98800115 	stw	r2,4(r19)
    2020:	2109883a 	add	r4,r4,r4
    2024:	113f4436 	bltu	r2,r4,1d38 <_malloc_r+0x29c>
    2028:	203f4326 	beq	r4,zero,1d38 <_malloc_r+0x29c>
    202c:	2086703a 	and	r3,r4,r2
    2030:	1800041e 	bne	r3,zero,2044 <_malloc_r+0x5a8>
    2034:	2109883a 	add	r4,r4,r4
    2038:	2086703a 	and	r3,r4,r2
    203c:	63000104 	addi	r12,r12,4
    2040:	183ffc26 	beq	r3,zero,2034 <_malloc_r+0x598>
    2044:	600f883a 	mov	r7,r12
    2048:	003f1a06 	br	1cb4 <_malloc_r+0x218>
    204c:	00800074 	movhi	r2,1
    2050:	10c64917 	ldw	r3,6436(r2)
    2054:	a0c7883a 	add	r3,r20,r3
    2058:	10c64915 	stw	r3,6436(r2)
    205c:	00800074 	movhi	r2,1
    2060:	1085e117 	ldw	r2,6020(r2)
    2064:	10bfffd8 	cmpnei	r2,r2,-1
    2068:	10004e26 	beq	r2,zero,21a4 <_malloc_r+0x708>
    206c:	b5c5c83a 	sub	r2,r22,r23
    2070:	10c5883a 	add	r2,r2,r3
    2074:	00c00074 	movhi	r3,1
    2078:	18864915 	stw	r2,6436(r3)
    207c:	b70001cc 	andi	fp,r22,7
    2080:	e0003026 	beq	fp,zero,2144 <_malloc_r+0x6a8>
    2084:	b72dc83a 	sub	r22,r22,fp
    2088:	b5800204 	addi	r22,r22,8
    208c:	01040204 	movi	r4,4104
    2090:	2709c83a 	sub	r4,r4,fp
    2094:	b529883a 	add	r20,r22,r20
    2098:	2509c83a 	sub	r4,r4,r20
    209c:	25c3ffcc 	andi	r23,r4,4095
    20a0:	b80b883a 	mov	r5,r23
    20a4:	9009883a 	mov	r4,r18
    20a8:	0002f2c0 	call	2f2c <_sbrk_r>
    20ac:	10ffffe0 	cmpeqi	r3,r2,-1
    20b0:	1800501e 	bne	r3,zero,21f4 <_malloc_r+0x758>
    20b4:	1585c83a 	sub	r2,r2,r22
    20b8:	15e9883a 	add	r20,r2,r23
    20bc:	00800074 	movhi	r2,1
    20c0:	10864917 	ldw	r2,6436(r2)
    20c4:	9d800215 	stw	r22,8(r19)
    20c8:	a0c00054 	ori	r3,r20,1
    20cc:	b889883a 	add	r4,r23,r2
    20d0:	00800074 	movhi	r2,1
    20d4:	11064915 	stw	r4,6436(r2)
    20d8:	b0c00115 	stw	r3,4(r22)
    20dc:	84ff3c26 	beq	r16,r19,1dd0 <_malloc_r+0x334>
    20e0:	a8800428 	cmpgeui	r2,r21,16
    20e4:	10003226 	beq	r2,zero,21b0 <_malloc_r+0x714>
    20e8:	80800117 	ldw	r2,4(r16)
    20ec:	017ffe04 	movi	r5,-8
    20f0:	a8fffd04 	addi	r3,r21,-12
    20f4:	1946703a 	and	r3,r3,r5
    20f8:	1080004c 	andi	r2,r2,1
    20fc:	10c4b03a 	or	r2,r2,r3
    2100:	80800115 	stw	r2,4(r16)
    2104:	01400144 	movi	r5,5
    2108:	80c5883a 	add	r2,r16,r3
    210c:	11400115 	stw	r5,4(r2)
    2110:	11400215 	stw	r5,8(r2)
    2114:	18c00428 	cmpgeui	r3,r3,16
    2118:	18003b1e 	bne	r3,zero,2208 <_malloc_r+0x76c>
    211c:	b0c00117 	ldw	r3,4(r22)
    2120:	003f2b06 	br	1dd0 <_malloc_r+0x334>
    2124:	a5000404 	addi	r20,r20,16
    2128:	003f1606 	br	1d84 <_malloc_r+0x2e8>
    212c:	2009d0ba 	srai	r4,r4,2
    2130:	00800044 	movi	r2,1
    2134:	1104983a 	sll	r2,r2,r4
    2138:	288ab03a 	or	r5,r5,r2
    213c:	99400115 	stw	r5,4(r19)
    2140:	003f5906 	br	1ea8 <_malloc_r+0x40c>
    2144:	b509883a 	add	r4,r22,r20
    2148:	0109c83a 	sub	r4,zero,r4
    214c:	25c3ffcc 	andi	r23,r4,4095
    2150:	b80b883a 	mov	r5,r23
    2154:	9009883a 	mov	r4,r18
    2158:	0002f2c0 	call	2f2c <_sbrk_r>
    215c:	10ffffe0 	cmpeqi	r3,r2,-1
    2160:	183fd426 	beq	r3,zero,20b4 <_malloc_r+0x618>
    2164:	002f883a 	mov	r23,zero
    2168:	003fd406 	br	20bc <_malloc_r+0x620>
    216c:	19001568 	cmpgeui	r4,r3,85
    2170:	2000121e 	bne	r4,zero,21bc <_malloc_r+0x720>
    2174:	1006d33a 	srli	r3,r2,12
    2178:	19801bc4 	addi	r6,r3,111
    217c:	300c90fa 	slli	r6,r6,3
    2180:	19001b84 	addi	r4,r3,110
    2184:	003f3c06 	br	1e78 <_malloc_r+0x3dc>
    2188:	10c05568 	cmpgeui	r3,r2,341
    218c:	1800121e 	bne	r3,zero,21d8 <_malloc_r+0x73c>
    2190:	8804d3fa 	srli	r2,r17,15
    2194:	11c01e04 	addi	r7,r2,120
    2198:	380890fa 	slli	r4,r7,3
    219c:	12001dc4 	addi	r8,r2,119
    21a0:	003e8206 	br	1bac <_malloc_r+0x110>
    21a4:	00800074 	movhi	r2,1
    21a8:	1585e115 	stw	r22,6020(r2)
    21ac:	003fb306 	br	207c <_malloc_r+0x5e0>
    21b0:	00800044 	movi	r2,1
    21b4:	b0800115 	stw	r2,4(r22)
    21b8:	003f8806 	br	1fdc <_malloc_r+0x540>
    21bc:	19005568 	cmpgeui	r4,r3,341
    21c0:	2000181e 	bne	r4,zero,2224 <_malloc_r+0x788>
    21c4:	1006d3fa 	srli	r3,r2,15
    21c8:	19801e04 	addi	r6,r3,120
    21cc:	300c90fa 	slli	r6,r6,3
    21d0:	19001dc4 	addi	r4,r3,119
    21d4:	003f2806 	br	1e78 <_malloc_r+0x3dc>
    21d8:	10815568 	cmpgeui	r2,r2,1365
    21dc:	1000181e 	bne	r2,zero,2240 <_malloc_r+0x7a4>
    21e0:	8804d4ba 	srli	r2,r17,18
    21e4:	11c01f44 	addi	r7,r2,125
    21e8:	380890fa 	slli	r4,r7,3
    21ec:	12001f04 	addi	r8,r2,124
    21f0:	003e6e06 	br	1bac <_malloc_r+0x110>
    21f4:	e73ffe04 	addi	fp,fp,-8
    21f8:	a729883a 	add	r20,r20,fp
    21fc:	a5a9c83a 	sub	r20,r20,r22
    2200:	002f883a 	mov	r23,zero
    2204:	003fad06 	br	20bc <_malloc_r+0x620>
    2208:	9009883a 	mov	r4,r18
    220c:	81400204 	addi	r5,r16,8
    2210:	00017940 	call	1794 <_free_r>
    2214:	00800074 	movhi	r2,1
    2218:	9d800217 	ldw	r22,8(r19)
    221c:	11064917 	ldw	r4,6436(r2)
    2220:	003fbe06 	br	211c <_malloc_r+0x680>
    2224:	18c15568 	cmpgeui	r3,r3,1365
    2228:	1800091e 	bne	r3,zero,2250 <_malloc_r+0x7b4>
    222c:	1006d4ba 	srli	r3,r2,18
    2230:	19801f44 	addi	r6,r3,125
    2234:	300c90fa 	slli	r6,r6,3
    2238:	19001f04 	addi	r4,r3,124
    223c:	003f0e06 	br	1e78 <_malloc_r+0x3dc>
    2240:	0100fe04 	movi	r4,1016
    2244:	01c01fc4 	movi	r7,127
    2248:	02001f84 	movi	r8,126
    224c:	003e5706 	br	1bac <_malloc_r+0x110>
    2250:	0180fe04 	movi	r6,1016
    2254:	01001f84 	movi	r4,126
    2258:	003f0706 	br	1e78 <_malloc_r+0x3dc>
    225c:	98800117 	ldw	r2,4(r19)
    2260:	003f6f06 	br	2020 <_malloc_r+0x584>

00002264 <_realloc_r>:
    2264:	defff604 	addi	sp,sp,-40
    2268:	dcc00315 	stw	r19,12(sp)
    226c:	dfc00915 	stw	ra,36(sp)
    2270:	df000815 	stw	fp,32(sp)
    2274:	ddc00715 	stw	r23,28(sp)
    2278:	dd800615 	stw	r22,24(sp)
    227c:	dd400515 	stw	r21,20(sp)
    2280:	dd000415 	stw	r20,16(sp)
    2284:	dc800215 	stw	r18,8(sp)
    2288:	dc400115 	stw	r17,4(sp)
    228c:	dc000015 	stw	r16,0(sp)
    2290:	3027883a 	mov	r19,r6
    2294:	28008a26 	beq	r5,zero,24c0 <_realloc_r+0x25c>
    2298:	2821883a 	mov	r16,r5
    229c:	2029883a 	mov	r20,r4
    22a0:	00038600 	call	3860 <__malloc_lock>
    22a4:	80bfff17 	ldw	r2,-4(r16)
    22a8:	9c4002c4 	addi	r17,r19,11
    22ac:	04bfff04 	movi	r18,-4
    22b0:	88c005f0 	cmpltui	r3,r17,23
    22b4:	857ffe04 	addi	r21,r16,-8
    22b8:	14a4703a 	and	r18,r2,r18
    22bc:	18005a1e 	bne	r3,zero,2428 <_realloc_r+0x1c4>
    22c0:	00fffe04 	movi	r3,-8
    22c4:	88e2703a 	and	r17,r17,r3
    22c8:	88005916 	blt	r17,zero,2430 <_realloc_r+0x1cc>
    22cc:	8cc05836 	bltu	r17,r19,2430 <_realloc_r+0x1cc>
    22d0:	94403a0e 	bge	r18,r17,23bc <_realloc_r+0x158>
    22d4:	05800074 	movhi	r22,1
    22d8:	b5805c04 	addi	r22,r22,368
    22dc:	b1800217 	ldw	r6,8(r22)
    22e0:	ac8b883a 	add	r5,r21,r18
    22e4:	28c00117 	ldw	r3,4(r5)
    22e8:	31408e26 	beq	r6,r5,2524 <_realloc_r+0x2c0>
    22ec:	013fff84 	movi	r4,-2
    22f0:	1908703a 	and	r4,r3,r4
    22f4:	2909883a 	add	r4,r5,r4
    22f8:	21000117 	ldw	r4,4(r4)
    22fc:	2100004c 	andi	r4,r4,1
    2300:	20004f1e 	bne	r4,zero,2440 <_realloc_r+0x1dc>
    2304:	013fff04 	movi	r4,-4
    2308:	1906703a 	and	r3,r3,r4
    230c:	90c9883a 	add	r4,r18,r3
    2310:	2440ca0e 	bge	r4,r17,263c <_realloc_r+0x3d8>
    2314:	1080004c 	andi	r2,r2,1
    2318:	10004b1e 	bne	r2,zero,2448 <_realloc_r+0x1e4>
    231c:	85fffe17 	ldw	r23,-8(r16)
    2320:	013fff04 	movi	r4,-4
    2324:	adefc83a 	sub	r23,r21,r23
    2328:	b8800117 	ldw	r2,4(r23)
    232c:	1104703a 	and	r2,r2,r4
    2330:	28000426 	beq	r5,zero,2344 <_realloc_r+0xe0>
    2334:	90b9883a 	add	fp,r18,r2
    2338:	e0f9883a 	add	fp,fp,r3
    233c:	3140c926 	beq	r6,r5,2664 <_realloc_r+0x400>
    2340:	e4409e0e 	bge	fp,r17,25bc <_realloc_r+0x358>
    2344:	b8004026 	beq	r23,zero,2448 <_realloc_r+0x1e4>
    2348:	90ad883a 	add	r22,r18,r2
    234c:	b4403e16 	blt	r22,r17,2448 <_realloc_r+0x1e4>
    2350:	b8800317 	ldw	r2,12(r23)
    2354:	b8c00217 	ldw	r3,8(r23)
    2358:	91bfff04 	addi	r6,r18,-4
    235c:	31400968 	cmpgeui	r5,r6,37
    2360:	18800315 	stw	r2,12(r3)
    2364:	10c00215 	stw	r3,8(r2)
    2368:	bc800204 	addi	r18,r23,8
    236c:	2800ee1e 	bne	r5,zero,2728 <_realloc_r+0x4c4>
    2370:	30800530 	cmpltui	r2,r6,20
    2374:	1000ea1e 	bne	r2,zero,2720 <_realloc_r+0x4bc>
    2378:	80c00017 	ldw	r3,0(r16)
    237c:	30800728 	cmpgeui	r2,r6,28
    2380:	b8c00215 	stw	r3,8(r23)
    2384:	80c00117 	ldw	r3,4(r16)
    2388:	b8c00315 	stw	r3,12(r23)
    238c:	1000fa1e 	bne	r2,zero,2778 <_realloc_r+0x514>
    2390:	84000204 	addi	r16,r16,8
    2394:	b8800404 	addi	r2,r23,16
    2398:	80c00017 	ldw	r3,0(r16)
    239c:	10c00015 	stw	r3,0(r2)
    23a0:	80c00117 	ldw	r3,4(r16)
    23a4:	10c00115 	stw	r3,4(r2)
    23a8:	80c00217 	ldw	r3,8(r16)
    23ac:	10c00215 	stw	r3,8(r2)
    23b0:	9021883a 	mov	r16,r18
    23b4:	b82b883a 	mov	r21,r23
    23b8:	b025883a 	mov	r18,r22
    23bc:	a8800117 	ldw	r2,4(r21)
    23c0:	9449c83a 	sub	r4,r18,r17
    23c4:	21400430 	cmpltui	r5,r4,16
    23c8:	1080004c 	andi	r2,r2,1
    23cc:	ac87883a 	add	r3,r21,r18
    23d0:	28004826 	beq	r5,zero,24f4 <_realloc_r+0x290>
    23d4:	9084b03a 	or	r2,r18,r2
    23d8:	a8800115 	stw	r2,4(r21)
    23dc:	18800117 	ldw	r2,4(r3)
    23e0:	10800054 	ori	r2,r2,1
    23e4:	18800115 	stw	r2,4(r3)
    23e8:	a009883a 	mov	r4,r20
    23ec:	00038840 	call	3884 <__malloc_unlock>
    23f0:	8027883a 	mov	r19,r16
    23f4:	9805883a 	mov	r2,r19
    23f8:	dfc00917 	ldw	ra,36(sp)
    23fc:	df000817 	ldw	fp,32(sp)
    2400:	ddc00717 	ldw	r23,28(sp)
    2404:	dd800617 	ldw	r22,24(sp)
    2408:	dd400517 	ldw	r21,20(sp)
    240c:	dd000417 	ldw	r20,16(sp)
    2410:	dcc00317 	ldw	r19,12(sp)
    2414:	dc800217 	ldw	r18,8(sp)
    2418:	dc400117 	ldw	r17,4(sp)
    241c:	dc000017 	ldw	r16,0(sp)
    2420:	dec00a04 	addi	sp,sp,40
    2424:	f800283a 	ret
    2428:	04400404 	movi	r17,16
    242c:	8cffa82e 	bgeu	r17,r19,22d0 <_realloc_r+0x6c>
    2430:	00800304 	movi	r2,12
    2434:	a0800015 	stw	r2,0(r20)
    2438:	0027883a 	mov	r19,zero
    243c:	003fed06 	br	23f4 <_realloc_r+0x190>
    2440:	1080004c 	andi	r2,r2,1
    2444:	10004e26 	beq	r2,zero,2580 <_realloc_r+0x31c>
    2448:	980b883a 	mov	r5,r19
    244c:	a009883a 	mov	r4,r20
    2450:	0001a9c0 	call	1a9c <_malloc_r>
    2454:	1027883a 	mov	r19,r2
    2458:	1000bd26 	beq	r2,zero,2750 <_realloc_r+0x4ec>
    245c:	80bfff17 	ldw	r2,-4(r16)
    2460:	013fff84 	movi	r4,-2
    2464:	98fffe04 	addi	r3,r19,-8
    2468:	1104703a 	and	r2,r2,r4
    246c:	a885883a 	add	r2,r21,r2
    2470:	10c03e26 	beq	r2,r3,256c <_realloc_r+0x308>
    2474:	91bfff04 	addi	r6,r18,-4
    2478:	30800968 	cmpgeui	r2,r6,37
    247c:	1000751e 	bne	r2,zero,2654 <_realloc_r+0x3f0>
    2480:	30800530 	cmpltui	r2,r6,20
    2484:	10004426 	beq	r2,zero,2598 <_realloc_r+0x334>
    2488:	9805883a 	mov	r2,r19
    248c:	8007883a 	mov	r3,r16
    2490:	19000017 	ldw	r4,0(r3)
    2494:	11000015 	stw	r4,0(r2)
    2498:	19000117 	ldw	r4,4(r3)
    249c:	11000115 	stw	r4,4(r2)
    24a0:	18c00217 	ldw	r3,8(r3)
    24a4:	10c00215 	stw	r3,8(r2)
    24a8:	a009883a 	mov	r4,r20
    24ac:	800b883a 	mov	r5,r16
    24b0:	00017940 	call	1794 <_free_r>
    24b4:	a009883a 	mov	r4,r20
    24b8:	00038840 	call	3884 <__malloc_unlock>
    24bc:	003fcd06 	br	23f4 <_realloc_r+0x190>
    24c0:	300b883a 	mov	r5,r6
    24c4:	dfc00917 	ldw	ra,36(sp)
    24c8:	df000817 	ldw	fp,32(sp)
    24cc:	ddc00717 	ldw	r23,28(sp)
    24d0:	dd800617 	ldw	r22,24(sp)
    24d4:	dd400517 	ldw	r21,20(sp)
    24d8:	dd000417 	ldw	r20,16(sp)
    24dc:	dcc00317 	ldw	r19,12(sp)
    24e0:	dc800217 	ldw	r18,8(sp)
    24e4:	dc400117 	ldw	r17,4(sp)
    24e8:	dc000017 	ldw	r16,0(sp)
    24ec:	dec00a04 	addi	sp,sp,40
    24f0:	0001a9c1 	jmpi	1a9c <_malloc_r>
    24f4:	8884b03a 	or	r2,r17,r2
    24f8:	a8800115 	stw	r2,4(r21)
    24fc:	ac4b883a 	add	r5,r21,r17
    2500:	21000054 	ori	r4,r4,1
    2504:	29000115 	stw	r4,4(r5)
    2508:	18800117 	ldw	r2,4(r3)
    250c:	29400204 	addi	r5,r5,8
    2510:	a009883a 	mov	r4,r20
    2514:	10800054 	ori	r2,r2,1
    2518:	18800115 	stw	r2,4(r3)
    251c:	00017940 	call	1794 <_free_r>
    2520:	003fb106 	br	23e8 <_realloc_r+0x184>
    2524:	013fff04 	movi	r4,-4
    2528:	1906703a 	and	r3,r3,r4
    252c:	1c89883a 	add	r4,r3,r18
    2530:	89c00404 	addi	r7,r17,16
    2534:	21ff7716 	blt	r4,r7,2314 <_realloc_r+0xb0>
    2538:	ac6b883a 	add	r21,r21,r17
    253c:	2445c83a 	sub	r2,r4,r17
    2540:	b5400215 	stw	r21,8(r22)
    2544:	10800054 	ori	r2,r2,1
    2548:	a8800115 	stw	r2,4(r21)
    254c:	80bfff17 	ldw	r2,-4(r16)
    2550:	a009883a 	mov	r4,r20
    2554:	8027883a 	mov	r19,r16
    2558:	1080004c 	andi	r2,r2,1
    255c:	1444b03a 	or	r2,r2,r17
    2560:	80bfff15 	stw	r2,-4(r16)
    2564:	00038840 	call	3884 <__malloc_unlock>
    2568:	003fa206 	br	23f4 <_realloc_r+0x190>
    256c:	98bfff17 	ldw	r2,-4(r19)
    2570:	00ffff04 	movi	r3,-4
    2574:	10c4703a 	and	r2,r2,r3
    2578:	90a5883a 	add	r18,r18,r2
    257c:	003f8f06 	br	23bc <_realloc_r+0x158>
    2580:	85fffe17 	ldw	r23,-8(r16)
    2584:	00ffff04 	movi	r3,-4
    2588:	adefc83a 	sub	r23,r21,r23
    258c:	b8800117 	ldw	r2,4(r23)
    2590:	10c4703a 	and	r2,r2,r3
    2594:	003f6b06 	br	2344 <_realloc_r+0xe0>
    2598:	80c00017 	ldw	r3,0(r16)
    259c:	30800728 	cmpgeui	r2,r6,28
    25a0:	98c00015 	stw	r3,0(r19)
    25a4:	80c00117 	ldw	r3,4(r16)
    25a8:	98c00115 	stw	r3,4(r19)
    25ac:	1000531e 	bne	r2,zero,26fc <_realloc_r+0x498>
    25b0:	80c00204 	addi	r3,r16,8
    25b4:	98800204 	addi	r2,r19,8
    25b8:	003fb506 	br	2490 <_realloc_r+0x22c>
    25bc:	28800317 	ldw	r2,12(r5)
    25c0:	28c00217 	ldw	r3,8(r5)
    25c4:	91bfff04 	addi	r6,r18,-4
    25c8:	31400968 	cmpgeui	r5,r6,37
    25cc:	18800315 	stw	r2,12(r3)
    25d0:	10c00215 	stw	r3,8(r2)
    25d4:	b8c00217 	ldw	r3,8(r23)
    25d8:	b8800317 	ldw	r2,12(r23)
    25dc:	bc800204 	addi	r18,r23,8
    25e0:	18800315 	stw	r2,12(r3)
    25e4:	10c00215 	stw	r3,8(r2)
    25e8:	2800551e 	bne	r5,zero,2740 <_realloc_r+0x4dc>
    25ec:	30800530 	cmpltui	r2,r6,20
    25f0:	1000511e 	bne	r2,zero,2738 <_realloc_r+0x4d4>
    25f4:	80c00017 	ldw	r3,0(r16)
    25f8:	30800728 	cmpgeui	r2,r6,28
    25fc:	b8c00215 	stw	r3,8(r23)
    2600:	80c00117 	ldw	r3,4(r16)
    2604:	b8c00315 	stw	r3,12(r23)
    2608:	1000641e 	bne	r2,zero,279c <_realloc_r+0x538>
    260c:	84000204 	addi	r16,r16,8
    2610:	b8800404 	addi	r2,r23,16
    2614:	80c00017 	ldw	r3,0(r16)
    2618:	10c00015 	stw	r3,0(r2)
    261c:	80c00117 	ldw	r3,4(r16)
    2620:	10c00115 	stw	r3,4(r2)
    2624:	80c00217 	ldw	r3,8(r16)
    2628:	10c00215 	stw	r3,8(r2)
    262c:	9021883a 	mov	r16,r18
    2630:	b82b883a 	mov	r21,r23
    2634:	e025883a 	mov	r18,fp
    2638:	003f6006 	br	23bc <_realloc_r+0x158>
    263c:	28800317 	ldw	r2,12(r5)
    2640:	28c00217 	ldw	r3,8(r5)
    2644:	2025883a 	mov	r18,r4
    2648:	18800315 	stw	r2,12(r3)
    264c:	10c00215 	stw	r3,8(r2)
    2650:	003f5a06 	br	23bc <_realloc_r+0x158>
    2654:	800b883a 	mov	r5,r16
    2658:	9809883a 	mov	r4,r19
    265c:	000118c0 	call	118c <memmove>
    2660:	003f9106 	br	24a8 <_realloc_r+0x244>
    2664:	88c00404 	addi	r3,r17,16
    2668:	e0ff3616 	blt	fp,r3,2344 <_realloc_r+0xe0>
    266c:	b8800317 	ldw	r2,12(r23)
    2670:	b8c00217 	ldw	r3,8(r23)
    2674:	91bfff04 	addi	r6,r18,-4
    2678:	31000968 	cmpgeui	r4,r6,37
    267c:	18800315 	stw	r2,12(r3)
    2680:	10c00215 	stw	r3,8(r2)
    2684:	bcc00204 	addi	r19,r23,8
    2688:	20004f1e 	bne	r4,zero,27c8 <_realloc_r+0x564>
    268c:	30800530 	cmpltui	r2,r6,20
    2690:	10004b1e 	bne	r2,zero,27c0 <_realloc_r+0x55c>
    2694:	80c00017 	ldw	r3,0(r16)
    2698:	30800728 	cmpgeui	r2,r6,28
    269c:	b8c00215 	stw	r3,8(r23)
    26a0:	80c00117 	ldw	r3,4(r16)
    26a4:	b8c00315 	stw	r3,12(r23)
    26a8:	10004b1e 	bne	r2,zero,27d8 <_realloc_r+0x574>
    26ac:	84000204 	addi	r16,r16,8
    26b0:	b8800404 	addi	r2,r23,16
    26b4:	80c00017 	ldw	r3,0(r16)
    26b8:	10c00015 	stw	r3,0(r2)
    26bc:	80c00117 	ldw	r3,4(r16)
    26c0:	10c00115 	stw	r3,4(r2)
    26c4:	80c00217 	ldw	r3,8(r16)
    26c8:	10c00215 	stw	r3,8(r2)
    26cc:	bc47883a 	add	r3,r23,r17
    26d0:	e445c83a 	sub	r2,fp,r17
    26d4:	b0c00215 	stw	r3,8(r22)
    26d8:	10800054 	ori	r2,r2,1
    26dc:	18800115 	stw	r2,4(r3)
    26e0:	b8800117 	ldw	r2,4(r23)
    26e4:	a009883a 	mov	r4,r20
    26e8:	1080004c 	andi	r2,r2,1
    26ec:	1444b03a 	or	r2,r2,r17
    26f0:	b8800115 	stw	r2,4(r23)
    26f4:	00038840 	call	3884 <__malloc_unlock>
    26f8:	003f3e06 	br	23f4 <_realloc_r+0x190>
    26fc:	80800217 	ldw	r2,8(r16)
    2700:	31800920 	cmpeqi	r6,r6,36
    2704:	98800215 	stw	r2,8(r19)
    2708:	80800317 	ldw	r2,12(r16)
    270c:	98800315 	stw	r2,12(r19)
    2710:	3000121e 	bne	r6,zero,275c <_realloc_r+0x4f8>
    2714:	80c00404 	addi	r3,r16,16
    2718:	98800404 	addi	r2,r19,16
    271c:	003f5c06 	br	2490 <_realloc_r+0x22c>
    2720:	9005883a 	mov	r2,r18
    2724:	003f1c06 	br	2398 <_realloc_r+0x134>
    2728:	800b883a 	mov	r5,r16
    272c:	9009883a 	mov	r4,r18
    2730:	000118c0 	call	118c <memmove>
    2734:	003f1e06 	br	23b0 <_realloc_r+0x14c>
    2738:	9005883a 	mov	r2,r18
    273c:	003fb506 	br	2614 <_realloc_r+0x3b0>
    2740:	800b883a 	mov	r5,r16
    2744:	9009883a 	mov	r4,r18
    2748:	000118c0 	call	118c <memmove>
    274c:	003fb706 	br	262c <_realloc_r+0x3c8>
    2750:	a009883a 	mov	r4,r20
    2754:	00038840 	call	3884 <__malloc_unlock>
    2758:	003f3706 	br	2438 <_realloc_r+0x1d4>
    275c:	81000417 	ldw	r4,16(r16)
    2760:	80c00604 	addi	r3,r16,24
    2764:	98800604 	addi	r2,r19,24
    2768:	99000415 	stw	r4,16(r19)
    276c:	81000517 	ldw	r4,20(r16)
    2770:	99000515 	stw	r4,20(r19)
    2774:	003f4606 	br	2490 <_realloc_r+0x22c>
    2778:	80800217 	ldw	r2,8(r16)
    277c:	31800920 	cmpeqi	r6,r6,36
    2780:	b8800415 	stw	r2,16(r23)
    2784:	80800317 	ldw	r2,12(r16)
    2788:	b8800515 	stw	r2,20(r23)
    278c:	30001b1e 	bne	r6,zero,27fc <_realloc_r+0x598>
    2790:	84000404 	addi	r16,r16,16
    2794:	b8800604 	addi	r2,r23,24
    2798:	003eff06 	br	2398 <_realloc_r+0x134>
    279c:	80800217 	ldw	r2,8(r16)
    27a0:	31800920 	cmpeqi	r6,r6,36
    27a4:	b8800415 	stw	r2,16(r23)
    27a8:	80800317 	ldw	r2,12(r16)
    27ac:	b8800515 	stw	r2,20(r23)
    27b0:	3000191e 	bne	r6,zero,2818 <_realloc_r+0x5b4>
    27b4:	84000404 	addi	r16,r16,16
    27b8:	b8800604 	addi	r2,r23,24
    27bc:	003f9506 	br	2614 <_realloc_r+0x3b0>
    27c0:	9805883a 	mov	r2,r19
    27c4:	003fbb06 	br	26b4 <_realloc_r+0x450>
    27c8:	800b883a 	mov	r5,r16
    27cc:	9809883a 	mov	r4,r19
    27d0:	000118c0 	call	118c <memmove>
    27d4:	003fbd06 	br	26cc <_realloc_r+0x468>
    27d8:	80800217 	ldw	r2,8(r16)
    27dc:	31800920 	cmpeqi	r6,r6,36
    27e0:	b8800415 	stw	r2,16(r23)
    27e4:	80800317 	ldw	r2,12(r16)
    27e8:	b8800515 	stw	r2,20(r23)
    27ec:	3000111e 	bne	r6,zero,2834 <_realloc_r+0x5d0>
    27f0:	84000404 	addi	r16,r16,16
    27f4:	b8800604 	addi	r2,r23,24
    27f8:	003fae06 	br	26b4 <_realloc_r+0x450>
    27fc:	80c00417 	ldw	r3,16(r16)
    2800:	84000604 	addi	r16,r16,24
    2804:	b8800804 	addi	r2,r23,32
    2808:	b8c00615 	stw	r3,24(r23)
    280c:	80ffff17 	ldw	r3,-4(r16)
    2810:	b8c00715 	stw	r3,28(r23)
    2814:	003ee006 	br	2398 <_realloc_r+0x134>
    2818:	80c00417 	ldw	r3,16(r16)
    281c:	84000604 	addi	r16,r16,24
    2820:	b8800804 	addi	r2,r23,32
    2824:	b8c00615 	stw	r3,24(r23)
    2828:	80ffff17 	ldw	r3,-4(r16)
    282c:	b8c00715 	stw	r3,28(r23)
    2830:	003f7806 	br	2614 <_realloc_r+0x3b0>
    2834:	80c00417 	ldw	r3,16(r16)
    2838:	84000604 	addi	r16,r16,24
    283c:	b8800804 	addi	r2,r23,32
    2840:	b8c00615 	stw	r3,24(r23)
    2844:	80ffff17 	ldw	r3,-4(r16)
    2848:	b8c00715 	stw	r3,28(r23)
    284c:	003f9906 	br	26b4 <_realloc_r+0x450>

00002850 <_fclose_r>:
    2850:	defffc04 	addi	sp,sp,-16
    2854:	dfc00315 	stw	ra,12(sp)
    2858:	dc800215 	stw	r18,8(sp)
    285c:	dc400115 	stw	r17,4(sp)
    2860:	dc000015 	stw	r16,0(sp)
    2864:	28000726 	beq	r5,zero,2884 <_fclose_r+0x34>
    2868:	2821883a 	mov	r16,r5
    286c:	2023883a 	mov	r17,r4
    2870:	20000226 	beq	r4,zero,287c <_fclose_r+0x2c>
    2874:	20800d17 	ldw	r2,52(r4)
    2878:	10002f26 	beq	r2,zero,2938 <_fclose_r+0xe8>
    287c:	8080030f 	ldh	r2,12(r16)
    2880:	1000081e 	bne	r2,zero,28a4 <_fclose_r+0x54>
    2884:	0025883a 	mov	r18,zero
    2888:	9005883a 	mov	r2,r18
    288c:	dfc00317 	ldw	ra,12(sp)
    2890:	dc800217 	ldw	r18,8(sp)
    2894:	dc400117 	ldw	r17,4(sp)
    2898:	dc000017 	ldw	r16,0(sp)
    289c:	dec00404 	addi	sp,sp,16
    28a0:	f800283a 	ret
    28a4:	800b883a 	mov	r5,r16
    28a8:	8809883a 	mov	r4,r17
    28ac:	00029500 	call	2950 <__sflush_r>
    28b0:	80c00b17 	ldw	r3,44(r16)
    28b4:	1025883a 	mov	r18,r2
    28b8:	18000426 	beq	r3,zero,28cc <_fclose_r+0x7c>
    28bc:	81400717 	ldw	r5,28(r16)
    28c0:	8809883a 	mov	r4,r17
    28c4:	183ee83a 	callr	r3
    28c8:	10001316 	blt	r2,zero,2918 <_fclose_r+0xc8>
    28cc:	8080030b 	ldhu	r2,12(r16)
    28d0:	1080200c 	andi	r2,r2,128
    28d4:	1000141e 	bne	r2,zero,2928 <_fclose_r+0xd8>
    28d8:	81400c17 	ldw	r5,48(r16)
    28dc:	28000526 	beq	r5,zero,28f4 <_fclose_r+0xa4>
    28e0:	80801004 	addi	r2,r16,64
    28e4:	28800226 	beq	r5,r2,28f0 <_fclose_r+0xa0>
    28e8:	8809883a 	mov	r4,r17
    28ec:	00017940 	call	1794 <_free_r>
    28f0:	80000c15 	stw	zero,48(r16)
    28f4:	81401117 	ldw	r5,68(r16)
    28f8:	28000326 	beq	r5,zero,2908 <_fclose_r+0xb8>
    28fc:	8809883a 	mov	r4,r17
    2900:	00017940 	call	1794 <_free_r>
    2904:	80001115 	stw	zero,68(r16)
    2908:	000078c0 	call	78c <__sfp_lock_acquire>
    290c:	8000030d 	sth	zero,12(r16)
    2910:	00007900 	call	790 <__sfp_lock_release>
    2914:	003fdc06 	br	2888 <_fclose_r+0x38>
    2918:	8080030b 	ldhu	r2,12(r16)
    291c:	04bfffc4 	movi	r18,-1
    2920:	1080200c 	andi	r2,r2,128
    2924:	103fec26 	beq	r2,zero,28d8 <_fclose_r+0x88>
    2928:	81400417 	ldw	r5,16(r16)
    292c:	8809883a 	mov	r4,r17
    2930:	00017940 	call	1794 <_free_r>
    2934:	003fe806 	br	28d8 <_fclose_r+0x88>
    2938:	00007640 	call	764 <__sinit>
    293c:	003fcf06 	br	287c <_fclose_r+0x2c>

00002940 <fclose>:
    2940:	00800074 	movhi	r2,1
    2944:	200b883a 	mov	r5,r4
    2948:	1105e017 	ldw	r4,6016(r2)
    294c:	00028501 	jmpi	2850 <_fclose_r>

00002950 <__sflush_r>:
    2950:	2880030b 	ldhu	r2,12(r5)
    2954:	defffb04 	addi	sp,sp,-20
    2958:	dcc00315 	stw	r19,12(sp)
    295c:	dc000015 	stw	r16,0(sp)
    2960:	dfc00415 	stw	ra,16(sp)
    2964:	dc800215 	stw	r18,8(sp)
    2968:	dc400115 	stw	r17,4(sp)
    296c:	10c0020c 	andi	r3,r2,8
    2970:	2821883a 	mov	r16,r5
    2974:	2027883a 	mov	r19,r4
    2978:	18003c1e 	bne	r3,zero,2a6c <__sflush_r+0x11c>
    297c:	29000117 	ldw	r4,4(r5)
    2980:	10c20014 	ori	r3,r2,2048
    2984:	28c0030d 	sth	r3,12(r5)
    2988:	0100580e 	bge	zero,r4,2aec <__sflush_r+0x19c>
    298c:	82000a17 	ldw	r8,40(r16)
    2990:	40003426 	beq	r8,zero,2a64 <__sflush_r+0x114>
    2994:	9c400017 	ldw	r17,0(r19)
    2998:	1084000c 	andi	r2,r2,4096
    299c:	98000015 	stw	zero,0(r19)
    29a0:	81400717 	ldw	r5,28(r16)
    29a4:	1000561e 	bne	r2,zero,2b00 <__sflush_r+0x1b0>
    29a8:	000d883a 	mov	r6,zero
    29ac:	01c00044 	movi	r7,1
    29b0:	9809883a 	mov	r4,r19
    29b4:	403ee83a 	callr	r8
    29b8:	100d883a 	mov	r6,r2
    29bc:	10bfffd8 	cmpnei	r2,r2,-1
    29c0:	10005b26 	beq	r2,zero,2b30 <__sflush_r+0x1e0>
    29c4:	80c0030b 	ldhu	r3,12(r16)
    29c8:	82000a17 	ldw	r8,40(r16)
    29cc:	18c0010c 	andi	r3,r3,4
    29d0:	18000626 	beq	r3,zero,29ec <__sflush_r+0x9c>
    29d4:	80c00117 	ldw	r3,4(r16)
    29d8:	80800c17 	ldw	r2,48(r16)
    29dc:	30cdc83a 	sub	r6,r6,r3
    29e0:	10000226 	beq	r2,zero,29ec <__sflush_r+0x9c>
    29e4:	80800f17 	ldw	r2,60(r16)
    29e8:	308dc83a 	sub	r6,r6,r2
    29ec:	81400717 	ldw	r5,28(r16)
    29f0:	000f883a 	mov	r7,zero
    29f4:	9809883a 	mov	r4,r19
    29f8:	403ee83a 	callr	r8
    29fc:	10ffffd8 	cmpnei	r3,r2,-1
    2a00:	1800411e 	bne	r3,zero,2b08 <__sflush_r+0x1b8>
    2a04:	99400017 	ldw	r5,0(r19)
    2a08:	28c007b0 	cmpltui	r3,r5,30
    2a0c:	18002c26 	beq	r3,zero,2ac0 <__sflush_r+0x170>
    2a10:	00f7f034 	movhi	r3,57280
    2a14:	18ffff84 	addi	r3,r3,-2
    2a18:	1949d83a 	sra	r4,r3,r5
    2a1c:	80c0030b 	ldhu	r3,12(r16)
    2a20:	2100004c 	andi	r4,r4,1
    2a24:	2000271e 	bne	r4,zero,2ac4 <__sflush_r+0x174>
    2a28:	81000417 	ldw	r4,16(r16)
    2a2c:	19bdffcc 	andi	r6,r3,63487
    2a30:	8180030d 	sth	r6,12(r16)
    2a34:	80000115 	stw	zero,4(r16)
    2a38:	81000015 	stw	r4,0(r16)
    2a3c:	18c4000c 	andi	r3,r3,4096
    2a40:	1800431e 	bne	r3,zero,2b50 <__sflush_r+0x200>
    2a44:	81400c17 	ldw	r5,48(r16)
    2a48:	9c400015 	stw	r17,0(r19)
    2a4c:	28000526 	beq	r5,zero,2a64 <__sflush_r+0x114>
    2a50:	80801004 	addi	r2,r16,64
    2a54:	28800226 	beq	r5,r2,2a60 <__sflush_r+0x110>
    2a58:	9809883a 	mov	r4,r19
    2a5c:	00017940 	call	1794 <_free_r>
    2a60:	80000c15 	stw	zero,48(r16)
    2a64:	0005883a 	mov	r2,zero
    2a68:	00001906 	br	2ad0 <__sflush_r+0x180>
    2a6c:	2c800417 	ldw	r18,16(r5)
    2a70:	903ffc26 	beq	r18,zero,2a64 <__sflush_r+0x114>
    2a74:	2c400017 	ldw	r17,0(r5)
    2a78:	108000cc 	andi	r2,r2,3
    2a7c:	2c800015 	stw	r18,0(r5)
    2a80:	8ca3c83a 	sub	r17,r17,r18
    2a84:	10001c1e 	bne	r2,zero,2af8 <__sflush_r+0x1a8>
    2a88:	28800517 	ldw	r2,20(r5)
    2a8c:	80800215 	stw	r2,8(r16)
    2a90:	04400316 	blt	zero,r17,2aa0 <__sflush_r+0x150>
    2a94:	003ff306 	br	2a64 <__sflush_r+0x114>
    2a98:	90a5883a 	add	r18,r18,r2
    2a9c:	047ff10e 	bge	zero,r17,2a64 <__sflush_r+0x114>
    2aa0:	80800917 	ldw	r2,36(r16)
    2aa4:	81400717 	ldw	r5,28(r16)
    2aa8:	880f883a 	mov	r7,r17
    2aac:	900d883a 	mov	r6,r18
    2ab0:	9809883a 	mov	r4,r19
    2ab4:	103ee83a 	callr	r2
    2ab8:	88a3c83a 	sub	r17,r17,r2
    2abc:	00bff616 	blt	zero,r2,2a98 <__sflush_r+0x148>
    2ac0:	80c0030b 	ldhu	r3,12(r16)
    2ac4:	18c01014 	ori	r3,r3,64
    2ac8:	80c0030d 	sth	r3,12(r16)
    2acc:	00bfffc4 	movi	r2,-1
    2ad0:	dfc00417 	ldw	ra,16(sp)
    2ad4:	dcc00317 	ldw	r19,12(sp)
    2ad8:	dc800217 	ldw	r18,8(sp)
    2adc:	dc400117 	ldw	r17,4(sp)
    2ae0:	dc000017 	ldw	r16,0(sp)
    2ae4:	dec00504 	addi	sp,sp,20
    2ae8:	f800283a 	ret
    2aec:	29000f17 	ldw	r4,60(r5)
    2af0:	013fa616 	blt	zero,r4,298c <__sflush_r+0x3c>
    2af4:	003fdb06 	br	2a64 <__sflush_r+0x114>
    2af8:	0005883a 	mov	r2,zero
    2afc:	003fe306 	br	2a8c <__sflush_r+0x13c>
    2b00:	81801417 	ldw	r6,80(r16)
    2b04:	003fb106 	br	29cc <__sflush_r+0x7c>
    2b08:	80c0030b 	ldhu	r3,12(r16)
    2b0c:	81000417 	ldw	r4,16(r16)
    2b10:	80000115 	stw	zero,4(r16)
    2b14:	197dffcc 	andi	r5,r3,63487
    2b18:	8140030d 	sth	r5,12(r16)
    2b1c:	81000015 	stw	r4,0(r16)
    2b20:	18c4000c 	andi	r3,r3,4096
    2b24:	183fc726 	beq	r3,zero,2a44 <__sflush_r+0xf4>
    2b28:	80801415 	stw	r2,80(r16)
    2b2c:	003fc506 	br	2a44 <__sflush_r+0xf4>
    2b30:	98800017 	ldw	r2,0(r19)
    2b34:	103fa326 	beq	r2,zero,29c4 <__sflush_r+0x74>
    2b38:	10c00760 	cmpeqi	r3,r2,29
    2b3c:	1800021e 	bne	r3,zero,2b48 <__sflush_r+0x1f8>
    2b40:	10800598 	cmpnei	r2,r2,22
    2b44:	103fde1e 	bne	r2,zero,2ac0 <__sflush_r+0x170>
    2b48:	9c400015 	stw	r17,0(r19)
    2b4c:	003fc506 	br	2a64 <__sflush_r+0x114>
    2b50:	283fbc1e 	bne	r5,zero,2a44 <__sflush_r+0xf4>
    2b54:	003ff406 	br	2b28 <__sflush_r+0x1d8>

00002b58 <_fflush_r>:
    2b58:	defffd04 	addi	sp,sp,-12
    2b5c:	dc000115 	stw	r16,4(sp)
    2b60:	dfc00215 	stw	ra,8(sp)
    2b64:	2021883a 	mov	r16,r4
    2b68:	20000226 	beq	r4,zero,2b74 <_fflush_r+0x1c>
    2b6c:	20800d17 	ldw	r2,52(r4)
    2b70:	10000c26 	beq	r2,zero,2ba4 <_fflush_r+0x4c>
    2b74:	2880030f 	ldh	r2,12(r5)
    2b78:	1000051e 	bne	r2,zero,2b90 <_fflush_r+0x38>
    2b7c:	0005883a 	mov	r2,zero
    2b80:	dfc00217 	ldw	ra,8(sp)
    2b84:	dc000117 	ldw	r16,4(sp)
    2b88:	dec00304 	addi	sp,sp,12
    2b8c:	f800283a 	ret
    2b90:	8009883a 	mov	r4,r16
    2b94:	dfc00217 	ldw	ra,8(sp)
    2b98:	dc000117 	ldw	r16,4(sp)
    2b9c:	dec00304 	addi	sp,sp,12
    2ba0:	00029501 	jmpi	2950 <__sflush_r>
    2ba4:	d9400015 	stw	r5,0(sp)
    2ba8:	00007640 	call	764 <__sinit>
    2bac:	d9400017 	ldw	r5,0(sp)
    2bb0:	003ff006 	br	2b74 <_fflush_r+0x1c>

00002bb4 <fflush>:
    2bb4:	20001826 	beq	r4,zero,2c18 <fflush+0x64>
    2bb8:	00800074 	movhi	r2,1
    2bbc:	200b883a 	mov	r5,r4
    2bc0:	1105e017 	ldw	r4,6016(r2)
    2bc4:	20000226 	beq	r4,zero,2bd0 <fflush+0x1c>
    2bc8:	20800d17 	ldw	r2,52(r4)
    2bcc:	10000526 	beq	r2,zero,2be4 <fflush+0x30>
    2bd0:	2880030f 	ldh	r2,12(r5)
    2bd4:	1000021e 	bne	r2,zero,2be0 <fflush+0x2c>
    2bd8:	0005883a 	mov	r2,zero
    2bdc:	f800283a 	ret
    2be0:	00029501 	jmpi	2950 <__sflush_r>
    2be4:	defffd04 	addi	sp,sp,-12
    2be8:	d9400115 	stw	r5,4(sp)
    2bec:	d9000015 	stw	r4,0(sp)
    2bf0:	dfc00215 	stw	ra,8(sp)
    2bf4:	00007640 	call	764 <__sinit>
    2bf8:	d9400117 	ldw	r5,4(sp)
    2bfc:	d9000017 	ldw	r4,0(sp)
    2c00:	2880030f 	ldh	r2,12(r5)
    2c04:	10000b1e 	bne	r2,zero,2c34 <fflush+0x80>
    2c08:	0005883a 	mov	r2,zero
    2c0c:	dfc00217 	ldw	ra,8(sp)
    2c10:	dec00304 	addi	sp,sp,12
    2c14:	f800283a 	ret
    2c18:	01800074 	movhi	r6,1
    2c1c:	01400034 	movhi	r5,0
    2c20:	01000074 	movhi	r4,1
    2c24:	31805904 	addi	r6,r6,356
    2c28:	294ad604 	addi	r5,r5,11096
    2c2c:	21001204 	addi	r4,r4,72
    2c30:	0000c641 	jmpi	c64 <_fwalk_sglue>
    2c34:	dfc00217 	ldw	ra,8(sp)
    2c38:	dec00304 	addi	sp,sp,12
    2c3c:	00029501 	jmpi	2950 <__sflush_r>

00002c40 <__smakebuf_r>:
    2c40:	2880030b 	ldhu	r2,12(r5)
    2c44:	deffe904 	addi	sp,sp,-92
    2c48:	dc001215 	stw	r16,72(sp)
    2c4c:	dfc01615 	stw	ra,88(sp)
    2c50:	dcc01515 	stw	r19,84(sp)
    2c54:	dc801415 	stw	r18,80(sp)
    2c58:	dc401315 	stw	r17,76(sp)
    2c5c:	10c0008c 	andi	r3,r2,2
    2c60:	2821883a 	mov	r16,r5
    2c64:	18000c26 	beq	r3,zero,2c98 <__smakebuf_r+0x58>
    2c68:	288010c4 	addi	r2,r5,67
    2c6c:	28800015 	stw	r2,0(r5)
    2c70:	28800415 	stw	r2,16(r5)
    2c74:	00800044 	movi	r2,1
    2c78:	28800515 	stw	r2,20(r5)
    2c7c:	dfc01617 	ldw	ra,88(sp)
    2c80:	dcc01517 	ldw	r19,84(sp)
    2c84:	dc801417 	ldw	r18,80(sp)
    2c88:	dc401317 	ldw	r17,76(sp)
    2c8c:	dc001217 	ldw	r16,72(sp)
    2c90:	dec01704 	addi	sp,sp,92
    2c94:	f800283a 	ret
    2c98:	2940038f 	ldh	r5,14(r5)
    2c9c:	2023883a 	mov	r17,r4
    2ca0:	28002816 	blt	r5,zero,2d44 <__smakebuf_r+0x104>
    2ca4:	d80d883a 	mov	r6,sp
    2ca8:	0002e740 	call	2e74 <_fstat_r>
    2cac:	10002416 	blt	r2,zero,2d40 <__smakebuf_r+0x100>
    2cb0:	d8800117 	ldw	r2,4(sp)
    2cb4:	10bc000c 	andi	r2,r2,61440
    2cb8:	10880018 	cmpnei	r2,r2,8192
    2cbc:	1000471e 	bne	r2,zero,2ddc <__smakebuf_r+0x19c>
    2cc0:	8140038f 	ldh	r5,14(r16)
    2cc4:	8809883a 	mov	r4,r17
    2cc8:	0002ed40 	call	2ed4 <_isatty_r>
    2ccc:	10000826 	beq	r2,zero,2cf0 <__smakebuf_r+0xb0>
    2cd0:	8080030b 	ldhu	r2,12(r16)
    2cd4:	80c010c4 	addi	r3,r16,67
    2cd8:	80c00015 	stw	r3,0(r16)
    2cdc:	10800054 	ori	r2,r2,1
    2ce0:	8080030d 	sth	r2,12(r16)
    2ce4:	00800044 	movi	r2,1
    2ce8:	80c00415 	stw	r3,16(r16)
    2cec:	80800515 	stw	r2,20(r16)
    2cf0:	01410004 	movi	r5,1024
    2cf4:	8809883a 	mov	r4,r17
    2cf8:	0001a9c0 	call	1a9c <_malloc_r>
    2cfc:	10002626 	beq	r2,zero,2d98 <__smakebuf_r+0x158>
    2d00:	80c0030b 	ldhu	r3,12(r16)
    2d04:	8140038f 	ldh	r5,14(r16)
    2d08:	80800015 	stw	r2,0(r16)
    2d0c:	18c02014 	ori	r3,r3,128
    2d10:	80800415 	stw	r2,16(r16)
    2d14:	00810004 	movi	r2,1024
    2d18:	80c0030d 	sth	r3,12(r16)
    2d1c:	80800515 	stw	r2,20(r16)
    2d20:	8809883a 	mov	r4,r17
    2d24:	0002ed40 	call	2ed4 <_isatty_r>
    2d28:	80c0030b 	ldhu	r3,12(r16)
    2d2c:	1000271e 	bne	r2,zero,2dcc <__smakebuf_r+0x18c>
    2d30:	00820004 	movi	r2,2048
    2d34:	10c4b03a 	or	r2,r2,r3
    2d38:	8080030d 	sth	r2,12(r16)
    2d3c:	003fcf06 	br	2c7c <__smakebuf_r+0x3c>
    2d40:	8080030b 	ldhu	r2,12(r16)
    2d44:	1080200c 	andi	r2,r2,128
    2d48:	10000d1e 	bne	r2,zero,2d80 <__smakebuf_r+0x140>
    2d4c:	04c10004 	movi	r19,1024
    2d50:	0025883a 	mov	r18,zero
    2d54:	980b883a 	mov	r5,r19
    2d58:	8809883a 	mov	r4,r17
    2d5c:	0001a9c0 	call	1a9c <_malloc_r>
    2d60:	10000d26 	beq	r2,zero,2d98 <__smakebuf_r+0x158>
    2d64:	80c0030b 	ldhu	r3,12(r16)
    2d68:	80800015 	stw	r2,0(r16)
    2d6c:	80800415 	stw	r2,16(r16)
    2d70:	18c02014 	ori	r3,r3,128
    2d74:	84c00515 	stw	r19,20(r16)
    2d78:	9005883a 	mov	r2,r18
    2d7c:	003fed06 	br	2d34 <__smakebuf_r+0xf4>
    2d80:	04c01004 	movi	r19,64
    2d84:	980b883a 	mov	r5,r19
    2d88:	8809883a 	mov	r4,r17
    2d8c:	0025883a 	mov	r18,zero
    2d90:	0001a9c0 	call	1a9c <_malloc_r>
    2d94:	103ff31e 	bne	r2,zero,2d64 <__smakebuf_r+0x124>
    2d98:	8080030b 	ldhu	r2,12(r16)
    2d9c:	10c0800c 	andi	r3,r2,512
    2da0:	183fb61e 	bne	r3,zero,2c7c <__smakebuf_r+0x3c>
    2da4:	00ffff04 	movi	r3,-4
    2da8:	10c4703a 	and	r2,r2,r3
    2dac:	10800094 	ori	r2,r2,2
    2db0:	80c010c4 	addi	r3,r16,67
    2db4:	8080030d 	sth	r2,12(r16)
    2db8:	00800044 	movi	r2,1
    2dbc:	80c00015 	stw	r3,0(r16)
    2dc0:	80c00415 	stw	r3,16(r16)
    2dc4:	80800515 	stw	r2,20(r16)
    2dc8:	003fac06 	br	2c7c <__smakebuf_r+0x3c>
    2dcc:	18ffff0c 	andi	r3,r3,65532
    2dd0:	00820004 	movi	r2,2048
    2dd4:	18c00054 	ori	r3,r3,1
    2dd8:	003fd606 	br	2d34 <__smakebuf_r+0xf4>
    2ddc:	04c10004 	movi	r19,1024
    2de0:	04820004 	movi	r18,2048
    2de4:	003fdb06 	br	2d54 <__smakebuf_r+0x114>

00002de8 <__swhatbuf_r>:
    2de8:	deffea04 	addi	sp,sp,-88
    2dec:	dc001215 	stw	r16,72(sp)
    2df0:	2821883a 	mov	r16,r5
    2df4:	2940038f 	ldh	r5,14(r5)
    2df8:	dc801415 	stw	r18,80(sp)
    2dfc:	dc401315 	stw	r17,76(sp)
    2e00:	dfc01515 	stw	ra,84(sp)
    2e04:	3023883a 	mov	r17,r6
    2e08:	3825883a 	mov	r18,r7
    2e0c:	28001016 	blt	r5,zero,2e50 <__swhatbuf_r+0x68>
    2e10:	d80d883a 	mov	r6,sp
    2e14:	0002e740 	call	2e74 <_fstat_r>
    2e18:	10000d16 	blt	r2,zero,2e50 <__swhatbuf_r+0x68>
    2e1c:	d8c00117 	ldw	r3,4(sp)
    2e20:	01010004 	movi	r4,1024
    2e24:	00820004 	movi	r2,2048
    2e28:	18fc000c 	andi	r3,r3,61440
    2e2c:	18c80020 	cmpeqi	r3,r3,8192
    2e30:	90c00015 	stw	r3,0(r18)
    2e34:	89000015 	stw	r4,0(r17)
    2e38:	dfc01517 	ldw	ra,84(sp)
    2e3c:	dc801417 	ldw	r18,80(sp)
    2e40:	dc401317 	ldw	r17,76(sp)
    2e44:	dc001217 	ldw	r16,72(sp)
    2e48:	dec01604 	addi	sp,sp,88
    2e4c:	f800283a 	ret
    2e50:	8080030b 	ldhu	r2,12(r16)
    2e54:	0007883a 	mov	r3,zero
    2e58:	1080200c 	andi	r2,r2,128
    2e5c:	10000326 	beq	r2,zero,2e6c <__swhatbuf_r+0x84>
    2e60:	01001004 	movi	r4,64
    2e64:	0005883a 	mov	r2,zero
    2e68:	003ff106 	br	2e30 <__swhatbuf_r+0x48>
    2e6c:	01010004 	movi	r4,1024
    2e70:	003fef06 	br	2e30 <__swhatbuf_r+0x48>

00002e74 <_fstat_r>:
    2e74:	2807883a 	mov	r3,r5
    2e78:	defffe04 	addi	sp,sp,-8
    2e7c:	dc000015 	stw	r16,0(sp)
    2e80:	00800074 	movhi	r2,1
    2e84:	300b883a 	mov	r5,r6
    2e88:	2021883a 	mov	r16,r4
    2e8c:	1809883a 	mov	r4,r3
    2e90:	dfc00115 	stw	ra,4(sp)
    2e94:	1005ed15 	stw	zero,6068(r2)
    2e98:	00034340 	call	3434 <fstat>
    2e9c:	10ffffd8 	cmpnei	r3,r2,-1
    2ea0:	18000426 	beq	r3,zero,2eb4 <_fstat_r+0x40>
    2ea4:	dfc00117 	ldw	ra,4(sp)
    2ea8:	dc000017 	ldw	r16,0(sp)
    2eac:	dec00204 	addi	sp,sp,8
    2eb0:	f800283a 	ret
    2eb4:	00c00074 	movhi	r3,1
    2eb8:	18c5ed17 	ldw	r3,6068(r3)
    2ebc:	183ff926 	beq	r3,zero,2ea4 <_fstat_r+0x30>
    2ec0:	80c00015 	stw	r3,0(r16)
    2ec4:	dfc00117 	ldw	ra,4(sp)
    2ec8:	dc000017 	ldw	r16,0(sp)
    2ecc:	dec00204 	addi	sp,sp,8
    2ed0:	f800283a 	ret

00002ed4 <_isatty_r>:
    2ed4:	defffe04 	addi	sp,sp,-8
    2ed8:	dc000015 	stw	r16,0(sp)
    2edc:	00800074 	movhi	r2,1
    2ee0:	2021883a 	mov	r16,r4
    2ee4:	2809883a 	mov	r4,r5
    2ee8:	dfc00115 	stw	ra,4(sp)
    2eec:	1005ed15 	stw	zero,6068(r2)
    2ef0:	000352c0 	call	352c <isatty>
    2ef4:	10ffffd8 	cmpnei	r3,r2,-1
    2ef8:	18000426 	beq	r3,zero,2f0c <_isatty_r+0x38>
    2efc:	dfc00117 	ldw	ra,4(sp)
    2f00:	dc000017 	ldw	r16,0(sp)
    2f04:	dec00204 	addi	sp,sp,8
    2f08:	f800283a 	ret
    2f0c:	00c00074 	movhi	r3,1
    2f10:	18c5ed17 	ldw	r3,6068(r3)
    2f14:	183ff926 	beq	r3,zero,2efc <_isatty_r+0x28>
    2f18:	80c00015 	stw	r3,0(r16)
    2f1c:	dfc00117 	ldw	ra,4(sp)
    2f20:	dc000017 	ldw	r16,0(sp)
    2f24:	dec00204 	addi	sp,sp,8
    2f28:	f800283a 	ret

00002f2c <_sbrk_r>:
    2f2c:	defffe04 	addi	sp,sp,-8
    2f30:	dc000015 	stw	r16,0(sp)
    2f34:	00800074 	movhi	r2,1
    2f38:	2021883a 	mov	r16,r4
    2f3c:	2809883a 	mov	r4,r5
    2f40:	dfc00115 	stw	ra,4(sp)
    2f44:	1005ed15 	stw	zero,6068(r2)
    2f48:	0003a5c0 	call	3a5c <sbrk>
    2f4c:	10ffffd8 	cmpnei	r3,r2,-1
    2f50:	18000426 	beq	r3,zero,2f64 <_sbrk_r+0x38>
    2f54:	dfc00117 	ldw	ra,4(sp)
    2f58:	dc000017 	ldw	r16,0(sp)
    2f5c:	dec00204 	addi	sp,sp,8
    2f60:	f800283a 	ret
    2f64:	00c00074 	movhi	r3,1
    2f68:	18c5ed17 	ldw	r3,6068(r3)
    2f6c:	183ff926 	beq	r3,zero,2f54 <_sbrk_r+0x28>
    2f70:	80c00015 	stw	r3,0(r16)
    2f74:	dfc00117 	ldw	ra,4(sp)
    2f78:	dc000017 	ldw	r16,0(sp)
    2f7c:	dec00204 	addi	sp,sp,8
    2f80:	f800283a 	ret

00002f84 <__call_exitprocs>:
    2f84:	defff804 	addi	sp,sp,-32
    2f88:	00800074 	movhi	r2,1
    2f8c:	dc800215 	stw	r18,8(sp)
    2f90:	1485f217 	ldw	r18,6088(r2)
    2f94:	dfc00715 	stw	ra,28(sp)
    2f98:	dd800615 	stw	r22,24(sp)
    2f9c:	dd400515 	stw	r21,20(sp)
    2fa0:	dd000415 	stw	r20,16(sp)
    2fa4:	dcc00315 	stw	r19,12(sp)
    2fa8:	dc400115 	stw	r17,4(sp)
    2fac:	dc000015 	stw	r16,0(sp)
    2fb0:	90001026 	beq	r18,zero,2ff4 <__call_exitprocs+0x70>
    2fb4:	2029883a 	mov	r20,r4
    2fb8:	282b883a 	mov	r21,r5
    2fbc:	04c00044 	movi	r19,1
    2fc0:	94000117 	ldw	r16,4(r18)
    2fc4:	847fffc4 	addi	r17,r16,-1
    2fc8:	88000a16 	blt	r17,zero,2ff4 <__call_exitprocs+0x70>
    2fcc:	84000044 	addi	r16,r16,1
    2fd0:	802090ba 	slli	r16,r16,2
    2fd4:	9421883a 	add	r16,r18,r16
    2fd8:	a8001026 	beq	r21,zero,301c <__call_exitprocs+0x98>
    2fdc:	80804017 	ldw	r2,256(r16)
    2fe0:	15400e26 	beq	r2,r21,301c <__call_exitprocs+0x98>
    2fe4:	8c7fffc4 	addi	r17,r17,-1
    2fe8:	88bfffd8 	cmpnei	r2,r17,-1
    2fec:	843fff04 	addi	r16,r16,-4
    2ff0:	103ff91e 	bne	r2,zero,2fd8 <__call_exitprocs+0x54>
    2ff4:	dfc00717 	ldw	ra,28(sp)
    2ff8:	dd800617 	ldw	r22,24(sp)
    2ffc:	dd400517 	ldw	r21,20(sp)
    3000:	dd000417 	ldw	r20,16(sp)
    3004:	dcc00317 	ldw	r19,12(sp)
    3008:	dc800217 	ldw	r18,8(sp)
    300c:	dc400117 	ldw	r17,4(sp)
    3010:	dc000017 	ldw	r16,0(sp)
    3014:	dec00804 	addi	sp,sp,32
    3018:	f800283a 	ret
    301c:	90800117 	ldw	r2,4(r18)
    3020:	81800017 	ldw	r6,0(r16)
    3024:	10bfffc4 	addi	r2,r2,-1
    3028:	14401826 	beq	r2,r17,308c <__call_exitprocs+0x108>
    302c:	80000015 	stw	zero,0(r16)
    3030:	303fec26 	beq	r6,zero,2fe4 <__call_exitprocs+0x60>
    3034:	9c46983a 	sll	r3,r19,r17
    3038:	90806217 	ldw	r2,392(r18)
    303c:	95800117 	ldw	r22,4(r18)
    3040:	1884703a 	and	r2,r3,r2
    3044:	1000091e 	bne	r2,zero,306c <__call_exitprocs+0xe8>
    3048:	303ee83a 	callr	r6
    304c:	90c00117 	ldw	r3,4(r18)
    3050:	00800074 	movhi	r2,1
    3054:	1085f217 	ldw	r2,6088(r2)
    3058:	1d80011e 	bne	r3,r22,3060 <__call_exitprocs+0xdc>
    305c:	14bfe126 	beq	r2,r18,2fe4 <__call_exitprocs+0x60>
    3060:	103fe426 	beq	r2,zero,2ff4 <__call_exitprocs+0x70>
    3064:	1025883a 	mov	r18,r2
    3068:	003fd506 	br	2fc0 <__call_exitprocs+0x3c>
    306c:	90806317 	ldw	r2,396(r18)
    3070:	81002017 	ldw	r4,128(r16)
    3074:	1886703a 	and	r3,r3,r2
    3078:	1800061e 	bne	r3,zero,3094 <__call_exitprocs+0x110>
    307c:	200b883a 	mov	r5,r4
    3080:	a009883a 	mov	r4,r20
    3084:	303ee83a 	callr	r6
    3088:	003ff006 	br	304c <__call_exitprocs+0xc8>
    308c:	94400115 	stw	r17,4(r18)
    3090:	003fe706 	br	3030 <__call_exitprocs+0xac>
    3094:	303ee83a 	callr	r6
    3098:	003fec06 	br	304c <__call_exitprocs+0xc8>

0000309c <__divsi3>:
    309c:	20001a16 	blt	r4,zero,3108 <__divsi3+0x6c>
    30a0:	000f883a 	mov	r7,zero
    30a4:	2800020e 	bge	r5,zero,30b0 <__divsi3+0x14>
    30a8:	014bc83a 	sub	r5,zero,r5
    30ac:	39c0005c 	xori	r7,r7,1
    30b0:	200d883a 	mov	r6,r4
    30b4:	00c00044 	movi	r3,1
    30b8:	2900092e 	bgeu	r5,r4,30e0 <__divsi3+0x44>
    30bc:	00800804 	movi	r2,32
    30c0:	00c00044 	movi	r3,1
    30c4:	00000106 	br	30cc <__divsi3+0x30>
    30c8:	10001226 	beq	r2,zero,3114 <__divsi3+0x78>
    30cc:	294b883a 	add	r5,r5,r5
    30d0:	10bfffc4 	addi	r2,r2,-1
    30d4:	18c7883a 	add	r3,r3,r3
    30d8:	293ffb36 	bltu	r5,r4,30c8 <__divsi3+0x2c>
    30dc:	18000d26 	beq	r3,zero,3114 <__divsi3+0x78>
    30e0:	0005883a 	mov	r2,zero
    30e4:	31400236 	bltu	r6,r5,30f0 <__divsi3+0x54>
    30e8:	314dc83a 	sub	r6,r6,r5
    30ec:	10c4b03a 	or	r2,r2,r3
    30f0:	1806d07a 	srli	r3,r3,1
    30f4:	280ad07a 	srli	r5,r5,1
    30f8:	183ffa1e 	bne	r3,zero,30e4 <__divsi3+0x48>
    30fc:	38000126 	beq	r7,zero,3104 <__divsi3+0x68>
    3100:	0085c83a 	sub	r2,zero,r2
    3104:	f800283a 	ret
    3108:	0109c83a 	sub	r4,zero,r4
    310c:	01c00044 	movi	r7,1
    3110:	003fe406 	br	30a4 <__divsi3+0x8>
    3114:	0005883a 	mov	r2,zero
    3118:	003ff806 	br	30fc <__divsi3+0x60>

0000311c <__modsi3>:
    311c:	20001716 	blt	r4,zero,317c <__modsi3+0x60>
    3120:	000f883a 	mov	r7,zero
    3124:	2005883a 	mov	r2,r4
    3128:	2800010e 	bge	r5,zero,3130 <__modsi3+0x14>
    312c:	014bc83a 	sub	r5,zero,r5
    3130:	00c00044 	movi	r3,1
    3134:	2900092e 	bgeu	r5,r4,315c <__modsi3+0x40>
    3138:	01800804 	movi	r6,32
    313c:	00c00044 	movi	r3,1
    3140:	00000106 	br	3148 <__modsi3+0x2c>
    3144:	30001026 	beq	r6,zero,3188 <__modsi3+0x6c>
    3148:	294b883a 	add	r5,r5,r5
    314c:	31bfffc4 	addi	r6,r6,-1
    3150:	18c7883a 	add	r3,r3,r3
    3154:	293ffb36 	bltu	r5,r4,3144 <__modsi3+0x28>
    3158:	18000b26 	beq	r3,zero,3188 <__modsi3+0x6c>
    315c:	1806d07a 	srli	r3,r3,1
    3160:	11400136 	bltu	r2,r5,3168 <__modsi3+0x4c>
    3164:	1145c83a 	sub	r2,r2,r5
    3168:	280ad07a 	srli	r5,r5,1
    316c:	183ffb1e 	bne	r3,zero,315c <__modsi3+0x40>
    3170:	38000126 	beq	r7,zero,3178 <__modsi3+0x5c>
    3174:	0085c83a 	sub	r2,zero,r2
    3178:	f800283a 	ret
    317c:	0109c83a 	sub	r4,zero,r4
    3180:	01c00044 	movi	r7,1
    3184:	003fe706 	br	3124 <__modsi3+0x8>
    3188:	2005883a 	mov	r2,r4
    318c:	003ff806 	br	3170 <__modsi3+0x54>

00003190 <__udivsi3>:
    3190:	200d883a 	mov	r6,r4
    3194:	2900152e 	bgeu	r5,r4,31ec <__udivsi3+0x5c>
    3198:	28001416 	blt	r5,zero,31ec <__udivsi3+0x5c>
    319c:	00800804 	movi	r2,32
    31a0:	00c00044 	movi	r3,1
    31a4:	00000206 	br	31b0 <__udivsi3+0x20>
    31a8:	10000e26 	beq	r2,zero,31e4 <__udivsi3+0x54>
    31ac:	28000416 	blt	r5,zero,31c0 <__udivsi3+0x30>
    31b0:	294b883a 	add	r5,r5,r5
    31b4:	10bfffc4 	addi	r2,r2,-1
    31b8:	18c7883a 	add	r3,r3,r3
    31bc:	293ffa36 	bltu	r5,r4,31a8 <__udivsi3+0x18>
    31c0:	18000826 	beq	r3,zero,31e4 <__udivsi3+0x54>
    31c4:	0005883a 	mov	r2,zero
    31c8:	31400236 	bltu	r6,r5,31d4 <__udivsi3+0x44>
    31cc:	314dc83a 	sub	r6,r6,r5
    31d0:	10c4b03a 	or	r2,r2,r3
    31d4:	1806d07a 	srli	r3,r3,1
    31d8:	280ad07a 	srli	r5,r5,1
    31dc:	183ffa1e 	bne	r3,zero,31c8 <__udivsi3+0x38>
    31e0:	f800283a 	ret
    31e4:	0005883a 	mov	r2,zero
    31e8:	f800283a 	ret
    31ec:	00c00044 	movi	r3,1
    31f0:	003ff406 	br	31c4 <__udivsi3+0x34>

000031f4 <__umodsi3>:
    31f4:	2005883a 	mov	r2,r4
    31f8:	2900132e 	bgeu	r5,r4,3248 <__umodsi3+0x54>
    31fc:	28001216 	blt	r5,zero,3248 <__umodsi3+0x54>
    3200:	01800804 	movi	r6,32
    3204:	00c00044 	movi	r3,1
    3208:	00000206 	br	3214 <__umodsi3+0x20>
    320c:	30000c26 	beq	r6,zero,3240 <__umodsi3+0x4c>
    3210:	28000416 	blt	r5,zero,3224 <__umodsi3+0x30>
    3214:	294b883a 	add	r5,r5,r5
    3218:	31bfffc4 	addi	r6,r6,-1
    321c:	18c7883a 	add	r3,r3,r3
    3220:	293ffa36 	bltu	r5,r4,320c <__umodsi3+0x18>
    3224:	18000626 	beq	r3,zero,3240 <__umodsi3+0x4c>
    3228:	1806d07a 	srli	r3,r3,1
    322c:	11400136 	bltu	r2,r5,3234 <__umodsi3+0x40>
    3230:	1145c83a 	sub	r2,r2,r5
    3234:	280ad07a 	srli	r5,r5,1
    3238:	183ffb1e 	bne	r3,zero,3228 <__umodsi3+0x34>
    323c:	f800283a 	ret
    3240:	2005883a 	mov	r2,r4
    3244:	f800283a 	ret
    3248:	00c00044 	movi	r3,1
    324c:	003ff606 	br	3228 <__umodsi3+0x34>

00003250 <__mulsi3>:
    3250:	0005883a 	mov	r2,zero
    3254:	20000726 	beq	r4,zero,3274 <__mulsi3+0x24>
    3258:	20c0004c 	andi	r3,r4,1
    325c:	2008d07a 	srli	r4,r4,1
    3260:	18000126 	beq	r3,zero,3268 <__mulsi3+0x18>
    3264:	1145883a 	add	r2,r2,r5
    3268:	294b883a 	add	r5,r5,r5
    326c:	203ffa1e 	bne	r4,zero,3258 <__mulsi3+0x8>
    3270:	f800283a 	ret
    3274:	f800283a 	ret

00003278 <alt_get_errno>:

  if (fd)
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
    3278:	defffe04 	addi	sp,sp,-8
    327c:	dfc00115 	stw	ra,4(sp)
    3280:	df000015 	stw	fp,0(sp)
    3284:	d839883a 	mov	fp,sp
     */
    3288:	d0a00817 	ldw	r2,-32736(gp)
    328c:	10000326 	beq	r2,zero,329c <alt_get_errno+0x24>
    3290:	d0a00817 	ldw	r2,-32736(gp)
    3294:	103ee83a 	callr	r2
    3298:	00000106 	br	32a0 <alt_get_errno+0x28>
    329c:	d0a00d04 	addi	r2,gp,-32716

    32a0:	e037883a 	mov	sp,fp
    32a4:	dfc00117 	ldw	ra,4(sp)
    32a8:	df000017 	ldw	fp,0(sp)
    32ac:	dec00204 	addi	sp,sp,8
    32b0:	f800283a 	ret

000032b4 <close>:
{
    32b4:	defffb04 	addi	sp,sp,-20
    32b8:	dfc00415 	stw	ra,16(sp)
    32bc:	df000315 	stw	fp,12(sp)
    32c0:	df000304 	addi	fp,sp,12
    32c4:	e13ffd15 	stw	r4,-12(fp)
  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    32c8:	e0bffd17 	ldw	r2,-12(fp)
    32cc:	10000916 	blt	r2,zero,32f4 <close+0x40>
    32d0:	e0fffd17 	ldw	r3,-12(fp)
    32d4:	1805883a 	mov	r2,r3
    32d8:	1085883a 	add	r2,r2,r2
    32dc:	10c5883a 	add	r2,r2,r3
    32e0:	100490ba 	slli	r2,r2,2
    32e4:	00c00074 	movhi	r3,1
    32e8:	18c16804 	addi	r3,r3,1440
    32ec:	10c5883a 	add	r2,r2,r3
    32f0:	00000106 	br	32f8 <close+0x44>
    32f4:	0005883a 	mov	r2,zero
    32f8:	e0bfff15 	stw	r2,-4(fp)
  if (fd)
    32fc:	e0bfff17 	ldw	r2,-4(fp)
    3300:	10001926 	beq	r2,zero,3368 <close+0xb4>
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3304:	e0bfff17 	ldw	r2,-4(fp)
    3308:	10800017 	ldw	r2,0(r2)
    330c:	10800417 	ldw	r2,16(r2)
    3310:	10000626 	beq	r2,zero,332c <close+0x78>
    3314:	e0bfff17 	ldw	r2,-4(fp)
    3318:	10800017 	ldw	r2,0(r2)
    331c:	10800417 	ldw	r2,16(r2)
    3320:	e13fff17 	ldw	r4,-4(fp)
    3324:	103ee83a 	callr	r2
    3328:	00000106 	br	3330 <close+0x7c>
    332c:	0005883a 	mov	r2,zero
    3330:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3334:	e13ffd17 	ldw	r4,-12(fp)
    3338:	00039ec0 	call	39ec <alt_release_fd>
    if (rval < 0)
    333c:	e0bffe17 	ldw	r2,-8(fp)
    3340:	1000070e 	bge	r2,zero,3360 <close+0xac>
    {
      ALT_ERRNO = -rval;
    3344:	00032780 	call	3278 <alt_get_errno>
    3348:	1007883a 	mov	r3,r2
    334c:	e0bffe17 	ldw	r2,-8(fp)
    3350:	0085c83a 	sub	r2,zero,r2
    3354:	18800015 	stw	r2,0(r3)
      return -1;
    3358:	00bfffc4 	movi	r2,-1
    335c:	00000706 	br	337c <close+0xc8>
    }
    return 0;
    3360:	0005883a 	mov	r2,zero
    3364:	00000506 	br	337c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3368:	00032780 	call	3278 <alt_get_errno>
    336c:	1007883a 	mov	r3,r2
    3370:	00801444 	movi	r2,81
    3374:	18800015 	stw	r2,0(r3)
    return -1;
    3378:	00bfffc4 	movi	r2,-1
  }
}
    337c:	e037883a 	mov	sp,fp
    3380:	dfc00117 	ldw	ra,4(sp)
    3384:	df000017 	ldw	fp,0(sp)
    3388:	dec00204 	addi	sp,sp,8
    338c:	f800283a 	ret

00003390 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3390:	defffc04 	addi	sp,sp,-16
    3394:	df000315 	stw	fp,12(sp)
    3398:	df000304 	addi	fp,sp,12
    339c:	e13fff15 	stw	r4,-4(fp)
    33a0:	e17ffe15 	stw	r5,-8(fp)
    33a4:	e1bffd15 	stw	r6,-12(fp)
  return len;
    33a8:	e0bffd17 	ldw	r2,-12(fp)
}
    33ac:	e037883a 	mov	sp,fp
    33b0:	df000017 	ldw	fp,0(sp)
    33b4:	dec00104 	addi	sp,sp,4
    33b8:	f800283a 	ret

000033bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    33bc:	defffd04 	addi	sp,sp,-12
    33c0:	df000215 	stw	fp,8(sp)
    33c4:	df000204 	addi	fp,sp,8
    33c8:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    33cc:	0001883a 	nop
    33d0:	e0bffe17 	ldw	r2,-8(fp)
    33d4:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    33d8:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    33dc:	10000226 	beq	r2,zero,33e8 <_exit+0x2c>
    ALT_SIM_FAIL();
    33e0:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    33e4:	00000106 	br	33ec <_exit+0x30>
    ALT_SIM_PASS();
    33e8:	002af0b0 	cmpltui	zero,zero,43970
}
    33ec:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    33f0:	0001883a 	nop
    33f4:	003ffe06 	br	33f0 <_exit+0x34>

000033f8 <alt_get_errno>:
        return 0;
    default:
        return -1;
    }

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    33f8:	defffe04 	addi	sp,sp,-8
    33fc:	dfc00115 	stw	ra,4(sp)
    3400:	df000015 	stw	fp,0(sp)
    3404:	d839883a 	mov	fp,sp
    /* Generate a link time warning, should this function ever be called. */
    3408:	d0a00817 	ldw	r2,-32736(gp)
    340c:	10000326 	beq	r2,zero,341c <alt_get_errno+0x24>
    3410:	d0a00817 	ldw	r2,-32736(gp)
    3414:	103ee83a 	callr	r2
    3418:	00000106 	br	3420 <alt_get_errno+0x28>
    341c:	d0a00d04 	addi	r2,gp,-32716
    ALT_STUB_WARNING(fstat);
    3420:	e037883a 	mov	sp,fp
    3424:	dfc00117 	ldw	ra,4(sp)
    3428:	df000017 	ldw	fp,0(sp)
    342c:	dec00204 	addi	sp,sp,8
    3430:	f800283a 	ret

00003434 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3434:	defffb04 	addi	sp,sp,-20
    3438:	dfc00415 	stw	ra,16(sp)
    343c:	df000315 	stw	fp,12(sp)
    3440:	df000304 	addi	fp,sp,12
    3444:	e13ffe15 	stw	r4,-8(fp)
    3448:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    344c:	e0bffe17 	ldw	r2,-8(fp)
    3450:	10000916 	blt	r2,zero,3478 <fstat+0x44>
    3454:	e0fffe17 	ldw	r3,-8(fp)
    3458:	1805883a 	mov	r2,r3
    345c:	1085883a 	add	r2,r2,r2
    3460:	10c5883a 	add	r2,r2,r3
    3464:	100490ba 	slli	r2,r2,2
    3468:	00c00074 	movhi	r3,1
    346c:	18c16804 	addi	r3,r3,1440
    3470:	10c5883a 	add	r2,r2,r3
    3474:	00000106 	br	347c <fstat+0x48>
    3478:	0005883a 	mov	r2,zero
    347c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3480:	e0bfff17 	ldw	r2,-4(fp)
    3484:	10001026 	beq	r2,zero,34c8 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    3488:	e0bfff17 	ldw	r2,-4(fp)
    348c:	10800017 	ldw	r2,0(r2)
    3490:	10800817 	ldw	r2,32(r2)
    3494:	10000726 	beq	r2,zero,34b4 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
    3498:	e0bfff17 	ldw	r2,-4(fp)
    349c:	10800017 	ldw	r2,0(r2)
    34a0:	10800817 	ldw	r2,32(r2)
    34a4:	e17ffd17 	ldw	r5,-12(fp)
    34a8:	e13fff17 	ldw	r4,-4(fp)
    34ac:	103ee83a 	callr	r2
    34b0:	00000a06 	br	34dc <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    34b4:	e0bffd17 	ldw	r2,-12(fp)
    34b8:	00c80004 	movi	r3,8192
    34bc:	10c00115 	stw	r3,4(r2)
      return 0;
    34c0:	0005883a 	mov	r2,zero
    34c4:	00000506 	br	34dc <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    34c8:	00033f80 	call	33f8 <alt_get_errno>
    34cc:	1007883a 	mov	r3,r2
    34d0:	00801444 	movi	r2,81
    34d4:	18800015 	stw	r2,0(r3)
    return -1;
    34d8:	00bfffc4 	movi	r2,-1
  }
}
    34dc:	e037883a 	mov	sp,fp
    34e0:	dfc00117 	ldw	ra,4(sp)
    34e4:	df000017 	ldw	fp,0(sp)
    34e8:	dec00204 	addi	sp,sp,8
    34ec:	f800283a 	ret

000034f0 <alt_get_errno>:
 * refers to a terminal device or not. If it is a terminal device then the
 * return value is one, otherwise it is zero.  
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
    34f0:	defffe04 	addi	sp,sp,-8
    34f4:	dfc00115 	stw	ra,4(sp)
    34f8:	df000015 	stw	fp,0(sp)
    34fc:	d839883a 	mov	fp,sp
int ALT_ISATTY (int file)
    3500:	d0a00817 	ldw	r2,-32736(gp)
    3504:	10000326 	beq	r2,zero,3514 <alt_get_errno+0x24>
    3508:	d0a00817 	ldw	r2,-32736(gp)
    350c:	103ee83a 	callr	r2
    3510:	00000106 	br	3518 <alt_get_errno+0x28>
    3514:	d0a00d04 	addi	r2,gp,-32716
{
    3518:	e037883a 	mov	sp,fp
    351c:	dfc00117 	ldw	ra,4(sp)
    3520:	df000017 	ldw	fp,0(sp)
    3524:	dec00204 	addi	sp,sp,8
    3528:	f800283a 	ret

0000352c <isatty>:
    352c:	deffea04 	addi	sp,sp,-88
    3530:	dfc01515 	stw	ra,84(sp)
    3534:	df001415 	stw	fp,80(sp)
    3538:	df001404 	addi	fp,sp,80
    353c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3540:	e0bfec17 	ldw	r2,-80(fp)
    3544:	10000916 	blt	r2,zero,356c <isatty+0x40>
    3548:	e0ffec17 	ldw	r3,-80(fp)
    354c:	1805883a 	mov	r2,r3
    3550:	1085883a 	add	r2,r2,r2
    3554:	10c5883a 	add	r2,r2,r3
    3558:	100490ba 	slli	r2,r2,2
    355c:	00c00074 	movhi	r3,1
    3560:	18c16804 	addi	r3,r3,1440
    3564:	10c5883a 	add	r2,r2,r3
    3568:	00000106 	br	3570 <isatty+0x44>
    356c:	0005883a 	mov	r2,zero
    3570:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3574:	e0bfff17 	ldw	r2,-4(fp)
    3578:	10000e26 	beq	r2,zero,35b4 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    357c:	e0bfff17 	ldw	r2,-4(fp)
    3580:	10800017 	ldw	r2,0(r2)
    3584:	10800817 	ldw	r2,32(r2)
    3588:	1000021e 	bne	r2,zero,3594 <isatty+0x68>
    {
      return 1;
    358c:	00800044 	movi	r2,1
    3590:	00000d06 	br	35c8 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3594:	e0bfed04 	addi	r2,fp,-76
    3598:	100b883a 	mov	r5,r2
    359c:	e13fec17 	ldw	r4,-80(fp)
    35a0:	00034340 	call	3434 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    35a4:	e0bfee17 	ldw	r2,-72(fp)
    35a8:	10880020 	cmpeqi	r2,r2,8192
    35ac:	10803fcc 	andi	r2,r2,255
    35b0:	00000506 	br	35c8 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    35b4:	00034f00 	call	34f0 <alt_get_errno>
    35b8:	1007883a 	mov	r3,r2
    35bc:	00801444 	movi	r2,81
    35c0:	18800015 	stw	r2,0(r3)
    return 0;
    35c4:	0005883a 	mov	r2,zero
  }
}
    35c8:	e037883a 	mov	sp,fp
    35cc:	dfc00117 	ldw	ra,4(sp)
    35d0:	df000017 	ldw	fp,0(sp)
    35d4:	dec00204 	addi	sp,sp,8
    35d8:	f800283a 	ret

000035dc <alt_load_section>:
 */  

void alt_load (void)
{
  /* 
   * Copy the .rwdata section. 
    35dc:	defffc04 	addi	sp,sp,-16
    35e0:	df000315 	stw	fp,12(sp)
    35e4:	df000304 	addi	fp,sp,12
    35e8:	e13fff15 	stw	r4,-4(fp)
    35ec:	e17ffe15 	stw	r5,-8(fp)
    35f0:	e1bffd15 	stw	r6,-12(fp)
   */
    35f4:	e0fffe17 	ldw	r3,-8(fp)
    35f8:	e0bfff17 	ldw	r2,-4(fp)
    35fc:	18800c26 	beq	r3,r2,3630 <alt_load_section+0x54>

  alt_load_section (&__flash_rwdata_start, 
    3600:	00000806 	br	3624 <alt_load_section+0x48>
		               &__ram_rwdata_start,
		               &__ram_rwdata_end);
    3604:	e0ffff17 	ldw	r3,-4(fp)
    3608:	18800104 	addi	r2,r3,4
    360c:	e0bfff15 	stw	r2,-4(fp)
    3610:	e0bffe17 	ldw	r2,-8(fp)
    3614:	11000104 	addi	r4,r2,4
    3618:	e13ffe15 	stw	r4,-8(fp)
    361c:	18c00017 	ldw	r3,0(r3)
    3620:	10c00015 	stw	r3,0(r2)
  alt_load_section (&__flash_rwdata_start, 
    3624:	e0fffe17 	ldw	r3,-8(fp)
    3628:	e0bffd17 	ldw	r2,-12(fp)
    362c:	18bff51e 	bne	r3,r2,3604 <alt_load_section+0x28>

  /*
   * Copy the exception handler.
    3630:	0001883a 	nop
    3634:	e037883a 	mov	sp,fp
    3638:	df000017 	ldw	fp,0(sp)
    363c:	dec00104 	addi	sp,sp,4
    3640:	f800283a 	ret

00003644 <alt_load>:
{
    3644:	defffe04 	addi	sp,sp,-8
    3648:	dfc00115 	stw	ra,4(sp)
    364c:	df000015 	stw	fp,0(sp)
    3650:	d839883a 	mov	fp,sp
  alt_load_section (&__flash_rwdata_start, 
    3654:	01800074 	movhi	r6,1
    3658:	3185ed04 	addi	r6,r6,6068
    365c:	01400074 	movhi	r5,1
    3660:	29401204 	addi	r5,r5,72
    3664:	01000034 	movhi	r4,0
    3668:	21163904 	addi	r4,r4,22756
    366c:	00035dc0 	call	35dc <alt_load_section>
   */

  alt_load_section (&__flash_exceptions_start, 
    3670:	01800034 	movhi	r6,0
    3674:	31808904 	addi	r6,r6,548
    3678:	01400034 	movhi	r5,0
    367c:	29400804 	addi	r5,r5,32
    3680:	01000034 	movhi	r4,0
    3684:	21000804 	addi	r4,r4,32
    3688:	00035dc0 	call	35dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    368c:	01800074 	movhi	r6,1
    3690:	31801204 	addi	r6,r6,72
    3694:	01400074 	movhi	r5,1
    3698:	29400004 	addi	r5,r5,0
    369c:	01000034 	movhi	r4,0
    36a0:	21162704 	addi	r4,r4,22684
    36a4:	00035dc0 	call	35dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    36a8:	0004a780 	call	4a78 <alt_dcache_flush_all>
  alt_icache_flush_all();
    36ac:	0004c440 	call	4c44 <alt_icache_flush_all>
}
    36b0:	0001883a 	nop
    36b4:	e037883a 	mov	sp,fp
    36b8:	dfc00117 	ldw	ra,4(sp)
    36bc:	df000017 	ldw	fp,0(sp)
    36c0:	dec00204 	addi	sp,sp,8
    36c4:	f800283a 	ret

000036c8 <alt_get_errno>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    36c8:	defffe04 	addi	sp,sp,-8
    36cc:	dfc00115 	stw	ra,4(sp)
    36d0:	df000015 	stw	fp,0(sp)
    36d4:	d839883a 	mov	fp,sp
  
    36d8:	d0a00817 	ldw	r2,-32736(gp)
    36dc:	10000326 	beq	r2,zero,36ec <alt_get_errno+0x24>
    36e0:	d0a00817 	ldw	r2,-32736(gp)
    36e4:	103ee83a 	callr	r2
    36e8:	00000106 	br	36f0 <alt_get_errno+0x28>
    36ec:	d0a00d04 	addi	r2,gp,-32716
  if (fd) 
    36f0:	e037883a 	mov	sp,fp
    36f4:	dfc00117 	ldw	ra,4(sp)
    36f8:	df000017 	ldw	fp,0(sp)
    36fc:	dec00204 	addi	sp,sp,8
    3700:	f800283a 	ret

00003704 <lseek>:
{
    3704:	defff904 	addi	sp,sp,-28
    3708:	dfc00615 	stw	ra,24(sp)
    370c:	df000515 	stw	fp,20(sp)
    3710:	df000504 	addi	fp,sp,20
    3714:	e13ffd15 	stw	r4,-12(fp)
    3718:	e17ffc15 	stw	r5,-16(fp)
    371c:	e1bffb15 	stw	r6,-20(fp)
  off_t   rc = 0; 
    3720:	e03fff15 	stw	zero,-4(fp)
  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3724:	e0bffd17 	ldw	r2,-12(fp)
    3728:	10000916 	blt	r2,zero,3750 <lseek+0x4c>
    372c:	e0fffd17 	ldw	r3,-12(fp)
    3730:	1805883a 	mov	r2,r3
    3734:	1085883a 	add	r2,r2,r2
    3738:	10c5883a 	add	r2,r2,r3
    373c:	100490ba 	slli	r2,r2,2
    3740:	00c00074 	movhi	r3,1
    3744:	18c16804 	addi	r3,r3,1440
    3748:	10c5883a 	add	r2,r2,r3
    374c:	00000106 	br	3754 <lseek+0x50>
    3750:	0005883a 	mov	r2,zero
    3754:	e0bffe15 	stw	r2,-8(fp)
  if (fd) 
    3758:	e0bffe17 	ldw	r2,-8(fp)
    375c:	10001026 	beq	r2,zero,37a0 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3760:	e0bffe17 	ldw	r2,-8(fp)
    3764:	10800017 	ldw	r2,0(r2)
    3768:	10800717 	ldw	r2,28(r2)
    376c:	10000926 	beq	r2,zero,3794 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3770:	e0bffe17 	ldw	r2,-8(fp)
    3774:	10800017 	ldw	r2,0(r2)
    3778:	10800717 	ldw	r2,28(r2)
    377c:	e1bffb17 	ldw	r6,-20(fp)
    3780:	e17ffc17 	ldw	r5,-16(fp)
    3784:	e13ffe17 	ldw	r4,-8(fp)
    3788:	103ee83a 	callr	r2
    378c:	e0bfff15 	stw	r2,-4(fp)
    3790:	00000506 	br	37a8 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3794:	00bfde84 	movi	r2,-134
    3798:	e0bfff15 	stw	r2,-4(fp)
    379c:	00000206 	br	37a8 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
    37a0:	00bfebc4 	movi	r2,-81
    37a4:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
    37a8:	e0bfff17 	ldw	r2,-4(fp)
    37ac:	1000070e 	bge	r2,zero,37cc <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
    37b0:	00036c80 	call	36c8 <alt_get_errno>
    37b4:	1007883a 	mov	r3,r2
    37b8:	e0bfff17 	ldw	r2,-4(fp)
    37bc:	0085c83a 	sub	r2,zero,r2
    37c0:	18800015 	stw	r2,0(r3)
    rc = -1;
    37c4:	00bfffc4 	movi	r2,-1
    37c8:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
    37cc:	e0bfff17 	ldw	r2,-4(fp)
}
    37d0:	e037883a 	mov	sp,fp
    37d4:	dfc00117 	ldw	ra,4(sp)
    37d8:	df000017 	ldw	fp,0(sp)
    37dc:	dec00204 	addi	sp,sp,8
    37e0:	f800283a 	ret

000037e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    37e4:	defffd04 	addi	sp,sp,-12
    37e8:	dfc00215 	stw	ra,8(sp)
    37ec:	df000115 	stw	fp,4(sp)
    37f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    37f4:	0009883a 	mov	r4,zero
    37f8:	0003cb80 	call	3cb8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    37fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3800:	0003cf40 	call	3cf4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3804:	01800074 	movhi	r6,1
    3808:	31800804 	addi	r6,r6,32
    380c:	01400074 	movhi	r5,1
    3810:	29400804 	addi	r5,r5,32
    3814:	01000074 	movhi	r4,1
    3818:	21000804 	addi	r4,r4,32
    381c:	0004fd00 	call	4fd0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3820:	0004b7c0 	call	4b7c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3824:	01000034 	movhi	r4,0
    3828:	2112f804 	addi	r4,r4,19424
    382c:	000577c0 	call	577c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3830:	d0a01317 	ldw	r2,-32692(gp)
    3834:	d0e01417 	ldw	r3,-32688(gp)
    3838:	d1201517 	ldw	r4,-32684(gp)
    383c:	200d883a 	mov	r6,r4
    3840:	180b883a 	mov	r5,r3
    3844:	1009883a 	mov	r4,r2
    3848:	00002600 	call	260 <main>
    384c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3850:	01000044 	movi	r4,1
    3854:	00032b40 	call	32b4 <close>
  exit (result);
    3858:	e13fff17 	ldw	r4,-4(fp)
    385c:	00016400 	call	1640 <exit>

00003860 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3860:	defffe04 	addi	sp,sp,-8
    3864:	df000115 	stw	fp,4(sp)
    3868:	df000104 	addi	fp,sp,4
    386c:	e13fff15 	stw	r4,-4(fp)
}
    3870:	0001883a 	nop
    3874:	e037883a 	mov	sp,fp
    3878:	df000017 	ldw	fp,0(sp)
    387c:	dec00104 	addi	sp,sp,4
    3880:	f800283a 	ret

00003884 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3884:	defffe04 	addi	sp,sp,-8
    3888:	df000115 	stw	fp,4(sp)
    388c:	df000104 	addi	fp,sp,4
    3890:	e13fff15 	stw	r4,-4(fp)
}
    3894:	0001883a 	nop
    3898:	e037883a 	mov	sp,fp
    389c:	df000017 	ldw	fp,0(sp)
    38a0:	dec00104 	addi	sp,sp,4
    38a4:	f800283a 	ret

000038a8 <alt_get_errno>:
        return -1;
    }
}

#else /* !ALT_USE_DIRECT_DRIVERS */

    38a8:	defffe04 	addi	sp,sp,-8
    38ac:	dfc00115 	stw	ra,4(sp)
    38b0:	df000015 	stw	fp,0(sp)
    38b4:	d839883a 	mov	fp,sp
int ALT_READ (int file, void *ptr, size_t len)
    38b8:	d0a00817 	ldw	r2,-32736(gp)
    38bc:	10000326 	beq	r2,zero,38cc <alt_get_errno+0x24>
    38c0:	d0a00817 	ldw	r2,-32736(gp)
    38c4:	103ee83a 	callr	r2
    38c8:	00000106 	br	38d0 <alt_get_errno+0x28>
    38cc:	d0a00d04 	addi	r2,gp,-32716
{
    38d0:	e037883a 	mov	sp,fp
    38d4:	dfc00117 	ldw	ra,4(sp)
    38d8:	df000017 	ldw	fp,0(sp)
    38dc:	dec00204 	addi	sp,sp,8
    38e0:	f800283a 	ret

000038e4 <read>:
    38e4:	defff904 	addi	sp,sp,-28
    38e8:	dfc00615 	stw	ra,24(sp)
    38ec:	df000515 	stw	fp,20(sp)
    38f0:	df000504 	addi	fp,sp,20
    38f4:	e13ffd15 	stw	r4,-12(fp)
    38f8:	e17ffc15 	stw	r5,-16(fp)
    38fc:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3900:	e0bffd17 	ldw	r2,-12(fp)
    3904:	10000916 	blt	r2,zero,392c <read+0x48>
    3908:	e0fffd17 	ldw	r3,-12(fp)
    390c:	1805883a 	mov	r2,r3
    3910:	1085883a 	add	r2,r2,r2
    3914:	10c5883a 	add	r2,r2,r3
    3918:	100490ba 	slli	r2,r2,2
    391c:	00c00074 	movhi	r3,1
    3920:	18c16804 	addi	r3,r3,1440
    3924:	10c5883a 	add	r2,r2,r3
    3928:	00000106 	br	3930 <read+0x4c>
    392c:	0005883a 	mov	r2,zero
    3930:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3934:	e0bfff17 	ldw	r2,-4(fp)
    3938:	10002226 	beq	r2,zero,39c4 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    393c:	e0bfff17 	ldw	r2,-4(fp)
    3940:	10800217 	ldw	r2,8(r2)
    3944:	108000cc 	andi	r2,r2,3
    3948:	10800060 	cmpeqi	r2,r2,1
    394c:	1000181e 	bne	r2,zero,39b0 <read+0xcc>
        (fd->dev->read))
    3950:	e0bfff17 	ldw	r2,-4(fp)
    3954:	10800017 	ldw	r2,0(r2)
    3958:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    395c:	10001426 	beq	r2,zero,39b0 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3960:	e0bfff17 	ldw	r2,-4(fp)
    3964:	10800017 	ldw	r2,0(r2)
    3968:	10800517 	ldw	r2,20(r2)
    396c:	e0fffb17 	ldw	r3,-20(fp)
    3970:	180d883a 	mov	r6,r3
    3974:	e17ffc17 	ldw	r5,-16(fp)
    3978:	e13fff17 	ldw	r4,-4(fp)
    397c:	103ee83a 	callr	r2
    3980:	e0bffe15 	stw	r2,-8(fp)
    3984:	e0bffe17 	ldw	r2,-8(fp)
    3988:	1000070e 	bge	r2,zero,39a8 <read+0xc4>
        {
          ALT_ERRNO = -rval;
    398c:	00038a80 	call	38a8 <alt_get_errno>
    3990:	1007883a 	mov	r3,r2
    3994:	e0bffe17 	ldw	r2,-8(fp)
    3998:	0085c83a 	sub	r2,zero,r2
    399c:	18800015 	stw	r2,0(r3)
          return -1;
    39a0:	00bfffc4 	movi	r2,-1
    39a4:	00000c06 	br	39d8 <read+0xf4>
        }
        return rval;
    39a8:	e0bffe17 	ldw	r2,-8(fp)
    39ac:	00000a06 	br	39d8 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
    39b0:	00038a80 	call	38a8 <alt_get_errno>
    39b4:	1007883a 	mov	r3,r2
    39b8:	00800344 	movi	r2,13
    39bc:	18800015 	stw	r2,0(r3)
    39c0:	00000406 	br	39d4 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    39c4:	00038a80 	call	38a8 <alt_get_errno>
    39c8:	1007883a 	mov	r3,r2
    39cc:	00801444 	movi	r2,81
    39d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    39d4:	00bfffc4 	movi	r2,-1
}
    39d8:	e037883a 	mov	sp,fp
    39dc:	dfc00117 	ldw	ra,4(sp)
    39e0:	df000017 	ldw	fp,0(sp)
    39e4:	dec00204 	addi	sp,sp,8
    39e8:	f800283a 	ret

000039ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    39ec:	defffe04 	addi	sp,sp,-8
    39f0:	df000115 	stw	fp,4(sp)
    39f4:	df000104 	addi	fp,sp,4
    39f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    39fc:	e0bfff17 	ldw	r2,-4(fp)
    3a00:	108000d0 	cmplti	r2,r2,3
    3a04:	1000101e 	bne	r2,zero,3a48 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    3a08:	e0ffff17 	ldw	r3,-4(fp)
    3a0c:	1805883a 	mov	r2,r3
    3a10:	1085883a 	add	r2,r2,r2
    3a14:	10c5883a 	add	r2,r2,r3
    3a18:	100490ba 	slli	r2,r2,2
    3a1c:	00c00074 	movhi	r3,1
    3a20:	10c7883a 	add	r3,r2,r3
    3a24:	18016a15 	stw	zero,1448(r3)
    alt_fd_list[fd].dev      = 0;
    3a28:	e0ffff17 	ldw	r3,-4(fp)
    3a2c:	1805883a 	mov	r2,r3
    3a30:	1085883a 	add	r2,r2,r2
    3a34:	10c5883a 	add	r2,r2,r3
    3a38:	100490ba 	slli	r2,r2,2
    3a3c:	00c00074 	movhi	r3,1
    3a40:	10c7883a 	add	r3,r2,r3
    3a44:	18016815 	stw	zero,1440(r3)
  }
}
    3a48:	0001883a 	nop
    3a4c:	e037883a 	mov	sp,fp
    3a50:	df000017 	ldw	fp,0(sp)
    3a54:	dec00104 	addi	sp,sp,4
    3a58:	f800283a 	ret

00003a5c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3a5c:	defff904 	addi	sp,sp,-28
    3a60:	df000615 	stw	fp,24(sp)
    3a64:	df000604 	addi	fp,sp,24
    3a68:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
    3a6c:	0005303a 	rdctl	r2,status
    3a70:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3a74:	e0fffd17 	ldw	r3,-12(fp)
    3a78:	00bfff84 	movi	r2,-2
    3a7c:	1884703a 	and	r2,r3,r2
    3a80:	1001703a 	wrctl	status,r2
  return context;
    3a84:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3a88:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3a8c:	d0a00917 	ldw	r2,-32732(gp)
    3a90:	10c000c4 	addi	r3,r2,3
    3a94:	00bfff04 	movi	r2,-4
    3a98:	1884703a 	and	r2,r3,r2
    3a9c:	d0a00915 	stw	r2,-32732(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3aa0:	d0e00917 	ldw	r3,-32732(gp)
    3aa4:	e0bffa17 	ldw	r2,-24(fp)
    3aa8:	1887883a 	add	r3,r3,r2
    3aac:	008000b4 	movhi	r2,2
    3ab0:	10a00004 	addi	r2,r2,-32768
    3ab4:	10c0072e 	bgeu	r2,r3,3ad4 <sbrk+0x78>
    3ab8:	e0bfff17 	ldw	r2,-4(fp)
    3abc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    3ac0:	e0bffc17 	ldw	r2,-16(fp)
    3ac4:	1001703a 	wrctl	status,r2
}
    3ac8:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3acc:	00bfffc4 	movi	r2,-1
    3ad0:	00000c06 	br	3b04 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    3ad4:	d0a00917 	ldw	r2,-32732(gp)
    3ad8:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
    3adc:	d0e00917 	ldw	r3,-32732(gp)
    3ae0:	e0bffa17 	ldw	r2,-24(fp)
    3ae4:	1885883a 	add	r2,r3,r2
    3ae8:	d0a00915 	stw	r2,-32732(gp)
    3aec:	e0bfff17 	ldw	r2,-4(fp)
    3af0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    3af4:	e0bffb17 	ldw	r2,-20(fp)
    3af8:	1001703a 	wrctl	status,r2
}
    3afc:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3b00:	e0bffe17 	ldw	r2,-8(fp)
} 
    3b04:	e037883a 	mov	sp,fp
    3b08:	df000017 	ldw	fp,0(sp)
    3b0c:	dec00104 	addi	sp,sp,4
    3b10:	f800283a 	ret

00003b14 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    3b14:	defffd04 	addi	sp,sp,-12
    3b18:	dfc00215 	stw	ra,8(sp)
    3b1c:	df000115 	stw	fp,4(sp)
    3b20:	df000104 	addi	fp,sp,4
    3b24:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    3b28:	e13fff17 	ldw	r4,-4(fp)
    3b2c:	00049200 	call	4920 <alt_busy_sleep>
}
    3b30:	e037883a 	mov	sp,fp
    3b34:	dfc00117 	ldw	ra,4(sp)
    3b38:	df000017 	ldw	fp,0(sp)
    3b3c:	dec00204 	addi	sp,sp,8
    3b40:	f800283a 	ret

00003b44 <alt_get_errno>:
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
    3b44:	defffe04 	addi	sp,sp,-8
    3b48:	dfc00115 	stw	ra,4(sp)
    3b4c:	df000015 	stw	fp,0(sp)
    3b50:	d839883a 	mov	fp,sp
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    3b54:	d0a00817 	ldw	r2,-32736(gp)
    3b58:	10000326 	beq	r2,zero,3b68 <alt_get_errno+0x24>
    3b5c:	d0a00817 	ldw	r2,-32736(gp)
    3b60:	103ee83a 	callr	r2
    3b64:	00000106 	br	3b6c <alt_get_errno+0x28>
    3b68:	d0a00d04 	addi	r2,gp,-32716
#endif /* ALT_STDERR_PRESENT */
    3b6c:	e037883a 	mov	sp,fp
    3b70:	dfc00117 	ldw	ra,4(sp)
    3b74:	df000017 	ldw	fp,0(sp)
    3b78:	dec00204 	addi	sp,sp,8
    3b7c:	f800283a 	ret

00003b80 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3b80:	defff904 	addi	sp,sp,-28
    3b84:	dfc00615 	stw	ra,24(sp)
    3b88:	df000515 	stw	fp,20(sp)
    3b8c:	df000504 	addi	fp,sp,20
    3b90:	e13ffd15 	stw	r4,-12(fp)
    3b94:	e17ffc15 	stw	r5,-16(fp)
    3b98:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3b9c:	e0bffd17 	ldw	r2,-12(fp)
    3ba0:	10000916 	blt	r2,zero,3bc8 <write+0x48>
    3ba4:	e0fffd17 	ldw	r3,-12(fp)
    3ba8:	1805883a 	mov	r2,r3
    3bac:	1085883a 	add	r2,r2,r2
    3bb0:	10c5883a 	add	r2,r2,r3
    3bb4:	100490ba 	slli	r2,r2,2
    3bb8:	00c00074 	movhi	r3,1
    3bbc:	18c16804 	addi	r3,r3,1440
    3bc0:	10c5883a 	add	r2,r2,r3
    3bc4:	00000106 	br	3bcc <write+0x4c>
    3bc8:	0005883a 	mov	r2,zero
    3bcc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3bd0:	e0bfff17 	ldw	r2,-4(fp)
    3bd4:	10002126 	beq	r2,zero,3c5c <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3bd8:	e0bfff17 	ldw	r2,-4(fp)
    3bdc:	10800217 	ldw	r2,8(r2)
    3be0:	108000cc 	andi	r2,r2,3
    3be4:	10001826 	beq	r2,zero,3c48 <write+0xc8>
    3be8:	e0bfff17 	ldw	r2,-4(fp)
    3bec:	10800017 	ldw	r2,0(r2)
    3bf0:	10800617 	ldw	r2,24(r2)
    3bf4:	10001426 	beq	r2,zero,3c48 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3bf8:	e0bfff17 	ldw	r2,-4(fp)
    3bfc:	10800017 	ldw	r2,0(r2)
    3c00:	10800617 	ldw	r2,24(r2)
    3c04:	e0fffb17 	ldw	r3,-20(fp)
    3c08:	180d883a 	mov	r6,r3
    3c0c:	e17ffc17 	ldw	r5,-16(fp)
    3c10:	e13fff17 	ldw	r4,-4(fp)
    3c14:	103ee83a 	callr	r2
    3c18:	e0bffe15 	stw	r2,-8(fp)
    3c1c:	e0bffe17 	ldw	r2,-8(fp)
    3c20:	1000070e 	bge	r2,zero,3c40 <write+0xc0>
      {
        ALT_ERRNO = -rval;
    3c24:	0003b440 	call	3b44 <alt_get_errno>
    3c28:	1007883a 	mov	r3,r2
    3c2c:	e0bffe17 	ldw	r2,-8(fp)
    3c30:	0085c83a 	sub	r2,zero,r2
    3c34:	18800015 	stw	r2,0(r3)
        return -1;
    3c38:	00bfffc4 	movi	r2,-1
    3c3c:	00000c06 	br	3c70 <write+0xf0>
      }
      return rval;
    3c40:	e0bffe17 	ldw	r2,-8(fp)
    3c44:	00000a06 	br	3c70 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3c48:	0003b440 	call	3b44 <alt_get_errno>
    3c4c:	1007883a 	mov	r3,r2
    3c50:	00800344 	movi	r2,13
    3c54:	18800015 	stw	r2,0(r3)
    3c58:	00000406 	br	3c6c <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3c5c:	0003b440 	call	3b44 <alt_get_errno>
    3c60:	1007883a 	mov	r3,r2
    3c64:	00801444 	movi	r2,81
    3c68:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3c6c:	00bfffc4 	movi	r2,-1
}
    3c70:	e037883a 	mov	sp,fp
    3c74:	dfc00117 	ldw	ra,4(sp)
    3c78:	df000017 	ldw	fp,0(sp)
    3c7c:	dec00204 	addi	sp,sp,8
    3c80:	f800283a 	ret

00003c84 <alt_dev_reg>:
    3c84:	defffd04 	addi	sp,sp,-12
    3c88:	dfc00215 	stw	ra,8(sp)
    3c8c:	df000115 	stw	fp,4(sp)
    3c90:	df000104 	addi	fp,sp,4
    3c94:	e13fff15 	stw	r4,-4(fp)
    3c98:	d1600504 	addi	r5,gp,-32748
    3c9c:	e13fff17 	ldw	r4,-4(fp)
    3ca0:	0004ad40 	call	4ad4 <alt_dev_llist_insert>
    3ca4:	e037883a 	mov	sp,fp
    3ca8:	dfc00117 	ldw	ra,4(sp)
    3cac:	df000017 	ldw	fp,0(sp)
    3cb0:	dec00204 	addi	sp,sp,8
    3cb4:	f800283a 	ret

00003cb8 <alt_irq_init>:
{
    3cb8:	defffd04 	addi	sp,sp,-12
    3cbc:	dfc00215 	stw	ra,8(sp)
    3cc0:	df000115 	stw	fp,4(sp)
    3cc4:	df000104 	addi	fp,sp,4
    3cc8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    3ccc:	00054940 	call	5494 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3cd0:	00800044 	movi	r2,1
    3cd4:	1001703a 	wrctl	status,r2
}
    3cd8:	0001883a 	nop
}
    3cdc:	0001883a 	nop
    3ce0:	e037883a 	mov	sp,fp
    3ce4:	dfc00117 	ldw	ra,4(sp)
    3ce8:	df000017 	ldw	fp,0(sp)
    3cec:	dec00204 	addi	sp,sp,8
    3cf0:	f800283a 	ret

00003cf4 <alt_sys_init>:
{
    3cf4:	defffe04 	addi	sp,sp,-8
    3cf8:	dfc00115 	stw	ra,4(sp)
    3cfc:	df000015 	stw	fp,0(sp)
    3d00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    3d04:	018003c4 	movi	r6,15
    3d08:	000b883a 	mov	r5,zero
    3d0c:	01000074 	movhi	r4,1
    3d10:	2101d204 	addi	r4,r4,1864
    3d14:	0003ea00 	call	3ea0 <altera_avalon_jtag_uart_init>
    3d18:	01000074 	movhi	r4,1
    3d1c:	2101c804 	addi	r4,r4,1824
    3d20:	0003c840 	call	3c84 <alt_dev_reg>
}
    3d24:	0001883a 	nop
    3d28:	e037883a 	mov	sp,fp
    3d2c:	dfc00117 	ldw	ra,4(sp)
    3d30:	df000017 	ldw	fp,0(sp)
    3d34:	dec00204 	addi	sp,sp,8
    3d38:	f800283a 	ret

00003d3c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3d3c:	defffa04 	addi	sp,sp,-24
    3d40:	dfc00515 	stw	ra,20(sp)
    3d44:	df000415 	stw	fp,16(sp)
    3d48:	df000404 	addi	fp,sp,16
    3d4c:	e13ffe15 	stw	r4,-8(fp)
    3d50:	e17ffd15 	stw	r5,-12(fp)
    3d54:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3d58:	e0bffe17 	ldw	r2,-8(fp)
    3d5c:	10800017 	ldw	r2,0(r2)
    3d60:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3d64:	e0bfff17 	ldw	r2,-4(fp)
    3d68:	10c00a04 	addi	r3,r2,40
    3d6c:	e0bffe17 	ldw	r2,-8(fp)
    3d70:	10800217 	ldw	r2,8(r2)
    3d74:	100f883a 	mov	r7,r2
    3d78:	e1bffc17 	ldw	r6,-16(fp)
    3d7c:	e17ffd17 	ldw	r5,-12(fp)
    3d80:	1809883a 	mov	r4,r3
    3d84:	00043780 	call	4378 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3d88:	e037883a 	mov	sp,fp
    3d8c:	dfc00117 	ldw	ra,4(sp)
    3d90:	df000017 	ldw	fp,0(sp)
    3d94:	dec00204 	addi	sp,sp,8
    3d98:	f800283a 	ret

00003d9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3d9c:	defffa04 	addi	sp,sp,-24
    3da0:	dfc00515 	stw	ra,20(sp)
    3da4:	df000415 	stw	fp,16(sp)
    3da8:	df000404 	addi	fp,sp,16
    3dac:	e13ffe15 	stw	r4,-8(fp)
    3db0:	e17ffd15 	stw	r5,-12(fp)
    3db4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3db8:	e0bffe17 	ldw	r2,-8(fp)
    3dbc:	10800017 	ldw	r2,0(r2)
    3dc0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3dc4:	e0bfff17 	ldw	r2,-4(fp)
    3dc8:	10c00a04 	addi	r3,r2,40
    3dcc:	e0bffe17 	ldw	r2,-8(fp)
    3dd0:	10800217 	ldw	r2,8(r2)
    3dd4:	100f883a 	mov	r7,r2
    3dd8:	e1bffc17 	ldw	r6,-16(fp)
    3ddc:	e17ffd17 	ldw	r5,-12(fp)
    3de0:	1809883a 	mov	r4,r3
    3de4:	00045980 	call	4598 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3de8:	e037883a 	mov	sp,fp
    3dec:	dfc00117 	ldw	ra,4(sp)
    3df0:	df000017 	ldw	fp,0(sp)
    3df4:	dec00204 	addi	sp,sp,8
    3df8:	f800283a 	ret

00003dfc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3dfc:	defffc04 	addi	sp,sp,-16
    3e00:	dfc00315 	stw	ra,12(sp)
    3e04:	df000215 	stw	fp,8(sp)
    3e08:	df000204 	addi	fp,sp,8
    3e0c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3e10:	e0bffe17 	ldw	r2,-8(fp)
    3e14:	10800017 	ldw	r2,0(r2)
    3e18:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3e1c:	e0bfff17 	ldw	r2,-4(fp)
    3e20:	10c00a04 	addi	r3,r2,40
    3e24:	e0bffe17 	ldw	r2,-8(fp)
    3e28:	10800217 	ldw	r2,8(r2)
    3e2c:	100b883a 	mov	r5,r2
    3e30:	1809883a 	mov	r4,r3
    3e34:	000421c0 	call	421c <altera_avalon_jtag_uart_close>
}
    3e38:	e037883a 	mov	sp,fp
    3e3c:	dfc00117 	ldw	ra,4(sp)
    3e40:	df000017 	ldw	fp,0(sp)
    3e44:	dec00204 	addi	sp,sp,8
    3e48:	f800283a 	ret

00003e4c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3e4c:	defffa04 	addi	sp,sp,-24
    3e50:	dfc00515 	stw	ra,20(sp)
    3e54:	df000415 	stw	fp,16(sp)
    3e58:	df000404 	addi	fp,sp,16
    3e5c:	e13ffe15 	stw	r4,-8(fp)
    3e60:	e17ffd15 	stw	r5,-12(fp)
    3e64:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3e68:	e0bffe17 	ldw	r2,-8(fp)
    3e6c:	10800017 	ldw	r2,0(r2)
    3e70:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    3e74:	e0bfff17 	ldw	r2,-4(fp)
    3e78:	10800a04 	addi	r2,r2,40
    3e7c:	e1bffc17 	ldw	r6,-16(fp)
    3e80:	e17ffd17 	ldw	r5,-12(fp)
    3e84:	1009883a 	mov	r4,r2
    3e88:	00042840 	call	4284 <altera_avalon_jtag_uart_ioctl>
}
    3e8c:	e037883a 	mov	sp,fp
    3e90:	dfc00117 	ldw	ra,4(sp)
    3e94:	df000017 	ldw	fp,0(sp)
    3e98:	dec00204 	addi	sp,sp,8
    3e9c:	f800283a 	ret

00003ea0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    3ea0:	defffa04 	addi	sp,sp,-24
    3ea4:	dfc00515 	stw	ra,20(sp)
    3ea8:	df000415 	stw	fp,16(sp)
    3eac:	df000404 	addi	fp,sp,16
    3eb0:	e13fff15 	stw	r4,-4(fp)
    3eb4:	e17ffe15 	stw	r5,-8(fp)
    3eb8:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3ebc:	e0bfff17 	ldw	r2,-4(fp)
    3ec0:	00c00044 	movi	r3,1
    3ec4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    3ec8:	e0bfff17 	ldw	r2,-4(fp)
    3ecc:	10800017 	ldw	r2,0(r2)
    3ed0:	10800104 	addi	r2,r2,4
    3ed4:	1007883a 	mov	r3,r2
    3ed8:	e0bfff17 	ldw	r2,-4(fp)
    3edc:	10800817 	ldw	r2,32(r2)
    3ee0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    3ee4:	e0bffe17 	ldw	r2,-8(fp)
    3ee8:	e0fffd17 	ldw	r3,-12(fp)
    3eec:	d8000015 	stw	zero,0(sp)
    3ef0:	e1ffff17 	ldw	r7,-4(fp)
    3ef4:	01800034 	movhi	r6,0
    3ef8:	318fd804 	addi	r6,r6,16224
    3efc:	180b883a 	mov	r5,r3
    3f00:	1009883a 	mov	r4,r2
    3f04:	0004c640 	call	4c64 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    3f08:	e0bfff17 	ldw	r2,-4(fp)
    3f0c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    3f10:	e0bfff17 	ldw	r2,-4(fp)
    3f14:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3f18:	d0e01717 	ldw	r3,-32676(gp)
    3f1c:	e1ffff17 	ldw	r7,-4(fp)
    3f20:	01800034 	movhi	r6,0
    3f24:	31905d04 	addi	r6,r6,16756
    3f28:	180b883a 	mov	r5,r3
    3f2c:	1009883a 	mov	r4,r2
    3f30:	00047c00 	call	47c0 <alt_alarm_start>
    3f34:	1000040e 	bge	r2,zero,3f48 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    3f38:	e0ffff17 	ldw	r3,-4(fp)
    3f3c:	00a00034 	movhi	r2,32768
    3f40:	10bfffc4 	addi	r2,r2,-1
    3f44:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    3f48:	0001883a 	nop
    3f4c:	e037883a 	mov	sp,fp
    3f50:	dfc00117 	ldw	ra,4(sp)
    3f54:	df000017 	ldw	fp,0(sp)
    3f58:	dec00204 	addi	sp,sp,8
    3f5c:	f800283a 	ret

00003f60 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    3f60:	defff704 	addi	sp,sp,-36
    3f64:	df000815 	stw	fp,32(sp)
    3f68:	df000804 	addi	fp,sp,32
    3f6c:	e13ff815 	stw	r4,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    3f70:	e0bff817 	ldw	r2,-32(fp)
    3f74:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
    3f78:	e0bffc17 	ldw	r2,-16(fp)
    3f7c:	10800017 	ldw	r2,0(r2)
    3f80:	e0bffb15 	stw	r2,-20(fp)
  unsigned int postflag=0;
    3f84:	e03fff15 	stw	zero,-4(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3f88:	e0bffb17 	ldw	r2,-20(fp)
    3f8c:	10800104 	addi	r2,r2,4
    3f90:	10800037 	ldwio	r2,0(r2)
    3f94:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    3f98:	e0bffa17 	ldw	r2,-24(fp)
    3f9c:	1080c00c 	andi	r2,r2,768
    3fa0:	10006e26 	beq	r2,zero,415c <altera_avalon_jtag_uart_irq+0x1fc>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    3fa4:	e0bffa17 	ldw	r2,-24(fp)
    3fa8:	1080400c 	andi	r2,r2,256
    3fac:	10003526 	beq	r2,zero,4084 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    3fb0:	00800074 	movhi	r2,1
    3fb4:	e0bffe15 	stw	r2,-8(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3fb8:	e0bffc17 	ldw	r2,-16(fp)
    3fbc:	10800a17 	ldw	r2,40(r2)
    3fc0:	10800044 	addi	r2,r2,1
    3fc4:	1081ffcc 	andi	r2,r2,2047
    3fc8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    3fcc:	e0bffc17 	ldw	r2,-16(fp)
    3fd0:	10800b17 	ldw	r2,44(r2)
    3fd4:	e0fff917 	ldw	r3,-28(fp)
    3fd8:	18801526 	beq	r3,r2,4030 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    3fdc:	e0bffb17 	ldw	r2,-20(fp)
    3fe0:	10800037 	ldwio	r2,0(r2)
    3fe4:	e0bffe15 	stw	r2,-8(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    3fe8:	e0bffe17 	ldw	r2,-8(fp)
    3fec:	10a0000c 	andi	r2,r2,32768
    3ff0:	10001126 	beq	r2,zero,4038 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    3ff4:	e0bffc17 	ldw	r2,-16(fp)
    3ff8:	10800a17 	ldw	r2,40(r2)
    3ffc:	e0fffe17 	ldw	r3,-8(fp)
    4000:	1809883a 	mov	r4,r3
    4004:	e0fffc17 	ldw	r3,-16(fp)
    4008:	1885883a 	add	r2,r3,r2
    400c:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4010:	e0bffc17 	ldw	r2,-16(fp)
    4014:	10800a17 	ldw	r2,40(r2)
    4018:	10800044 	addi	r2,r2,1
    401c:	10c1ffcc 	andi	r3,r2,2047
    4020:	e0bffc17 	ldw	r2,-16(fp)
    4024:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    4028:	0001883a 	nop
      {
    402c:	003fe206 	br	3fb8 <altera_avalon_jtag_uart_irq+0x58>
          break;
    4030:	0001883a 	nop
    4034:	00000106 	br	403c <altera_avalon_jtag_uart_irq+0xdc>
          break;
    4038:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    403c:	e0bffe17 	ldw	r2,-8(fp)
    4040:	00ffffd4 	movui	r3,65535
    4044:	18800f2e 	bgeu	r3,r2,4084 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4048:	e0bffc17 	ldw	r2,-16(fp)
    404c:	10c00817 	ldw	r3,32(r2)
    4050:	00bfff84 	movi	r2,-2
    4054:	1886703a 	and	r3,r3,r2
    4058:	e0bffc17 	ldw	r2,-16(fp)
    405c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    4060:	e0bffb17 	ldw	r2,-20(fp)
    4064:	10800104 	addi	r2,r2,4
    4068:	1007883a 	mov	r3,r2
    406c:	e0bffc17 	ldw	r2,-16(fp)
    4070:	10800817 	ldw	r2,32(r2)
    4074:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4078:	e0bffb17 	ldw	r2,-20(fp)
    407c:	10800104 	addi	r2,r2,4
    4080:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    4084:	e0bffa17 	ldw	r2,-24(fp)
    4088:	1080800c 	andi	r2,r2,512
    408c:	103fbe26 	beq	r2,zero,3f88 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    4090:	e0bffa17 	ldw	r2,-24(fp)
    4094:	1004d43a 	srli	r2,r2,16
    4098:	e0bffd15 	stw	r2,-12(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    409c:	00001506 	br	40f4 <altera_avalon_jtag_uart_irq+0x194>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    40a0:	e0bffb17 	ldw	r2,-20(fp)
    40a4:	e0fffc17 	ldw	r3,-16(fp)
    40a8:	18c00d17 	ldw	r3,52(r3)
    40ac:	e13ffc17 	ldw	r4,-16(fp)
    40b0:	20c7883a 	add	r3,r4,r3
    40b4:	18c20e03 	ldbu	r3,2104(r3)
    40b8:	18c03fcc 	andi	r3,r3,255
    40bc:	18c0201c 	xori	r3,r3,128
    40c0:	18ffe004 	addi	r3,r3,-128
    40c4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    40c8:	e0bffc17 	ldw	r2,-16(fp)
    40cc:	10800d17 	ldw	r2,52(r2)
    40d0:	10800044 	addi	r2,r2,1
    40d4:	10c1ffcc 	andi	r3,r2,2047
    40d8:	e0bffc17 	ldw	r2,-16(fp)
    40dc:	10c00d15 	stw	r3,52(r2)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
    40e0:	00800044 	movi	r2,1
    40e4:	e0bfff15 	stw	r2,-4(fp)

        space--;
    40e8:	e0bffd17 	ldw	r2,-12(fp)
    40ec:	10bfffc4 	addi	r2,r2,-1
    40f0:	e0bffd15 	stw	r2,-12(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
    40f4:	e0bffd17 	ldw	r2,-12(fp)
    40f8:	10000526 	beq	r2,zero,4110 <altera_avalon_jtag_uart_irq+0x1b0>
    40fc:	e0bffc17 	ldw	r2,-16(fp)
    4100:	10c00d17 	ldw	r3,52(r2)
    4104:	e0bffc17 	ldw	r2,-16(fp)
    4108:	10800c17 	ldw	r2,48(r2)
    410c:	18bfe41e 	bne	r3,r2,40a0 <altera_avalon_jtag_uart_irq+0x140>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
    4110:	e0bffd17 	ldw	r2,-12(fp)
    4114:	103f9c26 	beq	r2,zero,3f88 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4118:	e0bffc17 	ldw	r2,-16(fp)
    411c:	10c00817 	ldw	r3,32(r2)
    4120:	00bfff44 	movi	r2,-3
    4124:	1886703a 	and	r3,r3,r2
    4128:	e0bffc17 	ldw	r2,-16(fp)
    412c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4130:	e0bffc17 	ldw	r2,-16(fp)
    4134:	10800017 	ldw	r2,0(r2)
    4138:	10800104 	addi	r2,r2,4
    413c:	1007883a 	mov	r3,r2
    4140:	e0bffc17 	ldw	r2,-16(fp)
    4144:	10800817 	ldw	r2,32(r2)
    4148:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    414c:	e0bffb17 	ldw	r2,-20(fp)
    4150:	10800104 	addi	r2,r2,4
    4154:	10800037 	ldwio	r2,0(r2)
  {
    4158:	003f8b06 	br	3f88 <altera_avalon_jtag_uart_irq+0x28>
      break;
    415c:	0001883a 	nop
      }
    }
  }
}
    4160:	0001883a 	nop
    4164:	e037883a 	mov	sp,fp
    4168:	df000017 	ldw	fp,0(sp)
    416c:	dec00104 	addi	sp,sp,4
    4170:	f800283a 	ret

00004174 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    4174:	defffc04 	addi	sp,sp,-16
    4178:	df000315 	stw	fp,12(sp)
    417c:	df000304 	addi	fp,sp,12
    4180:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    4184:	e0bffd17 	ldw	r2,-12(fp)
    4188:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    418c:	e0bfff17 	ldw	r2,-4(fp)
    4190:	10800017 	ldw	r2,0(r2)
    4194:	10800104 	addi	r2,r2,4
    4198:	10800037 	ldwio	r2,0(r2)
    419c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    41a0:	e0bffe17 	ldw	r2,-8(fp)
    41a4:	1081000c 	andi	r2,r2,1024
    41a8:	10000b26 	beq	r2,zero,41d8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    41ac:	e0bfff17 	ldw	r2,-4(fp)
    41b0:	10800017 	ldw	r2,0(r2)
    41b4:	10800104 	addi	r2,r2,4
    41b8:	1007883a 	mov	r3,r2
    41bc:	e0bfff17 	ldw	r2,-4(fp)
    41c0:	10800817 	ldw	r2,32(r2)
    41c4:	10810014 	ori	r2,r2,1024
    41c8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    41cc:	e0bfff17 	ldw	r2,-4(fp)
    41d0:	10000915 	stw	zero,36(r2)
    41d4:	00000c06 	br	4208 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    41d8:	e0bfff17 	ldw	r2,-4(fp)
    41dc:	10c00917 	ldw	r3,36(r2)
    41e0:	00a00034 	movhi	r2,32768
    41e4:	10bfff04 	addi	r2,r2,-4
    41e8:	10c00736 	bltu	r2,r3,4208 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    41ec:	e0bfff17 	ldw	r2,-4(fp)
    41f0:	10800917 	ldw	r2,36(r2)
    41f4:	10c00044 	addi	r3,r2,1
    41f8:	e0bfff17 	ldw	r2,-4(fp)
    41fc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    4200:	e0bfff17 	ldw	r2,-4(fp)
    4204:	10800917 	ldw	r2,36(r2)
    4208:	d0a01717 	ldw	r2,-32676(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    420c:	e037883a 	mov	sp,fp
    4210:	df000017 	ldw	fp,0(sp)
    4214:	dec00104 	addi	sp,sp,4
    4218:	f800283a 	ret

0000421c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    421c:	defffd04 	addi	sp,sp,-12
    4220:	df000215 	stw	fp,8(sp)
    4224:	df000204 	addi	fp,sp,8
    4228:	e13fff15 	stw	r4,-4(fp)
    422c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4230:	00000506 	br	4248 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    4234:	e0bffe17 	ldw	r2,-8(fp)
    4238:	1090000c 	andi	r2,r2,16384
    423c:	10000226 	beq	r2,zero,4248 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    4240:	00bffd44 	movi	r2,-11
    4244:	00000b06 	br	4274 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4248:	e0bfff17 	ldw	r2,-4(fp)
    424c:	10c00d17 	ldw	r3,52(r2)
    4250:	e0bfff17 	ldw	r2,-4(fp)
    4254:	10800c17 	ldw	r2,48(r2)
    4258:	18800526 	beq	r3,r2,4270 <altera_avalon_jtag_uart_close+0x54>
    425c:	e0bfff17 	ldw	r2,-4(fp)
    4260:	10c00917 	ldw	r3,36(r2)
    4264:	e0bfff17 	ldw	r2,-4(fp)
    4268:	10800117 	ldw	r2,4(r2)
    426c:	18bff136 	bltu	r3,r2,4234 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    4270:	0005883a 	mov	r2,zero
}
    4274:	e037883a 	mov	sp,fp
    4278:	df000017 	ldw	fp,0(sp)
    427c:	dec00104 	addi	sp,sp,4
    4280:	f800283a 	ret

00004284 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    4284:	defffa04 	addi	sp,sp,-24
    4288:	df000515 	stw	fp,20(sp)
    428c:	df000504 	addi	fp,sp,20
    4290:	e13ffd15 	stw	r4,-12(fp)
    4294:	e17ffc15 	stw	r5,-16(fp)
    4298:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
    429c:	00bff9c4 	movi	r2,-25
    42a0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
    42a4:	e0bffc17 	ldw	r2,-16(fp)
    42a8:	109a8060 	cmpeqi	r2,r2,27137
    42ac:	1000041e 	bne	r2,zero,42c0 <altera_avalon_jtag_uart_ioctl+0x3c>
    42b0:	e0bffc17 	ldw	r2,-16(fp)
    42b4:	109a80a0 	cmpeqi	r2,r2,27138
    42b8:	1000181e 	bne	r2,zero,431c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    42bc:	00002906 	br	4364 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    42c0:	e0bffd17 	ldw	r2,-12(fp)
    42c4:	10c00117 	ldw	r3,4(r2)
    42c8:	00a00034 	movhi	r2,32768
    42cc:	10bfffc4 	addi	r2,r2,-1
    42d0:	18802126 	beq	r3,r2,4358 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
    42d4:	e0bffb17 	ldw	r2,-20(fp)
    42d8:	10800017 	ldw	r2,0(r2)
    42dc:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    42e0:	e0bffe17 	ldw	r2,-8(fp)
    42e4:	10800090 	cmplti	r2,r2,2
    42e8:	1000061e 	bne	r2,zero,4304 <altera_avalon_jtag_uart_ioctl+0x80>
    42ec:	e0fffe17 	ldw	r3,-8(fp)
    42f0:	00a00034 	movhi	r2,32768
    42f4:	10bfffc4 	addi	r2,r2,-1
    42f8:	18800226 	beq	r3,r2,4304 <altera_avalon_jtag_uart_ioctl+0x80>
    42fc:	e0bffe17 	ldw	r2,-8(fp)
    4300:	00000206 	br	430c <altera_avalon_jtag_uart_ioctl+0x88>
    4304:	00a00034 	movhi	r2,32768
    4308:	10bfff84 	addi	r2,r2,-2
    430c:	e0fffd17 	ldw	r3,-12(fp)
    4310:	18800115 	stw	r2,4(r3)
      rc = 0;
    4314:	e03fff15 	stw	zero,-4(fp)
    break;
    4318:	00000f06 	br	4358 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
    431c:	e0bffd17 	ldw	r2,-12(fp)
    4320:	10c00117 	ldw	r3,4(r2)
    4324:	00a00034 	movhi	r2,32768
    4328:	10bfffc4 	addi	r2,r2,-1
    432c:	18800c26 	beq	r3,r2,4360 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    4330:	e0bffd17 	ldw	r2,-12(fp)
    4334:	10c00917 	ldw	r3,36(r2)
    4338:	e0bffd17 	ldw	r2,-12(fp)
    433c:	10800117 	ldw	r2,4(r2)
    4340:	1885803a 	cmpltu	r2,r3,r2
    4344:	10c03fcc 	andi	r3,r2,255
    4348:	e0bffb17 	ldw	r2,-20(fp)
    434c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    4350:	e03fff15 	stw	zero,-4(fp)
    break;
    4354:	00000206 	br	4360 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
    4358:	0001883a 	nop
    435c:	00000106 	br	4364 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
    4360:	0001883a 	nop
  }

  return rc;
    4364:	e0bfff17 	ldw	r2,-4(fp)
}
    4368:	e037883a 	mov	sp,fp
    436c:	df000017 	ldw	fp,0(sp)
    4370:	dec00104 	addi	sp,sp,4
    4374:	f800283a 	ret

00004378 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    4378:	defff304 	addi	sp,sp,-52
    437c:	dfc00c15 	stw	ra,48(sp)
    4380:	df000b15 	stw	fp,44(sp)
    4384:	df000b04 	addi	fp,sp,44
    4388:	e13ff815 	stw	r4,-32(fp)
    438c:	e17ff715 	stw	r5,-36(fp)
    4390:	e1bff615 	stw	r6,-40(fp)
    4394:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
    4398:	e0bff717 	ldw	r2,-36(fp)
    439c:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    43a0:	00004706 	br	44c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    43a4:	e0bff817 	ldw	r2,-32(fp)
    43a8:	10800a17 	ldw	r2,40(r2)
    43ac:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
    43b0:	e0bff817 	ldw	r2,-32(fp)
    43b4:	10800b17 	ldw	r2,44(r2)
    43b8:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
    43bc:	e0fffd17 	ldw	r3,-12(fp)
    43c0:	e0bffc17 	ldw	r2,-16(fp)
    43c4:	18800536 	bltu	r3,r2,43dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    43c8:	e0fffd17 	ldw	r3,-12(fp)
    43cc:	e0bffc17 	ldw	r2,-16(fp)
    43d0:	1885c83a 	sub	r2,r3,r2
    43d4:	e0bffe15 	stw	r2,-8(fp)
    43d8:	00000406 	br	43ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    43dc:	00c20004 	movi	r3,2048
    43e0:	e0bffc17 	ldw	r2,-16(fp)
    43e4:	1885c83a 	sub	r2,r3,r2
    43e8:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    43ec:	e0bffe17 	ldw	r2,-8(fp)
    43f0:	10001e26 	beq	r2,zero,446c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    43f4:	e0fff617 	ldw	r3,-40(fp)
    43f8:	e0bffe17 	ldw	r2,-8(fp)
    43fc:	1880022e 	bgeu	r3,r2,4408 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    4400:	e0bff617 	ldw	r2,-40(fp)
    4404:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    4408:	e0bff817 	ldw	r2,-32(fp)
    440c:	10c00e04 	addi	r3,r2,56
    4410:	e0bffc17 	ldw	r2,-16(fp)
    4414:	1885883a 	add	r2,r3,r2
    4418:	e1bffe17 	ldw	r6,-8(fp)
    441c:	100b883a 	mov	r5,r2
    4420:	e13fff17 	ldw	r4,-4(fp)
    4424:	000108c0 	call	108c <memcpy>
      ptr   += n;
    4428:	e0ffff17 	ldw	r3,-4(fp)
    442c:	e0bffe17 	ldw	r2,-8(fp)
    4430:	1885883a 	add	r2,r3,r2
    4434:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
    4438:	e0fff617 	ldw	r3,-40(fp)
    443c:	e0bffe17 	ldw	r2,-8(fp)
    4440:	1885c83a 	sub	r2,r3,r2
    4444:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4448:	e0fffc17 	ldw	r3,-16(fp)
    444c:	e0bffe17 	ldw	r2,-8(fp)
    4450:	1885883a 	add	r2,r3,r2
    4454:	10c1ffcc 	andi	r3,r2,2047
    4458:	e0bff817 	ldw	r2,-32(fp)
    445c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4460:	e0bff617 	ldw	r2,-40(fp)
    4464:	00bfcf16 	blt	zero,r2,43a4 <altera_avalon_jtag_uart_read+0x2c>
    4468:	00000106 	br	4470 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
    446c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    4470:	e0ffff17 	ldw	r3,-4(fp)
    4474:	e0bff717 	ldw	r2,-36(fp)
    4478:	1880141e 	bne	r3,r2,44cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    447c:	e0bff517 	ldw	r2,-44(fp)
    4480:	1090000c 	andi	r2,r2,16384
    4484:	1000131e 	bne	r2,zero,44d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    4488:	0001883a 	nop
    448c:	e0bff817 	ldw	r2,-32(fp)
    4490:	10800a17 	ldw	r2,40(r2)
    4494:	e0fffd17 	ldw	r3,-12(fp)
    4498:	1880051e 	bne	r3,r2,44b0 <altera_avalon_jtag_uart_read+0x138>
    449c:	e0bff817 	ldw	r2,-32(fp)
    44a0:	10c00917 	ldw	r3,36(r2)
    44a4:	e0bff817 	ldw	r2,-32(fp)
    44a8:	10800117 	ldw	r2,4(r2)
    44ac:	18bff736 	bltu	r3,r2,448c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    44b0:	e0bff817 	ldw	r2,-32(fp)
    44b4:	10800a17 	ldw	r2,40(r2)
    44b8:	e0fffd17 	ldw	r3,-12(fp)
    44bc:	18800726 	beq	r3,r2,44dc <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
    44c0:	e0bff617 	ldw	r2,-40(fp)
    44c4:	00bfb716 	blt	zero,r2,43a4 <altera_avalon_jtag_uart_read+0x2c>
    44c8:	00000506 	br	44e0 <altera_avalon_jtag_uart_read+0x168>
      break;
    44cc:	0001883a 	nop
    44d0:	00000306 	br	44e0 <altera_avalon_jtag_uart_read+0x168>
      break;
    44d4:	0001883a 	nop
    44d8:	00000106 	br	44e0 <altera_avalon_jtag_uart_read+0x168>
      break;
    44dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    44e0:	e0ffff17 	ldw	r3,-4(fp)
    44e4:	e0bff717 	ldw	r2,-36(fp)
    44e8:	18801926 	beq	r3,r2,4550 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
    44ec:	0005303a 	rdctl	r2,status
    44f0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    44f4:	e0fff917 	ldw	r3,-28(fp)
    44f8:	00bfff84 	movi	r2,-2
    44fc:	1884703a 	and	r2,r3,r2
    4500:	1001703a 	wrctl	status,r2
  return context;
    4504:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    4508:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    450c:	e0bff817 	ldw	r2,-32(fp)
    4510:	10800817 	ldw	r2,32(r2)
    4514:	10c00054 	ori	r3,r2,1
    4518:	e0bff817 	ldw	r2,-32(fp)
    451c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4520:	e0bff817 	ldw	r2,-32(fp)
    4524:	10800017 	ldw	r2,0(r2)
    4528:	10800104 	addi	r2,r2,4
    452c:	1007883a 	mov	r3,r2
    4530:	e0bff817 	ldw	r2,-32(fp)
    4534:	10800817 	ldw	r2,32(r2)
    4538:	18800035 	stwio	r2,0(r3)
    453c:	e0bffb17 	ldw	r2,-20(fp)
    4540:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    4544:	e0bffa17 	ldw	r2,-24(fp)
    4548:	1001703a 	wrctl	status,r2
}
    454c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    4550:	e0ffff17 	ldw	r3,-4(fp)
    4554:	e0bff717 	ldw	r2,-36(fp)
    4558:	18800426 	beq	r3,r2,456c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
    455c:	e0ffff17 	ldw	r3,-4(fp)
    4560:	e0bff717 	ldw	r2,-36(fp)
    4564:	1885c83a 	sub	r2,r3,r2
    4568:	00000606 	br	4584 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    456c:	e0bff517 	ldw	r2,-44(fp)
    4570:	1090000c 	andi	r2,r2,16384
    4574:	10000226 	beq	r2,zero,4580 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
    4578:	00bffd44 	movi	r2,-11
    457c:	00000106 	br	4584 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    4580:	00bffec4 	movi	r2,-5
}
    4584:	e037883a 	mov	sp,fp
    4588:	dfc00117 	ldw	ra,4(sp)
    458c:	df000017 	ldw	fp,0(sp)
    4590:	dec00204 	addi	sp,sp,8
    4594:	f800283a 	ret

00004598 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4598:	defff304 	addi	sp,sp,-52
    459c:	dfc00c15 	stw	ra,48(sp)
    45a0:	df000b15 	stw	fp,44(sp)
    45a4:	df000b04 	addi	fp,sp,44
    45a8:	e13ff815 	stw	r4,-32(fp)
    45ac:	e17ff715 	stw	r5,-36(fp)
    45b0:	e1bff615 	stw	r6,-40(fp)
    45b4:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    45b8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    45bc:	e0bff717 	ldw	r2,-36(fp)
    45c0:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    45c4:	00003706 	br	46a4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    45c8:	e0bff817 	ldw	r2,-32(fp)
    45cc:	10800c17 	ldw	r2,48(r2)
    45d0:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
    45d4:	e0bff817 	ldw	r2,-32(fp)
    45d8:	10800d17 	ldw	r2,52(r2)
    45dc:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
    45e0:	e0fffc17 	ldw	r3,-16(fp)
    45e4:	e0bfff17 	ldw	r2,-4(fp)
    45e8:	1880062e 	bgeu	r3,r2,4604 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    45ec:	e0ffff17 	ldw	r3,-4(fp)
    45f0:	e0bffc17 	ldw	r2,-16(fp)
    45f4:	1885c83a 	sub	r2,r3,r2
    45f8:	10bfffc4 	addi	r2,r2,-1
    45fc:	e0bffe15 	stw	r2,-8(fp)
    4600:	00000b06 	br	4630 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    4604:	e0bfff17 	ldw	r2,-4(fp)
    4608:	10000526 	beq	r2,zero,4620 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    460c:	00c20004 	movi	r3,2048
    4610:	e0bffc17 	ldw	r2,-16(fp)
    4614:	1885c83a 	sub	r2,r3,r2
    4618:	e0bffe15 	stw	r2,-8(fp)
    461c:	00000406 	br	4630 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4620:	00c1ffc4 	movi	r3,2047
    4624:	e0bffc17 	ldw	r2,-16(fp)
    4628:	1885c83a 	sub	r2,r3,r2
    462c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    4630:	e0bffe17 	ldw	r2,-8(fp)
    4634:	10001e26 	beq	r2,zero,46b0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    4638:	e0fff617 	ldw	r3,-40(fp)
    463c:	e0bffe17 	ldw	r2,-8(fp)
    4640:	1880022e 	bgeu	r3,r2,464c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    4644:	e0bff617 	ldw	r2,-40(fp)
    4648:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    464c:	e0bff817 	ldw	r2,-32(fp)
    4650:	10c20e04 	addi	r3,r2,2104
    4654:	e0bffc17 	ldw	r2,-16(fp)
    4658:	1885883a 	add	r2,r3,r2
    465c:	e1bffe17 	ldw	r6,-8(fp)
    4660:	e17ff717 	ldw	r5,-36(fp)
    4664:	1009883a 	mov	r4,r2
    4668:	000108c0 	call	108c <memcpy>
      ptr   += n;
    466c:	e0fff717 	ldw	r3,-36(fp)
    4670:	e0bffe17 	ldw	r2,-8(fp)
    4674:	1885883a 	add	r2,r3,r2
    4678:	e0bff715 	stw	r2,-36(fp)
      count -= n;
    467c:	e0fff617 	ldw	r3,-40(fp)
    4680:	e0bffe17 	ldw	r2,-8(fp)
    4684:	1885c83a 	sub	r2,r3,r2
    4688:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    468c:	e0fffc17 	ldw	r3,-16(fp)
    4690:	e0bffe17 	ldw	r2,-8(fp)
    4694:	1885883a 	add	r2,r3,r2
    4698:	10c1ffcc 	andi	r3,r2,2047
    469c:	e0bff817 	ldw	r2,-32(fp)
    46a0:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
    46a4:	e0bff617 	ldw	r2,-40(fp)
    46a8:	00bfc716 	blt	zero,r2,45c8 <altera_avalon_jtag_uart_write+0x30>
    46ac:	00000106 	br	46b4 <altera_avalon_jtag_uart_write+0x11c>
        break;
    46b0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    46b4:	0005303a 	rdctl	r2,status
    46b8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    46bc:	e0fff917 	ldw	r3,-28(fp)
    46c0:	00bfff84 	movi	r2,-2
    46c4:	1884703a 	and	r2,r3,r2
    46c8:	1001703a 	wrctl	status,r2
  return context;
    46cc:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    46d0:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    46d4:	e0bff817 	ldw	r2,-32(fp)
    46d8:	10800817 	ldw	r2,32(r2)
    46dc:	10c00094 	ori	r3,r2,2
    46e0:	e0bff817 	ldw	r2,-32(fp)
    46e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    46e8:	e0bff817 	ldw	r2,-32(fp)
    46ec:	10800017 	ldw	r2,0(r2)
    46f0:	10800104 	addi	r2,r2,4
    46f4:	1007883a 	mov	r3,r2
    46f8:	e0bff817 	ldw	r2,-32(fp)
    46fc:	10800817 	ldw	r2,32(r2)
    4700:	18800035 	stwio	r2,0(r3)
    4704:	e0bffb17 	ldw	r2,-20(fp)
    4708:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    470c:	e0bffa17 	ldw	r2,-24(fp)
    4710:	1001703a 	wrctl	status,r2
}
    4714:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    4718:	e0bff617 	ldw	r2,-40(fp)
    471c:	0080100e 	bge	zero,r2,4760 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    4720:	e0bff517 	ldw	r2,-44(fp)
    4724:	1090000c 	andi	r2,r2,16384
    4728:	1000101e 	bne	r2,zero,476c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    472c:	0001883a 	nop
    4730:	e0bff817 	ldw	r2,-32(fp)
    4734:	10800d17 	ldw	r2,52(r2)
    4738:	e0ffff17 	ldw	r3,-4(fp)
    473c:	1880051e 	bne	r3,r2,4754 <altera_avalon_jtag_uart_write+0x1bc>
    4740:	e0bff817 	ldw	r2,-32(fp)
    4744:	10c00917 	ldw	r3,36(r2)
    4748:	e0bff817 	ldw	r2,-32(fp)
    474c:	10800117 	ldw	r2,4(r2)
    4750:	18bff736 	bltu	r3,r2,4730 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    4754:	e0bff817 	ldw	r2,-32(fp)
    4758:	10800917 	ldw	r2,36(r2)
    475c:	1000051e 	bne	r2,zero,4774 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
    4760:	e0bff617 	ldw	r2,-40(fp)
    4764:	00bfcf16 	blt	zero,r2,46a4 <altera_avalon_jtag_uart_write+0x10c>
    4768:	00000306 	br	4778 <altera_avalon_jtag_uart_write+0x1e0>
        break;
    476c:	0001883a 	nop
    4770:	00000106 	br	4778 <altera_avalon_jtag_uart_write+0x1e0>
         break;
    4774:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    4778:	e0fff717 	ldw	r3,-36(fp)
    477c:	e0bffd17 	ldw	r2,-12(fp)
    4780:	18800426 	beq	r3,r2,4794 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
    4784:	e0fff717 	ldw	r3,-36(fp)
    4788:	e0bffd17 	ldw	r2,-12(fp)
    478c:	1885c83a 	sub	r2,r3,r2
    4790:	00000606 	br	47ac <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
    4794:	e0bff517 	ldw	r2,-44(fp)
    4798:	1090000c 	andi	r2,r2,16384
    479c:	10000226 	beq	r2,zero,47a8 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
    47a0:	00bffd44 	movi	r2,-11
    47a4:	00000106 	br	47ac <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    47a8:	00bffec4 	movi	r2,-5
}
    47ac:	e037883a 	mov	sp,fp
    47b0:	dfc00117 	ldw	ra,4(sp)
    47b4:	df000017 	ldw	fp,0(sp)
    47b8:	dec00204 	addi	sp,sp,8
    47bc:	f800283a 	ret

000047c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    47c0:	defff404 	addi	sp,sp,-48
    47c4:	df000b15 	stw	fp,44(sp)
    47c8:	df000b04 	addi	fp,sp,44
    47cc:	e13ff815 	stw	r4,-32(fp)
    47d0:	e17ff715 	stw	r5,-36(fp)
    47d4:	e1bff615 	stw	r6,-40(fp)
    47d8:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
    47dc:	e03ffe15 	stw	zero,-8(fp)
    47e0:	e03fff15 	stw	zero,-4(fp)
    47e4:	d0a01717 	ldw	r2,-32676(gp)
  
  if (alt_ticks_per_second ())
    47e8:	10004826 	beq	r2,zero,490c <alt_alarm_start+0x14c>
  {
    if (alarm)
    47ec:	e0bff817 	ldw	r2,-32(fp)
    47f0:	10004426 	beq	r2,zero,4904 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
    47f4:	e0bff817 	ldw	r2,-32(fp)
    47f8:	e0fff617 	ldw	r3,-40(fp)
    47fc:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
    4800:	e0bff817 	ldw	r2,-32(fp)
    4804:	e0fff517 	ldw	r3,-44(fp)
    4808:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
    480c:	0005303a 	rdctl	r2,status
    4810:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4814:	e0fff917 	ldw	r3,-28(fp)
    4818:	00bfff84 	movi	r2,-2
    481c:	1884703a 	and	r2,r3,r2
    4820:	1001703a 	wrctl	status,r2
  return context;
    4824:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    4828:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    482c:	d0a01817 	ldw	r2,-32672(gp)
    4830:	d0e01917 	ldw	r3,-32668(gp)
      
      current_nticks = alt_nticks();
    4834:	e0bffe15 	stw	r2,-8(fp)
    4838:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
    483c:	e0bff717 	ldw	r2,-36(fp)
    4840:	1011883a 	mov	r8,r2
    4844:	0013883a 	mov	r9,zero
    4848:	e13ffe17 	ldw	r4,-8(fp)
    484c:	e17fff17 	ldw	r5,-4(fp)
    4850:	4105883a 	add	r2,r8,r4
    4854:	120d803a 	cmpltu	r6,r2,r8
    4858:	4947883a 	add	r3,r9,r5
    485c:	30c9883a 	add	r4,r6,r3
    4860:	2007883a 	mov	r3,r4
    4864:	1009883a 	mov	r4,r2
    4868:	180b883a 	mov	r5,r3
    486c:	01800044 	movi	r6,1
    4870:	000f883a 	mov	r7,zero
    4874:	2185883a 	add	r2,r4,r6
    4878:	1111803a 	cmpltu	r8,r2,r4
    487c:	29c7883a 	add	r3,r5,r7
    4880:	40c9883a 	add	r4,r8,r3
    4884:	2007883a 	mov	r3,r4
    4888:	1009883a 	mov	r4,r2
    488c:	180b883a 	mov	r5,r3
    4890:	e0bff817 	ldw	r2,-32(fp)
    4894:	11000215 	stw	r4,8(r2)
    4898:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    489c:	e0bff817 	ldw	r2,-32(fp)
    48a0:	d0e00b04 	addi	r3,gp,-32724
    48a4:	e0fffb15 	stw	r3,-20(fp)
    48a8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    48ac:	e0bffa17 	ldw	r2,-24(fp)
    48b0:	e0fffb17 	ldw	r3,-20(fp)
    48b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    48b8:	e0bffb17 	ldw	r2,-20(fp)
    48bc:	10c00017 	ldw	r3,0(r2)
    48c0:	e0bffa17 	ldw	r2,-24(fp)
    48c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    48c8:	e0bffb17 	ldw	r2,-20(fp)
    48cc:	10800017 	ldw	r2,0(r2)
    48d0:	e0fffa17 	ldw	r3,-24(fp)
    48d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    48d8:	e0bffb17 	ldw	r2,-20(fp)
    48dc:	e0fffa17 	ldw	r3,-24(fp)
    48e0:	10c00015 	stw	r3,0(r2)
}
    48e4:	0001883a 	nop
    48e8:	e0bffd17 	ldw	r2,-12(fp)
    48ec:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    48f0:	e0bffc17 	ldw	r2,-16(fp)
    48f4:	1001703a 	wrctl	status,r2
}
    48f8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
    48fc:	0005883a 	mov	r2,zero
    4900:	00000306 	br	4910 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
    4904:	00bffa84 	movi	r2,-22
    4908:	00000106 	br	4910 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
    490c:	00bfde84 	movi	r2,-134
  }
}
    4910:	e037883a 	mov	sp,fp
    4914:	df000017 	ldw	fp,0(sp)
    4918:	dec00104 	addi	sp,sp,4
    491c:	f800283a 	ret

00004920 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    4920:	defffa04 	addi	sp,sp,-24
    4924:	dfc00515 	stw	ra,20(sp)
    4928:	df000415 	stw	fp,16(sp)
    492c:	df000404 	addi	fp,sp,16
    4930:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    4934:	00800244 	movi	r2,9
    4938:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    493c:	014003f4 	movhi	r5,15
    4940:	29509004 	addi	r5,r5,16960
    4944:	e13ffe17 	ldw	r4,-8(fp)
    4948:	00032500 	call	3250 <__mulsi3>
    494c:	100b883a 	mov	r5,r2
    4950:	0100bef4 	movhi	r4,763
    4954:	213c2004 	addi	r4,r4,-3968
    4958:	00031900 	call	3190 <__udivsi3>
  big_loops = us / (INT_MAX/
    495c:	100b883a 	mov	r5,r2
    4960:	01200034 	movhi	r4,32768
    4964:	213fffc4 	addi	r4,r4,-1
    4968:	00031900 	call	3190 <__udivsi3>
    496c:	100b883a 	mov	r5,r2
    4970:	e13ffc17 	ldw	r4,-16(fp)
    4974:	00031900 	call	3190 <__udivsi3>
    4978:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
    497c:	e0bffd17 	ldw	r2,-12(fp)
    4980:	10002a26 	beq	r2,zero,4a2c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    4984:	e03fff15 	stw	zero,-4(fp)
    4988:	00001706 	br	49e8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    498c:	00a00034 	movhi	r2,32768
    4990:	10bfffc4 	addi	r2,r2,-1
    4994:	10bfffc4 	addi	r2,r2,-1
    4998:	103ffe1e 	bne	r2,zero,4994 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    499c:	014003f4 	movhi	r5,15
    49a0:	29509004 	addi	r5,r5,16960
    49a4:	e13ffe17 	ldw	r4,-8(fp)
    49a8:	00032500 	call	3250 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
    49ac:	100b883a 	mov	r5,r2
    49b0:	0100bef4 	movhi	r4,763
    49b4:	213c2004 	addi	r4,r4,-3968
    49b8:	00031900 	call	3190 <__udivsi3>
    49bc:	100b883a 	mov	r5,r2
    49c0:	01200034 	movhi	r4,32768
    49c4:	213fffc4 	addi	r4,r4,-1
    49c8:	00031900 	call	3190 <__udivsi3>
    49cc:	1007883a 	mov	r3,r2
    49d0:	e0bffc17 	ldw	r2,-16(fp)
    49d4:	10c5c83a 	sub	r2,r2,r3
    49d8:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
    49dc:	e0bfff17 	ldw	r2,-4(fp)
    49e0:	10800044 	addi	r2,r2,1
    49e4:	e0bfff15 	stw	r2,-4(fp)
    49e8:	e0ffff17 	ldw	r3,-4(fp)
    49ec:	e0bffd17 	ldw	r2,-12(fp)
    49f0:	18bfe616 	blt	r3,r2,498c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    49f4:	014003f4 	movhi	r5,15
    49f8:	29509004 	addi	r5,r5,16960
    49fc:	e13ffe17 	ldw	r4,-8(fp)
    4a00:	00032500 	call	3250 <__mulsi3>
    4a04:	100b883a 	mov	r5,r2
    4a08:	0100bef4 	movhi	r4,763
    4a0c:	213c2004 	addi	r4,r4,-3968
    4a10:	00031900 	call	3190 <__udivsi3>
    4a14:	e17ffc17 	ldw	r5,-16(fp)
    4a18:	1009883a 	mov	r4,r2
    4a1c:	00032500 	call	3250 <__mulsi3>
    __asm__ volatile (
    4a20:	10bfffc4 	addi	r2,r2,-1
    4a24:	103ffe1e 	bne	r2,zero,4a20 <alt_busy_sleep+0x100>
    4a28:	00000d06 	br	4a60 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    4a2c:	014003f4 	movhi	r5,15
    4a30:	29509004 	addi	r5,r5,16960
    4a34:	e13ffe17 	ldw	r4,-8(fp)
    4a38:	00032500 	call	3250 <__mulsi3>
    4a3c:	100b883a 	mov	r5,r2
    4a40:	0100bef4 	movhi	r4,763
    4a44:	213c2004 	addi	r4,r4,-3968
    4a48:	00031900 	call	3190 <__udivsi3>
    4a4c:	e17ffc17 	ldw	r5,-16(fp)
    4a50:	1009883a 	mov	r4,r2
    4a54:	00032500 	call	3250 <__mulsi3>
    __asm__ volatile (
    4a58:	10bfffc4 	addi	r2,r2,-1
    4a5c:	00bffe16 	blt	zero,r2,4a58 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    4a60:	0005883a 	mov	r2,zero
}
    4a64:	e037883a 	mov	sp,fp
    4a68:	dfc00117 	ldw	ra,4(sp)
    4a6c:	df000017 	ldw	fp,0(sp)
    4a70:	dec00204 	addi	sp,sp,8
    4a74:	f800283a 	ret

00004a78 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4a78:	deffff04 	addi	sp,sp,-4
    4a7c:	df000015 	stw	fp,0(sp)
    4a80:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4a84:	0001883a 	nop
    4a88:	e037883a 	mov	sp,fp
    4a8c:	df000017 	ldw	fp,0(sp)
    4a90:	dec00104 	addi	sp,sp,4
    4a94:	f800283a 	ret

00004a98 <alt_get_errno>:
    4a98:	defffe04 	addi	sp,sp,-8
    4a9c:	dfc00115 	stw	ra,4(sp)
    4aa0:	df000015 	stw	fp,0(sp)
    4aa4:	d839883a 	mov	fp,sp
    4aa8:	d0a00817 	ldw	r2,-32736(gp)
    4aac:	10000326 	beq	r2,zero,4abc <alt_get_errno+0x24>
    4ab0:	d0a00817 	ldw	r2,-32736(gp)
    4ab4:	103ee83a 	callr	r2
    4ab8:	00000106 	br	4ac0 <alt_get_errno+0x28>
    4abc:	d0a00d04 	addi	r2,gp,-32716
    4ac0:	e037883a 	mov	sp,fp
    4ac4:	dfc00117 	ldw	ra,4(sp)
    4ac8:	df000017 	ldw	fp,0(sp)
    4acc:	dec00204 	addi	sp,sp,8
    4ad0:	f800283a 	ret

00004ad4 <alt_dev_llist_insert>:
{
    4ad4:	defffa04 	addi	sp,sp,-24
    4ad8:	dfc00515 	stw	ra,20(sp)
    4adc:	df000415 	stw	fp,16(sp)
    4ae0:	df000404 	addi	fp,sp,16
    4ae4:	e13ffd15 	stw	r4,-12(fp)
    4ae8:	e17ffc15 	stw	r5,-16(fp)
  if (!dev || !dev->name)
    4aec:	e0bffd17 	ldw	r2,-12(fp)
    4af0:	10000326 	beq	r2,zero,4b00 <alt_dev_llist_insert+0x2c>
    4af4:	e0bffd17 	ldw	r2,-12(fp)
    4af8:	10800217 	ldw	r2,8(r2)
    4afc:	1000061e 	bne	r2,zero,4b18 <alt_dev_llist_insert+0x44>
    ALT_ERRNO = EINVAL;
    4b00:	0004a980 	call	4a98 <alt_get_errno>
    4b04:	1007883a 	mov	r3,r2
    4b08:	00800584 	movi	r2,22
    4b0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    4b10:	00bffa84 	movi	r2,-22
    4b14:	00001406 	br	4b68 <alt_dev_llist_insert+0x94>
  alt_llist_insert(list, &dev->llist);
    4b18:	e0bffd17 	ldw	r2,-12(fp)
    4b1c:	e0fffc17 	ldw	r3,-16(fp)
    4b20:	e0ffff15 	stw	r3,-4(fp)
    4b24:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
    4b28:	e0bffe17 	ldw	r2,-8(fp)
    4b2c:	e0ffff17 	ldw	r3,-4(fp)
    4b30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    4b34:	e0bfff17 	ldw	r2,-4(fp)
    4b38:	10c00017 	ldw	r3,0(r2)
    4b3c:	e0bffe17 	ldw	r2,-8(fp)
    4b40:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
    4b44:	e0bfff17 	ldw	r2,-4(fp)
    4b48:	10800017 	ldw	r2,0(r2)
    4b4c:	e0fffe17 	ldw	r3,-8(fp)
    4b50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4b54:	e0bfff17 	ldw	r2,-4(fp)
    4b58:	e0fffe17 	ldw	r3,-8(fp)
    4b5c:	10c00015 	stw	r3,0(r2)
}
    4b60:	0001883a 	nop
  return 0;  
    4b64:	0005883a 	mov	r2,zero
}
    4b68:	e037883a 	mov	sp,fp
    4b6c:	dfc00117 	ldw	ra,4(sp)
    4b70:	df000017 	ldw	fp,0(sp)
    4b74:	dec00204 	addi	sp,sp,8
    4b78:	f800283a 	ret

00004b7c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    4b7c:	defffd04 	addi	sp,sp,-12
    4b80:	dfc00215 	stw	ra,8(sp)
    4b84:	df000115 	stw	fp,4(sp)
    4b88:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4b8c:	00800034 	movhi	r2,0
    4b90:	10962604 	addi	r2,r2,22680
    4b94:	e0bfff15 	stw	r2,-4(fp)
    4b98:	00000606 	br	4bb4 <_do_ctors+0x38>
        (*ctor) (); 
    4b9c:	e0bfff17 	ldw	r2,-4(fp)
    4ba0:	10800017 	ldw	r2,0(r2)
    4ba4:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4ba8:	e0bfff17 	ldw	r2,-4(fp)
    4bac:	10bfff04 	addi	r2,r2,-4
    4bb0:	e0bfff15 	stw	r2,-4(fp)
    4bb4:	e0ffff17 	ldw	r3,-4(fp)
    4bb8:	00800034 	movhi	r2,0
    4bbc:	10962704 	addi	r2,r2,22684
    4bc0:	18bff62e 	bgeu	r3,r2,4b9c <_do_ctors+0x20>
}
    4bc4:	0001883a 	nop
    4bc8:	0001883a 	nop
    4bcc:	e037883a 	mov	sp,fp
    4bd0:	dfc00117 	ldw	ra,4(sp)
    4bd4:	df000017 	ldw	fp,0(sp)
    4bd8:	dec00204 	addi	sp,sp,8
    4bdc:	f800283a 	ret

00004be0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4be0:	defffd04 	addi	sp,sp,-12
    4be4:	dfc00215 	stw	ra,8(sp)
    4be8:	df000115 	stw	fp,4(sp)
    4bec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4bf0:	00800034 	movhi	r2,0
    4bf4:	10962604 	addi	r2,r2,22680
    4bf8:	e0bfff15 	stw	r2,-4(fp)
    4bfc:	00000606 	br	4c18 <_do_dtors+0x38>
        (*dtor) (); 
    4c00:	e0bfff17 	ldw	r2,-4(fp)
    4c04:	10800017 	ldw	r2,0(r2)
    4c08:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4c0c:	e0bfff17 	ldw	r2,-4(fp)
    4c10:	10bfff04 	addi	r2,r2,-4
    4c14:	e0bfff15 	stw	r2,-4(fp)
    4c18:	e0ffff17 	ldw	r3,-4(fp)
    4c1c:	00800034 	movhi	r2,0
    4c20:	10962704 	addi	r2,r2,22684
    4c24:	18bff62e 	bgeu	r3,r2,4c00 <_do_dtors+0x20>
}
    4c28:	0001883a 	nop
    4c2c:	0001883a 	nop
    4c30:	e037883a 	mov	sp,fp
    4c34:	dfc00117 	ldw	ra,4(sp)
    4c38:	df000017 	ldw	fp,0(sp)
    4c3c:	dec00204 	addi	sp,sp,8
    4c40:	f800283a 	ret

00004c44 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4c44:	deffff04 	addi	sp,sp,-4
    4c48:	df000015 	stw	fp,0(sp)
    4c4c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4c50:	0001883a 	nop
    4c54:	e037883a 	mov	sp,fp
    4c58:	df000017 	ldw	fp,0(sp)
    4c5c:	dec00104 	addi	sp,sp,4
    4c60:	f800283a 	ret

00004c64 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4c64:	defff904 	addi	sp,sp,-28
    4c68:	dfc00615 	stw	ra,24(sp)
    4c6c:	df000515 	stw	fp,20(sp)
    4c70:	df000504 	addi	fp,sp,20
    4c74:	e13fff15 	stw	r4,-4(fp)
    4c78:	e17ffe15 	stw	r5,-8(fp)
    4c7c:	e1bffd15 	stw	r6,-12(fp)
    4c80:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    4c84:	e0800217 	ldw	r2,8(fp)
    4c88:	d8800015 	stw	r2,0(sp)
    4c8c:	e1fffc17 	ldw	r7,-16(fp)
    4c90:	e1bffd17 	ldw	r6,-12(fp)
    4c94:	e17ffe17 	ldw	r5,-8(fp)
    4c98:	e13fff17 	ldw	r4,-4(fp)
    4c9c:	0004e140 	call	4e14 <alt_iic_isr_register>
}  
    4ca0:	e037883a 	mov	sp,fp
    4ca4:	dfc00117 	ldw	ra,4(sp)
    4ca8:	df000017 	ldw	fp,0(sp)
    4cac:	dec00204 	addi	sp,sp,8
    4cb0:	f800283a 	ret

00004cb4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    4cb4:	defff904 	addi	sp,sp,-28
    4cb8:	df000615 	stw	fp,24(sp)
    4cbc:	df000604 	addi	fp,sp,24
    4cc0:	e13ffb15 	stw	r4,-20(fp)
    4cc4:	e17ffa15 	stw	r5,-24(fp)
    4cc8:	e0bffa17 	ldw	r2,-24(fp)
    4ccc:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    4cd0:	0005303a 	rdctl	r2,status
    4cd4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4cd8:	e0fffe17 	ldw	r3,-8(fp)
    4cdc:	00bfff84 	movi	r2,-2
    4ce0:	1884703a 	and	r2,r3,r2
    4ce4:	1001703a 	wrctl	status,r2
  return context;
    4ce8:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4cec:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    4cf0:	00c00044 	movi	r3,1
    4cf4:	e0bfff17 	ldw	r2,-4(fp)
    4cf8:	1884983a 	sll	r2,r3,r2
    4cfc:	1007883a 	mov	r3,r2
    4d00:	d0a01617 	ldw	r2,-32680(gp)
    4d04:	1884b03a 	or	r2,r3,r2
    4d08:	d0a01615 	stw	r2,-32680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4d0c:	d0a01617 	ldw	r2,-32680(gp)
    4d10:	100170fa 	wrctl	ienable,r2
    4d14:	e0bffd17 	ldw	r2,-12(fp)
    4d18:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	1001703a 	wrctl	status,r2
}
    4d24:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    4d28:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    4d2c:	e037883a 	mov	sp,fp
    4d30:	df000017 	ldw	fp,0(sp)
    4d34:	dec00104 	addi	sp,sp,4
    4d38:	f800283a 	ret

00004d3c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    4d3c:	defff904 	addi	sp,sp,-28
    4d40:	df000615 	stw	fp,24(sp)
    4d44:	df000604 	addi	fp,sp,24
    4d48:	e13ffb15 	stw	r4,-20(fp)
    4d4c:	e17ffa15 	stw	r5,-24(fp)
    4d50:	e0bffa17 	ldw	r2,-24(fp)
    4d54:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    4d58:	0005303a 	rdctl	r2,status
    4d5c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4d60:	e0fffe17 	ldw	r3,-8(fp)
    4d64:	00bfff84 	movi	r2,-2
    4d68:	1884703a 	and	r2,r3,r2
    4d6c:	1001703a 	wrctl	status,r2
  return context;
    4d70:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
    4d74:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
    4d78:	00c00044 	movi	r3,1
    4d7c:	e0bfff17 	ldw	r2,-4(fp)
    4d80:	1884983a 	sll	r2,r3,r2
    4d84:	0084303a 	nor	r2,zero,r2
    4d88:	1007883a 	mov	r3,r2
    4d8c:	d0a01617 	ldw	r2,-32680(gp)
    4d90:	1884703a 	and	r2,r3,r2
    4d94:	d0a01615 	stw	r2,-32680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4d98:	d0a01617 	ldw	r2,-32680(gp)
    4d9c:	100170fa 	wrctl	ienable,r2
    4da0:	e0bffd17 	ldw	r2,-12(fp)
    4da4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4da8:	e0bffc17 	ldw	r2,-16(fp)
    4dac:	1001703a 	wrctl	status,r2
}
    4db0:	0001883a 	nop
  return 0;
    4db4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    4db8:	e037883a 	mov	sp,fp
    4dbc:	df000017 	ldw	fp,0(sp)
    4dc0:	dec00104 	addi	sp,sp,4
    4dc4:	f800283a 	ret

00004dc8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    4dc8:	defffc04 	addi	sp,sp,-16
    4dcc:	df000315 	stw	fp,12(sp)
    4dd0:	df000304 	addi	fp,sp,12
    4dd4:	e13ffe15 	stw	r4,-8(fp)
    4dd8:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    4ddc:	000530fa 	rdctl	r2,ienable
    4de0:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    4de4:	00c00044 	movi	r3,1
    4de8:	e0bffd17 	ldw	r2,-12(fp)
    4dec:	1884983a 	sll	r2,r3,r2
    4df0:	1007883a 	mov	r3,r2
    4df4:	e0bfff17 	ldw	r2,-4(fp)
    4df8:	1884703a 	and	r2,r3,r2
    4dfc:	1004c03a 	cmpne	r2,r2,zero
    4e00:	10803fcc 	andi	r2,r2,255
}
    4e04:	e037883a 	mov	sp,fp
    4e08:	df000017 	ldw	fp,0(sp)
    4e0c:	dec00104 	addi	sp,sp,4
    4e10:	f800283a 	ret

00004e14 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4e14:	defff504 	addi	sp,sp,-44
    4e18:	dfc00a15 	stw	ra,40(sp)
    4e1c:	df000915 	stw	fp,36(sp)
    4e20:	df000904 	addi	fp,sp,36
    4e24:	e13ffa15 	stw	r4,-24(fp)
    4e28:	e17ff915 	stw	r5,-28(fp)
    4e2c:	e1bff815 	stw	r6,-32(fp)
    4e30:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
    4e34:	00bffa84 	movi	r2,-22
    4e38:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    4e3c:	e0bff917 	ldw	r2,-28(fp)
    4e40:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4e44:	e0bffe17 	ldw	r2,-8(fp)
    4e48:	10800808 	cmpgei	r2,r2,32
    4e4c:	1000251e 	bne	r2,zero,4ee4 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
    4e50:	0005303a 	rdctl	r2,status
    4e54:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4e58:	e0fffc17 	ldw	r3,-16(fp)
    4e5c:	00bfff84 	movi	r2,-2
    4e60:	1884703a 	and	r2,r3,r2
    4e64:	1001703a 	wrctl	status,r2
  return context;
    4e68:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    4e6c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
    4e70:	e0bffe17 	ldw	r2,-8(fp)
    4e74:	100890fa 	slli	r4,r2,3
    4e78:	e0fff817 	ldw	r3,-32(fp)
    4e7c:	00800074 	movhi	r2,1
    4e80:	2085883a 	add	r2,r4,r2
    4e84:	10c65315 	stw	r3,6476(r2)
    alt_irq[id].context = isr_context;
    4e88:	e0bffe17 	ldw	r2,-8(fp)
    4e8c:	100890fa 	slli	r4,r2,3
    4e90:	e0fff717 	ldw	r3,-36(fp)
    4e94:	00800074 	movhi	r2,1
    4e98:	2085883a 	add	r2,r4,r2
    4e9c:	10c65415 	stw	r3,6480(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    4ea0:	e0bff817 	ldw	r2,-32(fp)
    4ea4:	10000526 	beq	r2,zero,4ebc <alt_iic_isr_register+0xa8>
    4ea8:	e0bffe17 	ldw	r2,-8(fp)
    4eac:	100b883a 	mov	r5,r2
    4eb0:	e13ffa17 	ldw	r4,-24(fp)
    4eb4:	0004cb40 	call	4cb4 <alt_ic_irq_enable>
    4eb8:	00000406 	br	4ecc <alt_iic_isr_register+0xb8>
    4ebc:	e0bffe17 	ldw	r2,-8(fp)
    4ec0:	100b883a 	mov	r5,r2
    4ec4:	e13ffa17 	ldw	r4,-24(fp)
    4ec8:	0004d3c0 	call	4d3c <alt_ic_irq_disable>
    4ecc:	e0bfff15 	stw	r2,-4(fp)
    4ed0:	e0bffd17 	ldw	r2,-12(fp)
    4ed4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    4ed8:	e0bffb17 	ldw	r2,-20(fp)
    4edc:	1001703a 	wrctl	status,r2
}
    4ee0:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    4ee4:	e0bfff17 	ldw	r2,-4(fp)
}
    4ee8:	e037883a 	mov	sp,fp
    4eec:	dfc00117 	ldw	ra,4(sp)
    4ef0:	df000017 	ldw	fp,0(sp)
    4ef4:	dec00204 	addi	sp,sp,8
    4ef8:	f800283a 	ret

00004efc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4efc:	defff904 	addi	sp,sp,-28
    4f00:	dfc00615 	stw	ra,24(sp)
    4f04:	df000515 	stw	fp,20(sp)
    4f08:	df000504 	addi	fp,sp,20
    4f0c:	e13ffe15 	stw	r4,-8(fp)
    4f10:	e17ffd15 	stw	r5,-12(fp)
    4f14:	e1bffc15 	stw	r6,-16(fp)
    4f18:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    4f1c:	e1bffb17 	ldw	r6,-20(fp)
    4f20:	e17ffc17 	ldw	r5,-16(fp)
    4f24:	e13ffd17 	ldw	r4,-12(fp)
    4f28:	00051640 	call	5164 <open>
    4f2c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    4f30:	e0bfff17 	ldw	r2,-4(fp)
    4f34:	10002016 	blt	r2,zero,4fb8 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    4f38:	e0ffff17 	ldw	r3,-4(fp)
    4f3c:	1805883a 	mov	r2,r3
    4f40:	1085883a 	add	r2,r2,r2
    4f44:	10c5883a 	add	r2,r2,r3
    4f48:	100490ba 	slli	r2,r2,2
    4f4c:	00c00074 	movhi	r3,1
    4f50:	10c7883a 	add	r3,r2,r3
    4f54:	18c16817 	ldw	r3,1440(r3)
    4f58:	e0bffe17 	ldw	r2,-8(fp)
    4f5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    4f60:	e0ffff17 	ldw	r3,-4(fp)
    4f64:	1805883a 	mov	r2,r3
    4f68:	1085883a 	add	r2,r2,r2
    4f6c:	10c5883a 	add	r2,r2,r3
    4f70:	100490ba 	slli	r2,r2,2
    4f74:	00c00074 	movhi	r3,1
    4f78:	10c7883a 	add	r3,r2,r3
    4f7c:	18c16917 	ldw	r3,1444(r3)
    4f80:	e0bffe17 	ldw	r2,-8(fp)
    4f84:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    4f88:	e0ffff17 	ldw	r3,-4(fp)
    4f8c:	1805883a 	mov	r2,r3
    4f90:	1085883a 	add	r2,r2,r2
    4f94:	10c5883a 	add	r2,r2,r3
    4f98:	100490ba 	slli	r2,r2,2
    4f9c:	00c00074 	movhi	r3,1
    4fa0:	10c7883a 	add	r3,r2,r3
    4fa4:	18c16a17 	ldw	r3,1448(r3)
    4fa8:	e0bffe17 	ldw	r2,-8(fp)
    4fac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    4fb0:	e13fff17 	ldw	r4,-4(fp)
    4fb4:	00039ec0 	call	39ec <alt_release_fd>
  }
} 
    4fb8:	0001883a 	nop
    4fbc:	e037883a 	mov	sp,fp
    4fc0:	dfc00117 	ldw	ra,4(sp)
    4fc4:	df000017 	ldw	fp,0(sp)
    4fc8:	dec00204 	addi	sp,sp,8
    4fcc:	f800283a 	ret

00004fd0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4fd0:	defffb04 	addi	sp,sp,-20
    4fd4:	dfc00415 	stw	ra,16(sp)
    4fd8:	df000315 	stw	fp,12(sp)
    4fdc:	df000304 	addi	fp,sp,12
    4fe0:	e13fff15 	stw	r4,-4(fp)
    4fe4:	e17ffe15 	stw	r5,-8(fp)
    4fe8:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4fec:	01c07fc4 	movi	r7,511
    4ff0:	01800044 	movi	r6,1
    4ff4:	e17fff17 	ldw	r5,-4(fp)
    4ff8:	01000074 	movhi	r4,1
    4ffc:	21016b04 	addi	r4,r4,1452
    5000:	0004efc0 	call	4efc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5004:	01c07fc4 	movi	r7,511
    5008:	000d883a 	mov	r6,zero
    500c:	e17ffe17 	ldw	r5,-8(fp)
    5010:	01000074 	movhi	r4,1
    5014:	21016804 	addi	r4,r4,1440
    5018:	0004efc0 	call	4efc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    501c:	01c07fc4 	movi	r7,511
    5020:	01800044 	movi	r6,1
    5024:	e17ffd17 	ldw	r5,-12(fp)
    5028:	01000074 	movhi	r4,1
    502c:	21016e04 	addi	r4,r4,1464
    5030:	0004efc0 	call	4efc <alt_open_fd>
}  
    5034:	0001883a 	nop
    5038:	e037883a 	mov	sp,fp
    503c:	dfc00117 	ldw	ra,4(sp)
    5040:	df000017 	ldw	fp,0(sp)
    5044:	dec00204 	addi	sp,sp,8
    5048:	f800283a 	ret

0000504c <alt_get_errno>:
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    504c:	defffe04 	addi	sp,sp,-8
    5050:	dfc00115 	stw	ra,4(sp)
    5054:	df000015 	stw	fp,0(sp)
    5058:	d839883a 	mov	fp,sp
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    505c:	d0a00817 	ldw	r2,-32736(gp)
    5060:	10000326 	beq	r2,zero,5070 <alt_get_errno+0x24>
    5064:	d0a00817 	ldw	r2,-32736(gp)
    5068:	103ee83a 	callr	r2
    506c:	00000106 	br	5074 <alt_get_errno+0x28>
    5070:	d0a00d04 	addi	r2,gp,-32716
        (&alt_fd_list[i] != fd))
    5074:	e037883a 	mov	sp,fp
    5078:	dfc00117 	ldw	ra,4(sp)
    507c:	df000017 	ldw	fp,0(sp)
    5080:	dec00204 	addi	sp,sp,8
    5084:	f800283a 	ret

00005088 <alt_file_locked>:
{
    5088:	defffd04 	addi	sp,sp,-12
    508c:	df000215 	stw	fp,8(sp)
    5090:	df000204 	addi	fp,sp,8
    5094:	e13ffe15 	stw	r4,-8(fp)
  fd->fd_flags |= ALT_FD_DEV;
    5098:	e0bffe17 	ldw	r2,-8(fp)
    509c:	10800217 	ldw	r2,8(r2)
    50a0:	10d00034 	orhi	r3,r2,16384
    50a4:	e0bffe17 	ldw	r2,-8(fp)
    50a8:	10c00215 	stw	r3,8(r2)
  for (i = 0; i <= alt_max_fd; i++)
    50ac:	e03fff15 	stw	zero,-4(fp)
    50b0:	00002306 	br	5140 <alt_file_locked+0xb8>
    if ((alt_fd_list[i].dev == fd->dev) &&
    50b4:	e0ffff17 	ldw	r3,-4(fp)
    50b8:	1805883a 	mov	r2,r3
    50bc:	1085883a 	add	r2,r2,r2
    50c0:	10c5883a 	add	r2,r2,r3
    50c4:	100490ba 	slli	r2,r2,2
    50c8:	00c00074 	movhi	r3,1
    50cc:	10c7883a 	add	r3,r2,r3
    50d0:	18c16817 	ldw	r3,1440(r3)
    50d4:	e0bffe17 	ldw	r2,-8(fp)
    50d8:	10800017 	ldw	r2,0(r2)
    50dc:	1880151e 	bne	r3,r2,5134 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    50e0:	e0ffff17 	ldw	r3,-4(fp)
    50e4:	1805883a 	mov	r2,r3
    50e8:	1085883a 	add	r2,r2,r2
    50ec:	10c5883a 	add	r2,r2,r3
    50f0:	100490ba 	slli	r2,r2,2
    50f4:	00c00074 	movhi	r3,1
    50f8:	10c7883a 	add	r3,r2,r3
    50fc:	18816a17 	ldw	r2,1448(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
    5100:	10000c0e 	bge	r2,zero,5134 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
    5104:	e0ffff17 	ldw	r3,-4(fp)
    5108:	1805883a 	mov	r2,r3
    510c:	1085883a 	add	r2,r2,r2
    5110:	10c5883a 	add	r2,r2,r3
    5114:	100490ba 	slli	r2,r2,2
    5118:	00c00074 	movhi	r3,1
    511c:	18c16804 	addi	r3,r3,1440
    5120:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5124:	e0fffe17 	ldw	r3,-8(fp)
    5128:	18800226 	beq	r3,r2,5134 <alt_file_locked+0xac>
    {
      return -EACCES;
    512c:	00bffcc4 	movi	r2,-13
    5130:	00000806 	br	5154 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
    5134:	e0bfff17 	ldw	r2,-4(fp)
    5138:	10800044 	addi	r2,r2,1
    513c:	e0bfff15 	stw	r2,-4(fp)
    5140:	d0a00717 	ldw	r2,-32740(gp)
    5144:	1007883a 	mov	r3,r2
    5148:	e0bfff17 	ldw	r2,-4(fp)
    514c:	18bfd92e 	bgeu	r3,r2,50b4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5150:	0005883a 	mov	r2,zero
}
    5154:	e037883a 	mov	sp,fp
    5158:	df000017 	ldw	fp,0(sp)
    515c:	dec00104 	addi	sp,sp,4
    5160:	f800283a 	ret

00005164 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5164:	defff604 	addi	sp,sp,-40
    5168:	dfc00915 	stw	ra,36(sp)
    516c:	df000815 	stw	fp,32(sp)
    5170:	df000804 	addi	fp,sp,32
    5174:	e13ffa15 	stw	r4,-24(fp)
    5178:	e17ff915 	stw	r5,-28(fp)
    517c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    5180:	00bfffc4 	movi	r2,-1
    5184:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    5188:	00bffb44 	movi	r2,-19
    518c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    5190:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    5194:	d1600504 	addi	r5,gp,-32748
    5198:	e13ffa17 	ldw	r4,-24(fp)
    519c:	00054b80 	call	54b8 <alt_find_dev>
    51a0:	e0bfff15 	stw	r2,-4(fp)
    51a4:	e0bfff17 	ldw	r2,-4(fp)
    51a8:	1000051e 	bne	r2,zero,51c0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    51ac:	e13ffa17 	ldw	r4,-24(fp)
    51b0:	00055480 	call	5548 <alt_find_file>
    51b4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    51b8:	00800044 	movi	r2,1
    51bc:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    51c0:	e0bfff17 	ldw	r2,-4(fp)
    51c4:	10002c26 	beq	r2,zero,5278 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    51c8:	e13fff17 	ldw	r4,-4(fp)
    51cc:	00056500 	call	5650 <alt_get_fd>
    51d0:	e0bffe15 	stw	r2,-8(fp)
    51d4:	e0bffe17 	ldw	r2,-8(fp)
    51d8:	1000030e 	bge	r2,zero,51e8 <open+0x84>
    {
      status = index;
    51dc:	e0bffe17 	ldw	r2,-8(fp)
    51e0:	e0bffd15 	stw	r2,-12(fp)
    51e4:	00002606 	br	5280 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    51e8:	e0fffe17 	ldw	r3,-8(fp)
    51ec:	1805883a 	mov	r2,r3
    51f0:	1085883a 	add	r2,r2,r2
    51f4:	10c5883a 	add	r2,r2,r3
    51f8:	100490ba 	slli	r2,r2,2
    51fc:	00c00074 	movhi	r3,1
    5200:	18c16804 	addi	r3,r3,1440
    5204:	10c5883a 	add	r2,r2,r3
    5208:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    520c:	e0fff917 	ldw	r3,-28(fp)
    5210:	00900034 	movhi	r2,16384
    5214:	10bfffc4 	addi	r2,r2,-1
    5218:	1886703a 	and	r3,r3,r2
    521c:	e0bffb17 	ldw	r2,-20(fp)
    5220:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5224:	e0bffc17 	ldw	r2,-16(fp)
    5228:	1000051e 	bne	r2,zero,5240 <open+0xdc>
    522c:	e13ffb17 	ldw	r4,-20(fp)
    5230:	00050880 	call	5088 <alt_file_locked>
    5234:	e0bffd15 	stw	r2,-12(fp)
    5238:	e0bffd17 	ldw	r2,-12(fp)
    523c:	10001016 	blt	r2,zero,5280 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5240:	e0bfff17 	ldw	r2,-4(fp)
    5244:	10800317 	ldw	r2,12(r2)
    5248:	10000826 	beq	r2,zero,526c <open+0x108>
    524c:	e0bfff17 	ldw	r2,-4(fp)
    5250:	10800317 	ldw	r2,12(r2)
    5254:	e1fff817 	ldw	r7,-32(fp)
    5258:	e1bff917 	ldw	r6,-28(fp)
    525c:	e17ffa17 	ldw	r5,-24(fp)
    5260:	e13ffb17 	ldw	r4,-20(fp)
    5264:	103ee83a 	callr	r2
    5268:	00000106 	br	5270 <open+0x10c>
    526c:	0005883a 	mov	r2,zero
    5270:	e0bffd15 	stw	r2,-12(fp)
    5274:	00000206 	br	5280 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5278:	00bffb44 	movi	r2,-19
    527c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5280:	e0bffd17 	ldw	r2,-12(fp)
    5284:	1000090e 	bge	r2,zero,52ac <open+0x148>
  {
    alt_release_fd (index);  
    5288:	e13ffe17 	ldw	r4,-8(fp)
    528c:	00039ec0 	call	39ec <alt_release_fd>
    ALT_ERRNO = -status;
    5290:	000504c0 	call	504c <alt_get_errno>
    5294:	1007883a 	mov	r3,r2
    5298:	e0bffd17 	ldw	r2,-12(fp)
    529c:	0085c83a 	sub	r2,zero,r2
    52a0:	18800015 	stw	r2,0(r3)
    return -1;
    52a4:	00bfffc4 	movi	r2,-1
    52a8:	00000106 	br	52b0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    52ac:	e0bffe17 	ldw	r2,-8(fp)
}
    52b0:	e037883a 	mov	sp,fp
    52b4:	dfc00117 	ldw	ra,4(sp)
    52b8:	df000017 	ldw	fp,0(sp)
    52bc:	dec00204 	addi	sp,sp,8
    52c0:	f800283a 	ret

000052c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    52c4:	defffa04 	addi	sp,sp,-24
    52c8:	df000515 	stw	fp,20(sp)
    52cc:	df000504 	addi	fp,sp,20
    52d0:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    52d4:	0005303a 	rdctl	r2,status
    52d8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    52dc:	e0fffc17 	ldw	r3,-16(fp)
    52e0:	00bfff84 	movi	r2,-2
    52e4:	1884703a 	and	r2,r3,r2
    52e8:	1001703a 	wrctl	status,r2
  return context;
    52ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    52f0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    52f4:	e0bffb17 	ldw	r2,-20(fp)
    52f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    52fc:	e0bffd17 	ldw	r2,-12(fp)
    5300:	10800017 	ldw	r2,0(r2)
    5304:	e0fffd17 	ldw	r3,-12(fp)
    5308:	18c00117 	ldw	r3,4(r3)
    530c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    5310:	e0bffd17 	ldw	r2,-12(fp)
    5314:	10800117 	ldw	r2,4(r2)
    5318:	e0fffd17 	ldw	r3,-12(fp)
    531c:	18c00017 	ldw	r3,0(r3)
    5320:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    5324:	e0bffd17 	ldw	r2,-12(fp)
    5328:	e0fffd17 	ldw	r3,-12(fp)
    532c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    5330:	e0bffd17 	ldw	r2,-12(fp)
    5334:	e0fffd17 	ldw	r3,-12(fp)
    5338:	10c00015 	stw	r3,0(r2)
} 
    533c:	0001883a 	nop
    5340:	e0bfff17 	ldw	r2,-4(fp)
    5344:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    5348:	e0bffe17 	ldw	r2,-8(fp)
    534c:	1001703a 	wrctl	status,r2
}
    5350:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    5354:	0001883a 	nop
    5358:	e037883a 	mov	sp,fp
    535c:	df000017 	ldw	fp,0(sp)
    5360:	dec00104 	addi	sp,sp,4
    5364:	f800283a 	ret

00005368 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    5368:	defff904 	addi	sp,sp,-28
    536c:	dfc00615 	stw	ra,24(sp)
    5370:	df000515 	stw	fp,20(sp)
    5374:	dc400415 	stw	r17,16(sp)
    5378:	dc000315 	stw	r16,12(sp)
    537c:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    5380:	d0a00b17 	ldw	r2,-32724(gp)
    5384:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    5388:	d1201817 	ldw	r4,-32672(gp)
    538c:	d1601917 	ldw	r5,-32668(gp)
    5390:	01800044 	movi	r6,1
    5394:	000f883a 	mov	r7,zero
    5398:	2185883a 	add	r2,r4,r6
    539c:	1111803a 	cmpltu	r8,r2,r4
    53a0:	29c7883a 	add	r3,r5,r7
    53a4:	40c9883a 	add	r4,r8,r3
    53a8:	2007883a 	mov	r3,r4
    53ac:	1009883a 	mov	r4,r2
    53b0:	180b883a 	mov	r5,r3
    53b4:	d1201815 	stw	r4,-32672(gp)
    53b8:	d1601915 	stw	r5,-32668(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    53bc:	00002906 	br	5464 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
    53c0:	e0bffd17 	ldw	r2,-12(fp)
    53c4:	10800017 	ldw	r2,0(r2)
    53c8:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    53cc:	e13ffd17 	ldw	r4,-12(fp)
    53d0:	20800217 	ldw	r2,8(r4)
    53d4:	20c00317 	ldw	r3,12(r4)
    53d8:	d1201817 	ldw	r4,-32672(gp)
    53dc:	d1601917 	ldw	r5,-32668(gp)
    53e0:	28c01e36 	bltu	r5,r3,545c <alt_tick+0xf4>
    53e4:	1940011e 	bne	r3,r5,53ec <alt_tick+0x84>
    53e8:	20801c36 	bltu	r4,r2,545c <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
    53ec:	e0bffd17 	ldw	r2,-12(fp)
    53f0:	10800417 	ldw	r2,16(r2)
    53f4:	e0fffd17 	ldw	r3,-12(fp)
    53f8:	18c00517 	ldw	r3,20(r3)
    53fc:	1809883a 	mov	r4,r3
    5400:	103ee83a 	callr	r2
    5404:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    5408:	e0bffb17 	ldw	r2,-20(fp)
    540c:	1000031e 	bne	r2,zero,541c <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
    5410:	e13ffd17 	ldw	r4,-12(fp)
    5414:	00052c40 	call	52c4 <alt_alarm_stop>
    5418:	00001006 	br	545c <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
    541c:	e0bffd17 	ldw	r2,-12(fp)
    5420:	11000217 	ldw	r4,8(r2)
    5424:	11400317 	ldw	r5,12(r2)
    5428:	e0bffb17 	ldw	r2,-20(fp)
    542c:	1021883a 	mov	r16,r2
    5430:	0023883a 	mov	r17,zero
    5434:	2405883a 	add	r2,r4,r16
    5438:	110d803a 	cmpltu	r6,r2,r4
    543c:	2c47883a 	add	r3,r5,r17
    5440:	30c9883a 	add	r4,r6,r3
    5444:	2007883a 	mov	r3,r4
    5448:	1009883a 	mov	r4,r2
    544c:	180b883a 	mov	r5,r3
    5450:	e0bffd17 	ldw	r2,-12(fp)
    5454:	11000215 	stw	r4,8(r2)
    5458:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
    545c:	e0bffc17 	ldw	r2,-16(fp)
    5460:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    5464:	e0fffd17 	ldw	r3,-12(fp)
    5468:	d0a00b04 	addi	r2,gp,-32724
    546c:	18bfd41e 	bne	r3,r2,53c0 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    5470:	0001883a 	nop
}
    5474:	0001883a 	nop
    5478:	e6fffe04 	addi	sp,fp,-8
    547c:	dfc00317 	ldw	ra,12(sp)
    5480:	df000217 	ldw	fp,8(sp)
    5484:	dc400117 	ldw	r17,4(sp)
    5488:	dc000017 	ldw	r16,0(sp)
    548c:	dec00404 	addi	sp,sp,16
    5490:	f800283a 	ret

00005494 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    5494:	deffff04 	addi	sp,sp,-4
    5498:	df000015 	stw	fp,0(sp)
    549c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    54a0:	000170fa 	wrctl	ienable,zero
}
    54a4:	0001883a 	nop
    54a8:	e037883a 	mov	sp,fp
    54ac:	df000017 	ldw	fp,0(sp)
    54b0:	dec00104 	addi	sp,sp,4
    54b4:	f800283a 	ret

000054b8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    54b8:	defffa04 	addi	sp,sp,-24
    54bc:	dfc00515 	stw	ra,20(sp)
    54c0:	df000415 	stw	fp,16(sp)
    54c4:	df000404 	addi	fp,sp,16
    54c8:	e13ffd15 	stw	r4,-12(fp)
    54cc:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    54d0:	e0bffc17 	ldw	r2,-16(fp)
    54d4:	10800017 	ldw	r2,0(r2)
    54d8:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    54dc:	e13ffd17 	ldw	r4,-12(fp)
    54e0:	000039c0 	call	39c <strlen>
    54e4:	10800044 	addi	r2,r2,1
    54e8:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    54ec:	00000d06 	br	5524 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    54f0:	e0bfff17 	ldw	r2,-4(fp)
    54f4:	10800217 	ldw	r2,8(r2)
    54f8:	e0fffe17 	ldw	r3,-8(fp)
    54fc:	180d883a 	mov	r6,r3
    5500:	e17ffd17 	ldw	r5,-12(fp)
    5504:	1009883a 	mov	r4,r2
    5508:	00057900 	call	5790 <memcmp>
    550c:	1000021e 	bne	r2,zero,5518 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5510:	e0bfff17 	ldw	r2,-4(fp)
    5514:	00000706 	br	5534 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5518:	e0bfff17 	ldw	r2,-4(fp)
    551c:	10800017 	ldw	r2,0(r2)
    5520:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    5524:	e0ffff17 	ldw	r3,-4(fp)
    5528:	e0bffc17 	ldw	r2,-16(fp)
    552c:	18bff01e 	bne	r3,r2,54f0 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    5530:	0005883a 	mov	r2,zero
}
    5534:	e037883a 	mov	sp,fp
    5538:	dfc00117 	ldw	ra,4(sp)
    553c:	df000017 	ldw	fp,0(sp)
    5540:	dec00204 	addi	sp,sp,8
    5544:	f800283a 	ret

00005548 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5548:	defffb04 	addi	sp,sp,-20
    554c:	dfc00415 	stw	ra,16(sp)
    5550:	df000315 	stw	fp,12(sp)
    5554:	df000304 	addi	fp,sp,12
    5558:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    555c:	d0a00317 	ldw	r2,-32756(gp)
    5560:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5564:	00003106 	br	562c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    5568:	e0bfff17 	ldw	r2,-4(fp)
    556c:	10800217 	ldw	r2,8(r2)
    5570:	1009883a 	mov	r4,r2
    5574:	000039c0 	call	39c <strlen>
    5578:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    557c:	e0bfff17 	ldw	r2,-4(fp)
    5580:	10c00217 	ldw	r3,8(r2)
    5584:	e0bffe17 	ldw	r2,-8(fp)
    5588:	10bfffc4 	addi	r2,r2,-1
    558c:	1885883a 	add	r2,r3,r2
    5590:	10800003 	ldbu	r2,0(r2)
    5594:	10803fcc 	andi	r2,r2,255
    5598:	1080201c 	xori	r2,r2,128
    559c:	10bfe004 	addi	r2,r2,-128
    55a0:	10800bd8 	cmpnei	r2,r2,47
    55a4:	1000031e 	bne	r2,zero,55b4 <alt_find_file+0x6c>
    {
      len -= 1;
    55a8:	e0bffe17 	ldw	r2,-8(fp)
    55ac:	10bfffc4 	addi	r2,r2,-1
    55b0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    55b4:	e0bffe17 	ldw	r2,-8(fp)
    55b8:	e0fffd17 	ldw	r3,-12(fp)
    55bc:	1885883a 	add	r2,r3,r2
    55c0:	10800003 	ldbu	r2,0(r2)
    55c4:	10803fcc 	andi	r2,r2,255
    55c8:	1080201c 	xori	r2,r2,128
    55cc:	10bfe004 	addi	r2,r2,-128
    55d0:	10800be0 	cmpeqi	r2,r2,47
    55d4:	1000081e 	bne	r2,zero,55f8 <alt_find_file+0xb0>
    55d8:	e0bffe17 	ldw	r2,-8(fp)
    55dc:	e0fffd17 	ldw	r3,-12(fp)
    55e0:	1885883a 	add	r2,r3,r2
    55e4:	10800003 	ldbu	r2,0(r2)
    55e8:	10803fcc 	andi	r2,r2,255
    55ec:	1080201c 	xori	r2,r2,128
    55f0:	10bfe004 	addi	r2,r2,-128
    55f4:	10000a1e 	bne	r2,zero,5620 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    55f8:	e0bfff17 	ldw	r2,-4(fp)
    55fc:	10800217 	ldw	r2,8(r2)
    5600:	e0fffe17 	ldw	r3,-8(fp)
    5604:	180d883a 	mov	r6,r3
    5608:	e17ffd17 	ldw	r5,-12(fp)
    560c:	1009883a 	mov	r4,r2
    5610:	00057900 	call	5790 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    5614:	1000021e 	bne	r2,zero,5620 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    5618:	e0bfff17 	ldw	r2,-4(fp)
    561c:	00000706 	br	563c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    5620:	e0bfff17 	ldw	r2,-4(fp)
    5624:	10800017 	ldw	r2,0(r2)
    5628:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    562c:	e0ffff17 	ldw	r3,-4(fp)
    5630:	d0a00304 	addi	r2,gp,-32756
    5634:	18bfcc1e 	bne	r3,r2,5568 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    5638:	0005883a 	mov	r2,zero
}
    563c:	e037883a 	mov	sp,fp
    5640:	dfc00117 	ldw	ra,4(sp)
    5644:	df000017 	ldw	fp,0(sp)
    5648:	dec00204 	addi	sp,sp,8
    564c:	f800283a 	ret

00005650 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5650:	defffc04 	addi	sp,sp,-16
    5654:	df000315 	stw	fp,12(sp)
    5658:	df000304 	addi	fp,sp,12
    565c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    5660:	00bffa04 	movi	r2,-24
    5664:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5668:	e03fff15 	stw	zero,-4(fp)
    566c:	00001d06 	br	56e4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    5670:	e0ffff17 	ldw	r3,-4(fp)
    5674:	1805883a 	mov	r2,r3
    5678:	1085883a 	add	r2,r2,r2
    567c:	10c5883a 	add	r2,r2,r3
    5680:	100490ba 	slli	r2,r2,2
    5684:	00c00074 	movhi	r3,1
    5688:	10c7883a 	add	r3,r2,r3
    568c:	18816817 	ldw	r2,1440(r3)
    5690:	1000111e 	bne	r2,zero,56d8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    5694:	e0ffff17 	ldw	r3,-4(fp)
    5698:	1805883a 	mov	r2,r3
    569c:	1085883a 	add	r2,r2,r2
    56a0:	10c5883a 	add	r2,r2,r3
    56a4:	100490ba 	slli	r2,r2,2
    56a8:	e13ffd17 	ldw	r4,-12(fp)
    56ac:	00c00074 	movhi	r3,1
    56b0:	10c7883a 	add	r3,r2,r3
    56b4:	19016815 	stw	r4,1440(r3)
      if (i > alt_max_fd)
    56b8:	d0e00717 	ldw	r3,-32740(gp)
    56bc:	e0bfff17 	ldw	r2,-4(fp)
    56c0:	1880020e 	bge	r3,r2,56cc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    56c4:	e0bfff17 	ldw	r2,-4(fp)
    56c8:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
    56cc:	e0bfff17 	ldw	r2,-4(fp)
    56d0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    56d4:	00000706 	br	56f4 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
    56d8:	e0bfff17 	ldw	r2,-4(fp)
    56dc:	10800044 	addi	r2,r2,1
    56e0:	e0bfff15 	stw	r2,-4(fp)
    56e4:	e0bfff17 	ldw	r2,-4(fp)
    56e8:	10800810 	cmplti	r2,r2,32
    56ec:	103fe01e 	bne	r2,zero,5670 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    56f0:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    56f4:	e0bffe17 	ldw	r2,-8(fp)
}
    56f8:	e037883a 	mov	sp,fp
    56fc:	df000017 	ldw	fp,0(sp)
    5700:	dec00104 	addi	sp,sp,4
    5704:	f800283a 	ret

00005708 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    5708:	defffe04 	addi	sp,sp,-8
    570c:	df000115 	stw	fp,4(sp)
    5710:	df000104 	addi	fp,sp,4
    5714:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    5718:	e0bfff17 	ldw	r2,-4(fp)
    571c:	10bffe84 	addi	r2,r2,-6
    5720:	10c00428 	cmpgeui	r3,r2,16
    5724:	18c03fcc 	andi	r3,r3,255
    5728:	18000f1e 	bne	r3,zero,5768 <alt_exception_cause_generated_bad_addr+0x60>
    572c:	00c00044 	movi	r3,1
    5730:	1884983a 	sll	r2,r3,r2
    5734:	10e2c8cc 	andi	r3,r2,35619
    5738:	1806c03a 	cmpne	r3,r3,zero
    573c:	18c03fcc 	andi	r3,r3,255
    5740:	1800051e 	bne	r3,zero,5758 <alt_exception_cause_generated_bad_addr+0x50>
    5744:	1084100c 	andi	r2,r2,4160
    5748:	1004c03a 	cmpne	r2,r2,zero
    574c:	10803fcc 	andi	r2,r2,255
    5750:	1000031e 	bne	r2,zero,5760 <alt_exception_cause_generated_bad_addr+0x58>
    5754:	00000406 	br	5768 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    5758:	00800044 	movi	r2,1
    575c:	00000306 	br	576c <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    5760:	0005883a 	mov	r2,zero
    5764:	00000106 	br	576c <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
    5768:	0005883a 	mov	r2,zero
  }
}
    576c:	e037883a 	mov	sp,fp
    5770:	df000017 	ldw	fp,0(sp)
    5774:	dec00104 	addi	sp,sp,4
    5778:	f800283a 	ret

0000577c <atexit>:
    577c:	200b883a 	mov	r5,r4
    5780:	000f883a 	mov	r7,zero
    5784:	000d883a 	mov	r6,zero
    5788:	0009883a 	mov	r4,zero
    578c:	00058081 	jmpi	5808 <__register_exitproc>

00005790 <memcmp>:
    5790:	30800128 	cmpgeui	r2,r6,4
    5794:	10000d26 	beq	r2,zero,57cc <memcmp+0x3c>
    5798:	2144b03a 	or	r2,r4,r5
    579c:	108000cc 	andi	r2,r2,3
    57a0:	10000726 	beq	r2,zero,57c0 <memcmp+0x30>
    57a4:	30bfffc4 	addi	r2,r6,-1
    57a8:	00000a06 	br	57d4 <memcmp+0x44>
    57ac:	31bfff04 	addi	r6,r6,-4
    57b0:	30800128 	cmpgeui	r2,r6,4
    57b4:	21000104 	addi	r4,r4,4
    57b8:	29400104 	addi	r5,r5,4
    57bc:	10000326 	beq	r2,zero,57cc <memcmp+0x3c>
    57c0:	20c00017 	ldw	r3,0(r4)
    57c4:	28800017 	ldw	r2,0(r5)
    57c8:	18bff826 	beq	r3,r2,57ac <memcmp+0x1c>
    57cc:	30bfffc4 	addi	r2,r6,-1
    57d0:	30000b26 	beq	r6,zero,5800 <memcmp+0x70>
    57d4:	11800044 	addi	r6,r2,1
    57d8:	218d883a 	add	r6,r4,r6
    57dc:	00000106 	br	57e4 <memcmp+0x54>
    57e0:	21800726 	beq	r4,r6,5800 <memcmp+0x70>
    57e4:	20800003 	ldbu	r2,0(r4)
    57e8:	28c00003 	ldbu	r3,0(r5)
    57ec:	21000044 	addi	r4,r4,1
    57f0:	29400044 	addi	r5,r5,1
    57f4:	10fffa26 	beq	r2,r3,57e0 <memcmp+0x50>
    57f8:	10c5c83a 	sub	r2,r2,r3
    57fc:	f800283a 	ret
    5800:	0005883a 	mov	r2,zero
    5804:	f800283a 	ret

00005808 <__register_exitproc>:
    5808:	00800074 	movhi	r2,1
    580c:	1085f217 	ldw	r2,6088(r2)
    5810:	10001726 	beq	r2,zero,5870 <__register_exitproc+0x68>
    5814:	10c00117 	ldw	r3,4(r2)
    5818:	1a000808 	cmpgei	r8,r3,32
    581c:	40001d1e 	bne	r8,zero,5894 <__register_exitproc+0x8c>
    5820:	20000b26 	beq	r4,zero,5850 <__register_exitproc+0x48>
    5824:	181090ba 	slli	r8,r3,2
    5828:	02400044 	movi	r9,1
    582c:	48d2983a 	sll	r9,r9,r3
    5830:	1211883a 	add	r8,r2,r8
    5834:	41802215 	stw	r6,136(r8)
    5838:	11806217 	ldw	r6,392(r2)
    583c:	21000098 	cmpnei	r4,r4,2
    5840:	324cb03a 	or	r6,r6,r9
    5844:	11806215 	stw	r6,392(r2)
    5848:	41c04215 	stw	r7,264(r8)
    584c:	20000d26 	beq	r4,zero,5884 <__register_exitproc+0x7c>
    5850:	19000084 	addi	r4,r3,2
    5854:	200890ba 	slli	r4,r4,2
    5858:	18c00044 	addi	r3,r3,1
    585c:	10c00115 	stw	r3,4(r2)
    5860:	1105883a 	add	r2,r2,r4
    5864:	11400015 	stw	r5,0(r2)
    5868:	0005883a 	mov	r2,zero
    586c:	f800283a 	ret
    5870:	00800074 	movhi	r2,1
    5874:	10869304 	addi	r2,r2,6732
    5878:	00c00074 	movhi	r3,1
    587c:	1885f215 	stw	r2,6088(r3)
    5880:	003fe406 	br	5814 <__register_exitproc+0xc>
    5884:	11006317 	ldw	r4,396(r2)
    5888:	2248b03a 	or	r4,r4,r9
    588c:	11006315 	stw	r4,396(r2)
    5890:	003fef06 	br	5850 <__register_exitproc+0x48>
    5894:	00bfffc4 	movi	r2,-1
    5898:	f800283a 	ret
