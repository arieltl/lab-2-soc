
niosLab2.elf:     file format elf32-littlenios2
niosLab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006574 memsz 0x00006574 flags r-x
    LOAD off    0x00008000 vaddr 0x00018000 paddr 0x00016594 align 2**12
         filesz 0x00001e40 memsz 0x00001fd0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006364  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000334  00018000  00016594  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b0c  00018334  000168c8  00008334  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00019e40  000183d4  00009e40  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000183d4  000183d4  00009e40  2**0
                  CONTENTS
  7 .onchip_memory_0 00000000  00019fd0  00019fd0  00009e40  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00009e40  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a70  00000000  00000000  00009e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016d3f  00000000  00000000  0000a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006285  00000000  00000000  00021617  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006f08  00000000  00000000  0002789c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001720  00000000  00000000  0002e7a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002a93  00000000  00000000  0002fec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004cca  00000000  00000000  00032957  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00037624  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000690  00000000  00000000  00037638  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003a65a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0003a65d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003a669  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003a66a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0003a66b  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0003a676  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0003a681  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  0003a68c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000021  00000000  00000000  0003a694  2**0
                  CONTENTS, READONLY
 27 .jdi          00004e8b  00000000  00000000  0003a6b5  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003bbbd  00000000  00000000  0003f540  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
00018000 l    d  .rodata	00000000 .rodata
00018334 l    d  .rwdata	00000000 .rwdata
00019e40 l    d  .bss	00000000 .bss
000183d4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00019fd0 l    d  .onchip_memory_0	00000000 .onchip_memory_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab2_bsp//obj/HAL/src/crt0.o
000102d8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000104ec l     F .text	00000008 __fp_unlock
00010500 l     F .text	0000019c __sinit.part.1
0001069c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00018334 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0001318c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000132a0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000132cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000133c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000134a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_log_macro.o
0001359c l       .text	00000000 tx_next_char
000135c4 l       .text	00000000 end_tx
000135a4 l       .text	00000000 wait_tx_ready_loop
00000000 l    df *ABS*	00000000 alt_log_printf.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00014040 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000142f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019e30 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0001470c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014854 l     F .text	00000034 alt_dev_reg
00018da4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014b8c l     F .text	00000224 altera_avalon_jtag_uart_irq
00014db0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015534 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015994 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00015af4 l     F .text	0000003c alt_get_errno
00015b30 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00019e78 g     O .bss	00000004 alt_instruction_exception_handler
00012f5c g     F .text	00000054 _isatty_r
00014158 g     F .text	00000154 alt_main
00010380 g     F .text	000000c0 _puts_r
00019ed0 g     O .bss	00000100 alt_irq
00012c84 g     F .text	00000060 _lseek_r
000168c8 g       *ABS*	00000000 __flash_rwdata_start
00019fd0 g       *ABS*	00000000 __alt_heap_start
00012238 g     F .text	0000005c __sseek
0001084c g     F .text	00000010 __sinit
000106a4 g     F .text	00000078 __sfmoreglue
000142d0 g     F .text	00000024 __malloc_unlock
00013e40 g     F .text	0000005c alt_log_jtag_uart_isr_proc
00011924 g     F .text	0000015c memmove
00010834 g     F .text	00000018 _cleanup
00019e50 g     O .bss	00000001 alt_log_write_on_flag
00015d78 g     F .text	00000024 altera_nios2_gen2_irq_init
00019e53 g     O .bss	00000001 alt_log_jtag_uart_isr_on_flag
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012f00 g     F .text	0000005c _fstat_r
00019e4c g     O .bss	00000004 errno
000121b4 g     F .text	00000008 __seofread
00019ea4 g     O .bss	00000011 alt_log_write_buf
00019e64 g     O .bss	00000004 alt_argv
00021e04 g       *ABS*	00000000 _gp
00018b88 g     O .rwdata	00000180 alt_fd_list
00018d24 g     O .rwdata	0000001d alt_log_msg_alt_main
00019e52 g     O .bss	00000001 alt_log_jtag_uart_alarm_on_flag
00015d9c g     F .text	00000090 alt_find_dev
000117dc g     F .text	00000148 memcpy
000104f4 g     F .text	0000000c _cleanup_r
00015a78 g     F .text	0000007c alt_io_redirect
00016594 g       *ABS*	00000000 __DTOR_END__
00010440 g     F .text	00000014 puts
00015ff8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00014fa8 g     F .text	0000021c altera_avalon_jtag_uart_read
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000130a8 g     F .text	00000064 .hidden __udivsi3
000133fc g     F .text	000000ac isatty
00013fd4 g     F .text	0000006c alt_log_system_clock
00019e48 g     O .bss	00000004 __malloc_top_pad
0001089c g     F .text	000004c8 __sfvwrite_r
00013c34 g     F .text	00000058 alt_log_printf_proc
0001210c g     F .text	00000054 _sbrk_r
00019e54 g     O .bss	00000001 alt_log_jtag_uart_startup_info_on_flag
00012ea0 g     F .text	00000060 _read_r
00019e24 g     O .rwdata	00000004 alt_max_fd
000124a4 g     F .text	000000f0 _fclose_r
00012820 g     F .text	00000030 fflush
00019e44 g     O .bss	00000004 __malloc_max_sbrked_mem
00019eb8 g     O .bss	00000018 alt_log_jtag_uart_alarm_1
0001407c g     F .text	000000dc lseek
00019e04 g     O .rwdata	00000004 _global_impure_ptr
00011ba8 g     F .text	00000564 _realloc_r
00019fd0 g       *ABS*	00000000 __bss_end
000158a4 g     F .text	000000f0 alt_iic_isr_register
00014604 g     F .text	00000108 alt_tick
00019e58 g     O .bss	00000004 alt_system_clock_in_sec
00013df4 g     F .text	0000004c alt_log_jtag_uart_startup_info
0001086c g     F .text	00000018 __fp_lock_all
00015858 g     F .text	0000004c alt_ic_irq_enabled
00014568 g     F .text	0000009c alt_alarm_stop
00019e51 g     O .bss	00000001 alt_log_sys_clk_on_flag
00019e74 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00013674 g     F .text	000005c0 alt_log_private_printf
00018b60 g     O .rwdata	00000028 alt_dev_null
00018d08 g     O .rwdata	00000019 alt_log_msg_bss
00015514 g     F .text	00000020 alt_dcache_flush_all
00019e40 g       *ABS*	00000000 __ram_rwdata_end
00019e1c g     O .rwdata	00000008 alt_dev_list
00014748 g     F .text	0000010c write
00018334 g       *ABS*	00000000 __ram_rodata_end
00013308 g     F .text	000000b8 fstat
0001310c g     F .text	00000058 .hidden __umodsi3
00019fd0 g       *ABS*	00000000 end
000135c8 g     F .text	0000004c alt_log_txchar
00014a6c g     F .text	00000120 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00016594 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
000151c4 g     F .text	00000224 altera_avalon_jtag_uart_write
0001085c g     F .text	00000004 __sfp_lock_acquire
000116f8 g     F .text	000000e4 memchr
00012974 g     F .text	00000310 _free_r
00016360 g     F .text	00000180 __call_exitprocs
00019e0c g     O .rwdata	00000004 __malloc_sbrk_base
00010230 g     F .text	000000ac _start
00019e6c g     O .bss	00000004 _alt_tick_rate
00019e70 g     O .bss	00000004 _alt_nticks
00014330 g     F .text	00000104 read
000148c0 g     F .text	00000048 alt_sys_init
00016248 g     F .text	00000118 __register_exitproc
00013594 g       .text	00000000 tx_log_str
00014e50 g     F .text	00000068 altera_avalon_jtag_uart_close
00013164 g     F .text	00000028 .hidden __mulsi3
00018334 g       *ABS*	00000000 __ram_rwdata_start
0001615c g     F .text	000000ec strncpy
00018000 g       *ABS*	00000000 __ram_rodata_start
00019e7c g     O .bss	00000028 __malloc_current_mallinfo
00019e2c g     O .rwdata	00000004 alt_log_boot_on_flag
00014908 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015f34 g     F .text	000000c4 alt_get_fd
00012450 g     F .text	00000054 _close_r
00013d04 g     F .text	000000f0 alt_log_jtag_uart_print_control_reg
000160e0 g     F .text	0000007c memcmp
000149c8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019fd0 g       *ABS*	00000000 __alt_stack_base
00014a18 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000122fc g     F .text	00000154 __swsetup_r
0001071c g     F .text	00000118 __sfp
00018758 g     O .rwdata	00000408 __malloc_av_
00010868 g     F .text	00000004 __sinit_lock_release
00012160 g     F .text	00000054 __sread
00015e2c g     F .text	00000108 alt_find_file
00015570 g     F .text	000000a4 alt_dev_llist_insert
000142ac g     F .text	00000024 __malloc_lock
000144b8 g     F .text	000000b0 sbrk
000127c4 g     F .text	0000005c _fflush_r
00019e40 g       *ABS*	00000000 __bss_start
00011a80 g     F .text	00000128 memset
00010320 g     F .text	00000060 main
00019e68 g     O .bss	00000004 alt_envp
00019e40 g     O .bss	00000004 __malloc_max_total_mem
00014968 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00018000 g       *ABS*	00000000 __alt_mem_onchip_memory_0
00012294 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00012594 g     F .text	00000014 fclose
00010eec g     F .text	0000080c _malloc_r
00019e28 g     O .rwdata	00000004 alt_errno
00013c8c g     F .text	00000078 altera_avalon_jtag_uart_report_log
00010d64 g     F .text	000000c4 _fwalk
00012fb0 g     F .text	00000084 .hidden __divsi3
00018d78 g     O .rwdata	0000002a alt_log_msg_cache
00012850 g     F .text	00000124 _malloc_trim_r
00016594 g       *ABS*	00000000 __CTOR_END__
00016594 g       *ABS*	00000000 __flash_rodata_start
00016594 g       *ABS*	00000000 __DTOR_LIST__
000102dc g     F .text	00000044 delay
00014888 g     F .text	00000038 alt_irq_init
00014434 g     F .text	00000084 alt_release_fd
00018d44 g     O .rwdata	00000031 alt_log_msg_stackpointer
00016094 g     F .text	00000014 atexit
0001229c g     F .text	00000060 _write_r
00019e08 g     O .rwdata	00000004 _impure_ptr
00019e60 g     O .bss	00000004 alt_argc
000125a8 g     F .text	0000021c __sflush_r
00015674 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00010884 g     F .text	00000018 __fp_unlock_all
00019e14 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00019e5c g     O .bss	00000004 alt_log_sys_clk_count
00013e9c g     F .text	00000138 alt_log_write
000156f4 g     F .text	00000050 alt_ic_isr_register
00019e40 g       *ABS*	00000000 _edata
00019fd0 g       *ABS*	00000000 _end
00010230 g       *ABS*	00000000 __ram_exceptions_end
00014eb8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000157cc g     F .text	0000008c alt_ic_irq_disable
000121bc g     F .text	0000007c __swrite
00019e10 g     O .rwdata	00000004 __malloc_trim_threshold
000160a8 g     F .text	00000038 exit
00010e28 g     F .text	000000c4 _fwalk_reent
00013034 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010860 g     F .text	00000004 __sfp_lock_release
000164e0 g     F .text	000000b4 _exit
000153e8 g     F .text	0000012c alt_alarm_start
00012ce4 g     F .text	000001bc __smakebuf_r
00010454 g     F .text	00000098 strlen
00015c1c g     F .text	0000015c open
000156d4 g     F .text	00000020 alt_icache_flush_all
00019e3c g     O .rwdata	00000004 alt_priority_mask
00015744 g     F .text	00000088 alt_ic_irq_enable
00019e34 g     O .rwdata	00000008 alt_alarm_list
00015614 g     F .text	00000060 _do_ctors
000131c8 g     F .text	000000d8 close
00013614 g     F .text	00000060 alt_log_repchar
00013510 g     F .text	00000084 alt_load
00010864 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a7b404 	addi	r2,r2,-24880
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a7b404 	addi	r2,r2,-24880
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a01d17 	ldw	r2,-32652(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a01d17 	ldw	r2,-32652(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:
    .int 2, 1, 0b, 1b
    .popsection
#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)
   10230:	010000b4 	movhi	r4,2
   10234:	21278b04 	addi	r4,r4,-25044
   10238:	21400037 	ldwio	r5,0(r4)
   1023c:	01400326 	beq	zero,r5,1024c <_start+0x1c>
   10240:	010000b4 	movhi	r4,2
   10244:	21235e04 	addi	r4,r4,-29320
   10248:	00135940 	call	13594 <tx_log_str>

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)
   1024c:	010000b4 	movhi	r4,2
   10250:	21278b04 	addi	r4,r4,-25044
   10254:	21400037 	ldwio	r5,0(r4)
   10258:	01400326 	beq	zero,r5,10268 <_start+0x38>
   1025c:	010000b4 	movhi	r4,2
   10260:	21235104 	addi	r4,r4,-29372
   10264:	00135940 	call	13594 <tx_log_str>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10268:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   1026c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10270:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   10274:	d6878114 	ori	gp,gp,7684
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)
   10278:	010000b4 	movhi	r4,2
   1027c:	21278b04 	addi	r4,r4,-25044
   10280:	21400037 	ldwio	r5,0(r4)
   10284:	01400326 	beq	zero,r5,10294 <_start+0x64>
   10288:	010000b4 	movhi	r4,2
   1028c:	21234204 	addi	r4,r4,-29432
   10290:	00135940 	call	13594 <tx_log_str>

    movhi r2, %hi(__bss_start)
   10294:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10298:	10a79014 	ori	r2,r2,40512

    movhi r3, %hi(__bss_end)
   1029c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   102a0:	18e7f414 	ori	r3,r3,40912

    beq r2, r3, 1f
   102a4:	10c00326 	beq	r2,r3,102b4 <_start+0x84>

0:
    stw zero, (r2)
   102a8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   102ac:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   102b0:	10fffd36 	bltu	r2,r3,102a8 <_start+0x78>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   102b4:	00135100 	call	13510 <alt_load>

    ldw   et, %gprel(alt_stack_limit_value)(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)
   102b8:	010000b4 	movhi	r4,2
   102bc:	21278b04 	addi	r4,r4,-25044
   102c0:	21400037 	ldwio	r5,0(r4)
   102c4:	01400326 	beq	zero,r5,102d4 <_start+0xa4>
   102c8:	010000b4 	movhi	r4,2
   102cc:	21234904 	addi	r4,r4,-29404
   102d0:	00135940 	call	13594 <tx_log_str>

    /* Call the C entry point. It should never return. */
    call alt_main
   102d4:	00141580 	call	14158 <alt_main>

000102d8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   102d8:	003fff06 	br	102d8 <alt_after_alt_main>

000102dc <delay>:
#include <stdio.h>
#include "system.h"
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

void delay(int n){
   102dc:	defffd04 	addi	sp,sp,-12
   102e0:	df000215 	stw	fp,8(sp)
   102e4:	df000204 	addi	fp,sp,8
   102e8:	e13fff15 	stw	r4,-4(fp)
      unsigned int delay = 0 ;
   102ec:	e03ffe15 	stw	zero,-8(fp)
      while(delay < n){
   102f0:	00000306 	br	10300 <delay+0x24>
          delay++;
   102f4:	e0bffe17 	ldw	r2,-8(fp)
   102f8:	10800044 	addi	r2,r2,1
   102fc:	e0bffe15 	stw	r2,-8(fp)
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

void delay(int n){
      unsigned int delay = 0 ;
      while(delay < n){
   10300:	e0bfff17 	ldw	r2,-4(fp)
   10304:	e0fffe17 	ldw	r3,-8(fp)
   10308:	18bffa36 	bltu	r3,r2,102f4 <delay+0x18>
          delay++;
      }
}
   1030c:	0001883a 	nop
   10310:	e037883a 	mov	sp,fp
   10314:	df000017 	ldw	fp,0(sp)
   10318:	dec00104 	addi	sp,sp,4
   1031c:	f800283a 	ret

00010320 <main>:

int main(void){
   10320:	defffd04 	addi	sp,sp,-12
   10324:	dfc00215 	stw	ra,8(sp)
   10328:	df000115 	stw	fp,4(sp)
   1032c:	df000104 	addi	fp,sp,4
  unsigned int led = 0;
   10330:	e03fff15 	stw	zero,-4(fp)

  printf("Embarcados++ \n");
   10334:	010000b4 	movhi	r4,2
   10338:	21200004 	addi	r4,r4,-32768
   1033c:	00104400 	call	10440 <puts>

  while(1){
      if (led <= 5){
   10340:	e0bfff17 	ldw	r2,-4(fp)
   10344:	108001a8 	cmpgeui	r2,r2,6
   10348:	10000b1e 	bne	r2,zero,10378 <main+0x58>
          IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 <<led++);
   1034c:	e0bfff17 	ldw	r2,-4(fp)
   10350:	10c00044 	addi	r3,r2,1
   10354:	e0ffff15 	stw	r3,-4(fp)
   10358:	00c00044 	movi	r3,1
   1035c:	1886983a 	sll	r3,r3,r2
   10360:	008000b4 	movhi	r2,2
   10364:	10840004 	addi	r2,r2,4096
   10368:	10c00035 	stwio	r3,0(r2)
          delay(50000);
   1036c:	0130d414 	movui	r4,50000
   10370:	00102dc0 	call	102dc <delay>
   10374:	003ff206 	br	10340 <main+0x20>
      }
      else{
          led = 0;
   10378:	e03fff15 	stw	zero,-4(fp)
      }
  };
   1037c:	003ff006 	br	10340 <main+0x20>

00010380 <_puts_r>:
   10380:	defff604 	addi	sp,sp,-40
   10384:	dc000715 	stw	r16,28(sp)
   10388:	2021883a 	mov	r16,r4
   1038c:	2809883a 	mov	r4,r5
   10390:	dc400815 	stw	r17,32(sp)
   10394:	dfc00915 	stw	ra,36(sp)
   10398:	2823883a 	mov	r17,r5
   1039c:	00104540 	call	10454 <strlen>
   103a0:	10c00044 	addi	r3,r2,1
   103a4:	d8800115 	stw	r2,4(sp)
   103a8:	008000b4 	movhi	r2,2
   103ac:	10a00404 	addi	r2,r2,-32752
   103b0:	d8800215 	stw	r2,8(sp)
   103b4:	00800044 	movi	r2,1
   103b8:	d8800315 	stw	r2,12(sp)
   103bc:	00800084 	movi	r2,2
   103c0:	dc400015 	stw	r17,0(sp)
   103c4:	d8c00615 	stw	r3,24(sp)
   103c8:	dec00415 	stw	sp,16(sp)
   103cc:	d8800515 	stw	r2,20(sp)
   103d0:	80000226 	beq	r16,zero,103dc <_puts_r+0x5c>
   103d4:	80800e17 	ldw	r2,56(r16)
   103d8:	10001426 	beq	r2,zero,1042c <_puts_r+0xac>
   103dc:	81400217 	ldw	r5,8(r16)
   103e0:	2880030b 	ldhu	r2,12(r5)
   103e4:	10c8000c 	andi	r3,r2,8192
   103e8:	1800061e 	bne	r3,zero,10404 <_puts_r+0x84>
   103ec:	29001917 	ldw	r4,100(r5)
   103f0:	00f7ffc4 	movi	r3,-8193
   103f4:	10880014 	ori	r2,r2,8192
   103f8:	20c6703a 	and	r3,r4,r3
   103fc:	2880030d 	sth	r2,12(r5)
   10400:	28c01915 	stw	r3,100(r5)
   10404:	d9800404 	addi	r6,sp,16
   10408:	8009883a 	mov	r4,r16
   1040c:	001089c0 	call	1089c <__sfvwrite_r>
   10410:	1000091e 	bne	r2,zero,10438 <_puts_r+0xb8>
   10414:	00800284 	movi	r2,10
   10418:	dfc00917 	ldw	ra,36(sp)
   1041c:	dc400817 	ldw	r17,32(sp)
   10420:	dc000717 	ldw	r16,28(sp)
   10424:	dec00a04 	addi	sp,sp,40
   10428:	f800283a 	ret
   1042c:	8009883a 	mov	r4,r16
   10430:	001084c0 	call	1084c <__sinit>
   10434:	003fe906 	br	103dc <_puts_r+0x5c>
   10438:	00bfffc4 	movi	r2,-1
   1043c:	003ff606 	br	10418 <_puts_r+0x98>

00010440 <puts>:
   10440:	008000b4 	movhi	r2,2
   10444:	10a78204 	addi	r2,r2,-25080
   10448:	200b883a 	mov	r5,r4
   1044c:	11000017 	ldw	r4,0(r2)
   10450:	00103801 	jmpi	10380 <_puts_r>

00010454 <strlen>:
   10454:	208000cc 	andi	r2,r4,3
   10458:	10002026 	beq	r2,zero,104dc <strlen+0x88>
   1045c:	20800007 	ldb	r2,0(r4)
   10460:	10002026 	beq	r2,zero,104e4 <strlen+0x90>
   10464:	2005883a 	mov	r2,r4
   10468:	00000206 	br	10474 <strlen+0x20>
   1046c:	10c00007 	ldb	r3,0(r2)
   10470:	18001826 	beq	r3,zero,104d4 <strlen+0x80>
   10474:	10800044 	addi	r2,r2,1
   10478:	10c000cc 	andi	r3,r2,3
   1047c:	183ffb1e 	bne	r3,zero,1046c <strlen+0x18>
   10480:	10c00017 	ldw	r3,0(r2)
   10484:	01ffbff4 	movhi	r7,65279
   10488:	39ffbfc4 	addi	r7,r7,-257
   1048c:	00ca303a 	nor	r5,zero,r3
   10490:	01a02074 	movhi	r6,32897
   10494:	19c7883a 	add	r3,r3,r7
   10498:	31a02004 	addi	r6,r6,-32640
   1049c:	1946703a 	and	r3,r3,r5
   104a0:	1986703a 	and	r3,r3,r6
   104a4:	1800091e 	bne	r3,zero,104cc <strlen+0x78>
   104a8:	10800104 	addi	r2,r2,4
   104ac:	10c00017 	ldw	r3,0(r2)
   104b0:	19cb883a 	add	r5,r3,r7
   104b4:	00c6303a 	nor	r3,zero,r3
   104b8:	28c6703a 	and	r3,r5,r3
   104bc:	1986703a 	and	r3,r3,r6
   104c0:	183ff926 	beq	r3,zero,104a8 <strlen+0x54>
   104c4:	00000106 	br	104cc <strlen+0x78>
   104c8:	10800044 	addi	r2,r2,1
   104cc:	10c00007 	ldb	r3,0(r2)
   104d0:	183ffd1e 	bne	r3,zero,104c8 <strlen+0x74>
   104d4:	1105c83a 	sub	r2,r2,r4
   104d8:	f800283a 	ret
   104dc:	2005883a 	mov	r2,r4
   104e0:	003fe706 	br	10480 <strlen+0x2c>
   104e4:	0005883a 	mov	r2,zero
   104e8:	f800283a 	ret

000104ec <__fp_unlock>:
   104ec:	0005883a 	mov	r2,zero
   104f0:	f800283a 	ret

000104f4 <_cleanup_r>:
   104f4:	01400074 	movhi	r5,1
   104f8:	29492904 	addi	r5,r5,9380
   104fc:	0010e281 	jmpi	10e28 <_fwalk_reent>

00010500 <__sinit.part.1>:
   10500:	defff704 	addi	sp,sp,-36
   10504:	00c00074 	movhi	r3,1
   10508:	dfc00815 	stw	ra,32(sp)
   1050c:	ddc00715 	stw	r23,28(sp)
   10510:	dd800615 	stw	r22,24(sp)
   10514:	dd400515 	stw	r21,20(sp)
   10518:	dd000415 	stw	r20,16(sp)
   1051c:	dcc00315 	stw	r19,12(sp)
   10520:	dc800215 	stw	r18,8(sp)
   10524:	dc400115 	stw	r17,4(sp)
   10528:	dc000015 	stw	r16,0(sp)
   1052c:	18c13d04 	addi	r3,r3,1268
   10530:	24000117 	ldw	r16,4(r4)
   10534:	20c00f15 	stw	r3,60(r4)
   10538:	2080bb04 	addi	r2,r4,748
   1053c:	00c000c4 	movi	r3,3
   10540:	20c0b915 	stw	r3,740(r4)
   10544:	2080ba15 	stw	r2,744(r4)
   10548:	2000b815 	stw	zero,736(r4)
   1054c:	05c00204 	movi	r23,8
   10550:	00800104 	movi	r2,4
   10554:	2025883a 	mov	r18,r4
   10558:	b80d883a 	mov	r6,r23
   1055c:	81001704 	addi	r4,r16,92
   10560:	000b883a 	mov	r5,zero
   10564:	80000015 	stw	zero,0(r16)
   10568:	80000115 	stw	zero,4(r16)
   1056c:	80000215 	stw	zero,8(r16)
   10570:	8080030d 	sth	r2,12(r16)
   10574:	80001915 	stw	zero,100(r16)
   10578:	8000038d 	sth	zero,14(r16)
   1057c:	80000415 	stw	zero,16(r16)
   10580:	80000515 	stw	zero,20(r16)
   10584:	80000615 	stw	zero,24(r16)
   10588:	0011a800 	call	11a80 <memset>
   1058c:	05800074 	movhi	r22,1
   10590:	94400217 	ldw	r17,8(r18)
   10594:	05400074 	movhi	r21,1
   10598:	05000074 	movhi	r20,1
   1059c:	04c00074 	movhi	r19,1
   105a0:	b5885804 	addi	r22,r22,8544
   105a4:	ad486f04 	addi	r21,r21,8636
   105a8:	a5088e04 	addi	r20,r20,8760
   105ac:	9cc8a504 	addi	r19,r19,8852
   105b0:	85800815 	stw	r22,32(r16)
   105b4:	85400915 	stw	r21,36(r16)
   105b8:	85000a15 	stw	r20,40(r16)
   105bc:	84c00b15 	stw	r19,44(r16)
   105c0:	84000715 	stw	r16,28(r16)
   105c4:	00800284 	movi	r2,10
   105c8:	8880030d 	sth	r2,12(r17)
   105cc:	00800044 	movi	r2,1
   105d0:	b80d883a 	mov	r6,r23
   105d4:	89001704 	addi	r4,r17,92
   105d8:	000b883a 	mov	r5,zero
   105dc:	88000015 	stw	zero,0(r17)
   105e0:	88000115 	stw	zero,4(r17)
   105e4:	88000215 	stw	zero,8(r17)
   105e8:	88001915 	stw	zero,100(r17)
   105ec:	8880038d 	sth	r2,14(r17)
   105f0:	88000415 	stw	zero,16(r17)
   105f4:	88000515 	stw	zero,20(r17)
   105f8:	88000615 	stw	zero,24(r17)
   105fc:	0011a800 	call	11a80 <memset>
   10600:	94000317 	ldw	r16,12(r18)
   10604:	00800484 	movi	r2,18
   10608:	8c400715 	stw	r17,28(r17)
   1060c:	8d800815 	stw	r22,32(r17)
   10610:	8d400915 	stw	r21,36(r17)
   10614:	8d000a15 	stw	r20,40(r17)
   10618:	8cc00b15 	stw	r19,44(r17)
   1061c:	8080030d 	sth	r2,12(r16)
   10620:	00800084 	movi	r2,2
   10624:	80000015 	stw	zero,0(r16)
   10628:	80000115 	stw	zero,4(r16)
   1062c:	80000215 	stw	zero,8(r16)
   10630:	80001915 	stw	zero,100(r16)
   10634:	8080038d 	sth	r2,14(r16)
   10638:	80000415 	stw	zero,16(r16)
   1063c:	80000515 	stw	zero,20(r16)
   10640:	80000615 	stw	zero,24(r16)
   10644:	b80d883a 	mov	r6,r23
   10648:	000b883a 	mov	r5,zero
   1064c:	81001704 	addi	r4,r16,92
   10650:	0011a800 	call	11a80 <memset>
   10654:	00800044 	movi	r2,1
   10658:	84000715 	stw	r16,28(r16)
   1065c:	85800815 	stw	r22,32(r16)
   10660:	85400915 	stw	r21,36(r16)
   10664:	85000a15 	stw	r20,40(r16)
   10668:	84c00b15 	stw	r19,44(r16)
   1066c:	90800e15 	stw	r2,56(r18)
   10670:	dfc00817 	ldw	ra,32(sp)
   10674:	ddc00717 	ldw	r23,28(sp)
   10678:	dd800617 	ldw	r22,24(sp)
   1067c:	dd400517 	ldw	r21,20(sp)
   10680:	dd000417 	ldw	r20,16(sp)
   10684:	dcc00317 	ldw	r19,12(sp)
   10688:	dc800217 	ldw	r18,8(sp)
   1068c:	dc400117 	ldw	r17,4(sp)
   10690:	dc000017 	ldw	r16,0(sp)
   10694:	dec00904 	addi	sp,sp,36
   10698:	f800283a 	ret

0001069c <__fp_lock>:
   1069c:	0005883a 	mov	r2,zero
   106a0:	f800283a 	ret

000106a4 <__sfmoreglue>:
   106a4:	defffc04 	addi	sp,sp,-16
   106a8:	dc800215 	stw	r18,8(sp)
   106ac:	2825883a 	mov	r18,r5
   106b0:	dc000015 	stw	r16,0(sp)
   106b4:	01401a04 	movi	r5,104
   106b8:	2021883a 	mov	r16,r4
   106bc:	913fffc4 	addi	r4,r18,-1
   106c0:	dfc00315 	stw	ra,12(sp)
   106c4:	dc400115 	stw	r17,4(sp)
   106c8:	00131640 	call	13164 <__mulsi3>
   106cc:	8009883a 	mov	r4,r16
   106d0:	11401d04 	addi	r5,r2,116
   106d4:	1023883a 	mov	r17,r2
   106d8:	0010eec0 	call	10eec <_malloc_r>
   106dc:	1021883a 	mov	r16,r2
   106e0:	10000726 	beq	r2,zero,10700 <__sfmoreglue+0x5c>
   106e4:	11000304 	addi	r4,r2,12
   106e8:	10000015 	stw	zero,0(r2)
   106ec:	14800115 	stw	r18,4(r2)
   106f0:	11000215 	stw	r4,8(r2)
   106f4:	89801a04 	addi	r6,r17,104
   106f8:	000b883a 	mov	r5,zero
   106fc:	0011a800 	call	11a80 <memset>
   10700:	8005883a 	mov	r2,r16
   10704:	dfc00317 	ldw	ra,12(sp)
   10708:	dc800217 	ldw	r18,8(sp)
   1070c:	dc400117 	ldw	r17,4(sp)
   10710:	dc000017 	ldw	r16,0(sp)
   10714:	dec00404 	addi	sp,sp,16
   10718:	f800283a 	ret

0001071c <__sfp>:
   1071c:	defffb04 	addi	sp,sp,-20
   10720:	dc000015 	stw	r16,0(sp)
   10724:	040000b4 	movhi	r16,2
   10728:	84278104 	addi	r16,r16,-25084
   1072c:	dcc00315 	stw	r19,12(sp)
   10730:	2027883a 	mov	r19,r4
   10734:	81000017 	ldw	r4,0(r16)
   10738:	dfc00415 	stw	ra,16(sp)
   1073c:	dc800215 	stw	r18,8(sp)
   10740:	20800e17 	ldw	r2,56(r4)
   10744:	dc400115 	stw	r17,4(sp)
   10748:	1000021e 	bne	r2,zero,10754 <__sfp+0x38>
   1074c:	00105000 	call	10500 <__sinit.part.1>
   10750:	81000017 	ldw	r4,0(r16)
   10754:	2480b804 	addi	r18,r4,736
   10758:	047fffc4 	movi	r17,-1
   1075c:	91000117 	ldw	r4,4(r18)
   10760:	94000217 	ldw	r16,8(r18)
   10764:	213fffc4 	addi	r4,r4,-1
   10768:	20000a16 	blt	r4,zero,10794 <__sfp+0x78>
   1076c:	8080030f 	ldh	r2,12(r16)
   10770:	10000c26 	beq	r2,zero,107a4 <__sfp+0x88>
   10774:	80c01d04 	addi	r3,r16,116
   10778:	00000206 	br	10784 <__sfp+0x68>
   1077c:	18bfe60f 	ldh	r2,-104(r3)
   10780:	10000826 	beq	r2,zero,107a4 <__sfp+0x88>
   10784:	213fffc4 	addi	r4,r4,-1
   10788:	1c3ffd04 	addi	r16,r3,-12
   1078c:	18c01a04 	addi	r3,r3,104
   10790:	247ffa1e 	bne	r4,r17,1077c <__sfp+0x60>
   10794:	90800017 	ldw	r2,0(r18)
   10798:	10001d26 	beq	r2,zero,10810 <__sfp+0xf4>
   1079c:	1025883a 	mov	r18,r2
   107a0:	003fee06 	br	1075c <__sfp+0x40>
   107a4:	00bfffc4 	movi	r2,-1
   107a8:	8080038d 	sth	r2,14(r16)
   107ac:	00800044 	movi	r2,1
   107b0:	8080030d 	sth	r2,12(r16)
   107b4:	80001915 	stw	zero,100(r16)
   107b8:	80000015 	stw	zero,0(r16)
   107bc:	80000215 	stw	zero,8(r16)
   107c0:	80000115 	stw	zero,4(r16)
   107c4:	80000415 	stw	zero,16(r16)
   107c8:	80000515 	stw	zero,20(r16)
   107cc:	80000615 	stw	zero,24(r16)
   107d0:	01800204 	movi	r6,8
   107d4:	000b883a 	mov	r5,zero
   107d8:	81001704 	addi	r4,r16,92
   107dc:	0011a800 	call	11a80 <memset>
   107e0:	8005883a 	mov	r2,r16
   107e4:	80000c15 	stw	zero,48(r16)
   107e8:	80000d15 	stw	zero,52(r16)
   107ec:	80001115 	stw	zero,68(r16)
   107f0:	80001215 	stw	zero,72(r16)
   107f4:	dfc00417 	ldw	ra,16(sp)
   107f8:	dcc00317 	ldw	r19,12(sp)
   107fc:	dc800217 	ldw	r18,8(sp)
   10800:	dc400117 	ldw	r17,4(sp)
   10804:	dc000017 	ldw	r16,0(sp)
   10808:	dec00504 	addi	sp,sp,20
   1080c:	f800283a 	ret
   10810:	01400104 	movi	r5,4
   10814:	9809883a 	mov	r4,r19
   10818:	00106a40 	call	106a4 <__sfmoreglue>
   1081c:	90800015 	stw	r2,0(r18)
   10820:	103fde1e 	bne	r2,zero,1079c <__sfp+0x80>
   10824:	00800304 	movi	r2,12
   10828:	98800015 	stw	r2,0(r19)
   1082c:	0005883a 	mov	r2,zero
   10830:	003ff006 	br	107f4 <__sfp+0xd8>

00010834 <_cleanup>:
   10834:	008000b4 	movhi	r2,2
   10838:	10a78104 	addi	r2,r2,-25084
   1083c:	11000017 	ldw	r4,0(r2)
   10840:	01400074 	movhi	r5,1
   10844:	29492904 	addi	r5,r5,9380
   10848:	0010e281 	jmpi	10e28 <_fwalk_reent>

0001084c <__sinit>:
   1084c:	20800e17 	ldw	r2,56(r4)
   10850:	10000126 	beq	r2,zero,10858 <__sinit+0xc>
   10854:	f800283a 	ret
   10858:	00105001 	jmpi	10500 <__sinit.part.1>

0001085c <__sfp_lock_acquire>:
   1085c:	f800283a 	ret

00010860 <__sfp_lock_release>:
   10860:	f800283a 	ret

00010864 <__sinit_lock_acquire>:
   10864:	f800283a 	ret

00010868 <__sinit_lock_release>:
   10868:	f800283a 	ret

0001086c <__fp_lock_all>:
   1086c:	008000b4 	movhi	r2,2
   10870:	10a78204 	addi	r2,r2,-25080
   10874:	11000017 	ldw	r4,0(r2)
   10878:	01400074 	movhi	r5,1
   1087c:	2941a704 	addi	r5,r5,1692
   10880:	0010d641 	jmpi	10d64 <_fwalk>

00010884 <__fp_unlock_all>:
   10884:	008000b4 	movhi	r2,2
   10888:	10a78204 	addi	r2,r2,-25080
   1088c:	11000017 	ldw	r4,0(r2)
   10890:	01400074 	movhi	r5,1
   10894:	29413b04 	addi	r5,r5,1260
   10898:	0010d641 	jmpi	10d64 <_fwalk>

0001089c <__sfvwrite_r>:
   1089c:	30800217 	ldw	r2,8(r6)
   108a0:	10006726 	beq	r2,zero,10a40 <__sfvwrite_r+0x1a4>
   108a4:	28c0030b 	ldhu	r3,12(r5)
   108a8:	defff404 	addi	sp,sp,-48
   108ac:	dd400715 	stw	r21,28(sp)
   108b0:	dd000615 	stw	r20,24(sp)
   108b4:	dc000215 	stw	r16,8(sp)
   108b8:	dfc00b15 	stw	ra,44(sp)
   108bc:	df000a15 	stw	fp,40(sp)
   108c0:	ddc00915 	stw	r23,36(sp)
   108c4:	dd800815 	stw	r22,32(sp)
   108c8:	dcc00515 	stw	r19,20(sp)
   108cc:	dc800415 	stw	r18,16(sp)
   108d0:	dc400315 	stw	r17,12(sp)
   108d4:	1880020c 	andi	r2,r3,8
   108d8:	2821883a 	mov	r16,r5
   108dc:	202b883a 	mov	r21,r4
   108e0:	3029883a 	mov	r20,r6
   108e4:	10002726 	beq	r2,zero,10984 <__sfvwrite_r+0xe8>
   108e8:	28800417 	ldw	r2,16(r5)
   108ec:	10002526 	beq	r2,zero,10984 <__sfvwrite_r+0xe8>
   108f0:	1880008c 	andi	r2,r3,2
   108f4:	a4400017 	ldw	r17,0(r20)
   108f8:	10002a26 	beq	r2,zero,109a4 <__sfvwrite_r+0x108>
   108fc:	05a00034 	movhi	r22,32768
   10900:	0027883a 	mov	r19,zero
   10904:	0025883a 	mov	r18,zero
   10908:	b5bf0004 	addi	r22,r22,-1024
   1090c:	980d883a 	mov	r6,r19
   10910:	a809883a 	mov	r4,r21
   10914:	90004626 	beq	r18,zero,10a30 <__sfvwrite_r+0x194>
   10918:	900f883a 	mov	r7,r18
   1091c:	b480022e 	bgeu	r22,r18,10928 <__sfvwrite_r+0x8c>
   10920:	01e00034 	movhi	r7,32768
   10924:	39ff0004 	addi	r7,r7,-1024
   10928:	80800917 	ldw	r2,36(r16)
   1092c:	81400717 	ldw	r5,28(r16)
   10930:	103ee83a 	callr	r2
   10934:	00805a0e 	bge	zero,r2,10aa0 <__sfvwrite_r+0x204>
   10938:	a0c00217 	ldw	r3,8(r20)
   1093c:	98a7883a 	add	r19,r19,r2
   10940:	90a5c83a 	sub	r18,r18,r2
   10944:	1885c83a 	sub	r2,r3,r2
   10948:	a0800215 	stw	r2,8(r20)
   1094c:	103fef1e 	bne	r2,zero,1090c <__sfvwrite_r+0x70>
   10950:	0005883a 	mov	r2,zero
   10954:	dfc00b17 	ldw	ra,44(sp)
   10958:	df000a17 	ldw	fp,40(sp)
   1095c:	ddc00917 	ldw	r23,36(sp)
   10960:	dd800817 	ldw	r22,32(sp)
   10964:	dd400717 	ldw	r21,28(sp)
   10968:	dd000617 	ldw	r20,24(sp)
   1096c:	dcc00517 	ldw	r19,20(sp)
   10970:	dc800417 	ldw	r18,16(sp)
   10974:	dc400317 	ldw	r17,12(sp)
   10978:	dc000217 	ldw	r16,8(sp)
   1097c:	dec00c04 	addi	sp,sp,48
   10980:	f800283a 	ret
   10984:	800b883a 	mov	r5,r16
   10988:	a809883a 	mov	r4,r21
   1098c:	00122fc0 	call	122fc <__swsetup_r>
   10990:	1000ee1e 	bne	r2,zero,10d4c <__sfvwrite_r+0x4b0>
   10994:	80c0030b 	ldhu	r3,12(r16)
   10998:	a4400017 	ldw	r17,0(r20)
   1099c:	1880008c 	andi	r2,r3,2
   109a0:	103fd61e 	bne	r2,zero,108fc <__sfvwrite_r+0x60>
   109a4:	1880004c 	andi	r2,r3,1
   109a8:	1000421e 	bne	r2,zero,10ab4 <__sfvwrite_r+0x218>
   109ac:	0039883a 	mov	fp,zero
   109b0:	0025883a 	mov	r18,zero
   109b4:	90001a26 	beq	r18,zero,10a20 <__sfvwrite_r+0x184>
   109b8:	1880800c 	andi	r2,r3,512
   109bc:	84c00217 	ldw	r19,8(r16)
   109c0:	10002126 	beq	r2,zero,10a48 <__sfvwrite_r+0x1ac>
   109c4:	982f883a 	mov	r23,r19
   109c8:	94c09636 	bltu	r18,r19,10c24 <__sfvwrite_r+0x388>
   109cc:	1881200c 	andi	r2,r3,1152
   109d0:	1000a11e 	bne	r2,zero,10c58 <__sfvwrite_r+0x3bc>
   109d4:	81000017 	ldw	r4,0(r16)
   109d8:	b80d883a 	mov	r6,r23
   109dc:	e00b883a 	mov	r5,fp
   109e0:	00119240 	call	11924 <memmove>
   109e4:	80c00217 	ldw	r3,8(r16)
   109e8:	81000017 	ldw	r4,0(r16)
   109ec:	9005883a 	mov	r2,r18
   109f0:	1ce7c83a 	sub	r19,r3,r19
   109f4:	25cf883a 	add	r7,r4,r23
   109f8:	84c00215 	stw	r19,8(r16)
   109fc:	81c00015 	stw	r7,0(r16)
   10a00:	a0c00217 	ldw	r3,8(r20)
   10a04:	e0b9883a 	add	fp,fp,r2
   10a08:	90a5c83a 	sub	r18,r18,r2
   10a0c:	18a7c83a 	sub	r19,r3,r2
   10a10:	a4c00215 	stw	r19,8(r20)
   10a14:	983fce26 	beq	r19,zero,10950 <__sfvwrite_r+0xb4>
   10a18:	80c0030b 	ldhu	r3,12(r16)
   10a1c:	903fe61e 	bne	r18,zero,109b8 <__sfvwrite_r+0x11c>
   10a20:	8f000017 	ldw	fp,0(r17)
   10a24:	8c800117 	ldw	r18,4(r17)
   10a28:	8c400204 	addi	r17,r17,8
   10a2c:	003fe106 	br	109b4 <__sfvwrite_r+0x118>
   10a30:	8cc00017 	ldw	r19,0(r17)
   10a34:	8c800117 	ldw	r18,4(r17)
   10a38:	8c400204 	addi	r17,r17,8
   10a3c:	003fb306 	br	1090c <__sfvwrite_r+0x70>
   10a40:	0005883a 	mov	r2,zero
   10a44:	f800283a 	ret
   10a48:	81000017 	ldw	r4,0(r16)
   10a4c:	80800417 	ldw	r2,16(r16)
   10a50:	11005a36 	bltu	r2,r4,10bbc <__sfvwrite_r+0x320>
   10a54:	85c00517 	ldw	r23,20(r16)
   10a58:	95c05836 	bltu	r18,r23,10bbc <__sfvwrite_r+0x320>
   10a5c:	00a00034 	movhi	r2,32768
   10a60:	10bfffc4 	addi	r2,r2,-1
   10a64:	9009883a 	mov	r4,r18
   10a68:	1480012e 	bgeu	r2,r18,10a70 <__sfvwrite_r+0x1d4>
   10a6c:	1009883a 	mov	r4,r2
   10a70:	b80b883a 	mov	r5,r23
   10a74:	0012fb00 	call	12fb0 <__divsi3>
   10a78:	b80b883a 	mov	r5,r23
   10a7c:	1009883a 	mov	r4,r2
   10a80:	00131640 	call	13164 <__mulsi3>
   10a84:	81400717 	ldw	r5,28(r16)
   10a88:	80c00917 	ldw	r3,36(r16)
   10a8c:	100f883a 	mov	r7,r2
   10a90:	e00d883a 	mov	r6,fp
   10a94:	a809883a 	mov	r4,r21
   10a98:	183ee83a 	callr	r3
   10a9c:	00bfd816 	blt	zero,r2,10a00 <__sfvwrite_r+0x164>
   10aa0:	8080030b 	ldhu	r2,12(r16)
   10aa4:	10801014 	ori	r2,r2,64
   10aa8:	8080030d 	sth	r2,12(r16)
   10aac:	00bfffc4 	movi	r2,-1
   10ab0:	003fa806 	br	10954 <__sfvwrite_r+0xb8>
   10ab4:	0027883a 	mov	r19,zero
   10ab8:	0011883a 	mov	r8,zero
   10abc:	0039883a 	mov	fp,zero
   10ac0:	0025883a 	mov	r18,zero
   10ac4:	90001f26 	beq	r18,zero,10b44 <__sfvwrite_r+0x2a8>
   10ac8:	40005a26 	beq	r8,zero,10c34 <__sfvwrite_r+0x398>
   10acc:	982d883a 	mov	r22,r19
   10ad0:	94c0012e 	bgeu	r18,r19,10ad8 <__sfvwrite_r+0x23c>
   10ad4:	902d883a 	mov	r22,r18
   10ad8:	81000017 	ldw	r4,0(r16)
   10adc:	80800417 	ldw	r2,16(r16)
   10ae0:	b02f883a 	mov	r23,r22
   10ae4:	81c00517 	ldw	r7,20(r16)
   10ae8:	1100032e 	bgeu	r2,r4,10af8 <__sfvwrite_r+0x25c>
   10aec:	80c00217 	ldw	r3,8(r16)
   10af0:	38c7883a 	add	r3,r7,r3
   10af4:	1d801816 	blt	r3,r22,10b58 <__sfvwrite_r+0x2bc>
   10af8:	b1c03e16 	blt	r22,r7,10bf4 <__sfvwrite_r+0x358>
   10afc:	80800917 	ldw	r2,36(r16)
   10b00:	81400717 	ldw	r5,28(r16)
   10b04:	e00d883a 	mov	r6,fp
   10b08:	da000115 	stw	r8,4(sp)
   10b0c:	a809883a 	mov	r4,r21
   10b10:	103ee83a 	callr	r2
   10b14:	102f883a 	mov	r23,r2
   10b18:	da000117 	ldw	r8,4(sp)
   10b1c:	00bfe00e 	bge	zero,r2,10aa0 <__sfvwrite_r+0x204>
   10b20:	9de7c83a 	sub	r19,r19,r23
   10b24:	98001f26 	beq	r19,zero,10ba4 <__sfvwrite_r+0x308>
   10b28:	a0800217 	ldw	r2,8(r20)
   10b2c:	e5f9883a 	add	fp,fp,r23
   10b30:	95e5c83a 	sub	r18,r18,r23
   10b34:	15efc83a 	sub	r23,r2,r23
   10b38:	a5c00215 	stw	r23,8(r20)
   10b3c:	b83f8426 	beq	r23,zero,10950 <__sfvwrite_r+0xb4>
   10b40:	903fe11e 	bne	r18,zero,10ac8 <__sfvwrite_r+0x22c>
   10b44:	8f000017 	ldw	fp,0(r17)
   10b48:	8c800117 	ldw	r18,4(r17)
   10b4c:	0011883a 	mov	r8,zero
   10b50:	8c400204 	addi	r17,r17,8
   10b54:	003fdb06 	br	10ac4 <__sfvwrite_r+0x228>
   10b58:	180d883a 	mov	r6,r3
   10b5c:	e00b883a 	mov	r5,fp
   10b60:	da000115 	stw	r8,4(sp)
   10b64:	d8c00015 	stw	r3,0(sp)
   10b68:	00119240 	call	11924 <memmove>
   10b6c:	d8c00017 	ldw	r3,0(sp)
   10b70:	80800017 	ldw	r2,0(r16)
   10b74:	800b883a 	mov	r5,r16
   10b78:	a809883a 	mov	r4,r21
   10b7c:	10c5883a 	add	r2,r2,r3
   10b80:	80800015 	stw	r2,0(r16)
   10b84:	d8c00015 	stw	r3,0(sp)
   10b88:	00127c40 	call	127c4 <_fflush_r>
   10b8c:	d8c00017 	ldw	r3,0(sp)
   10b90:	da000117 	ldw	r8,4(sp)
   10b94:	103fc21e 	bne	r2,zero,10aa0 <__sfvwrite_r+0x204>
   10b98:	182f883a 	mov	r23,r3
   10b9c:	9de7c83a 	sub	r19,r19,r23
   10ba0:	983fe11e 	bne	r19,zero,10b28 <__sfvwrite_r+0x28c>
   10ba4:	800b883a 	mov	r5,r16
   10ba8:	a809883a 	mov	r4,r21
   10bac:	00127c40 	call	127c4 <_fflush_r>
   10bb0:	103fbb1e 	bne	r2,zero,10aa0 <__sfvwrite_r+0x204>
   10bb4:	0011883a 	mov	r8,zero
   10bb8:	003fdb06 	br	10b28 <__sfvwrite_r+0x28c>
   10bbc:	94c0012e 	bgeu	r18,r19,10bc4 <__sfvwrite_r+0x328>
   10bc0:	9027883a 	mov	r19,r18
   10bc4:	980d883a 	mov	r6,r19
   10bc8:	e00b883a 	mov	r5,fp
   10bcc:	00119240 	call	11924 <memmove>
   10bd0:	80800217 	ldw	r2,8(r16)
   10bd4:	80c00017 	ldw	r3,0(r16)
   10bd8:	14c5c83a 	sub	r2,r2,r19
   10bdc:	1cc7883a 	add	r3,r3,r19
   10be0:	80800215 	stw	r2,8(r16)
   10be4:	80c00015 	stw	r3,0(r16)
   10be8:	10004326 	beq	r2,zero,10cf8 <__sfvwrite_r+0x45c>
   10bec:	9805883a 	mov	r2,r19
   10bf0:	003f8306 	br	10a00 <__sfvwrite_r+0x164>
   10bf4:	b00d883a 	mov	r6,r22
   10bf8:	e00b883a 	mov	r5,fp
   10bfc:	da000115 	stw	r8,4(sp)
   10c00:	00119240 	call	11924 <memmove>
   10c04:	80800217 	ldw	r2,8(r16)
   10c08:	80c00017 	ldw	r3,0(r16)
   10c0c:	da000117 	ldw	r8,4(sp)
   10c10:	1585c83a 	sub	r2,r2,r22
   10c14:	1dad883a 	add	r22,r3,r22
   10c18:	80800215 	stw	r2,8(r16)
   10c1c:	85800015 	stw	r22,0(r16)
   10c20:	003fbf06 	br	10b20 <__sfvwrite_r+0x284>
   10c24:	81000017 	ldw	r4,0(r16)
   10c28:	9027883a 	mov	r19,r18
   10c2c:	902f883a 	mov	r23,r18
   10c30:	003f6906 	br	109d8 <__sfvwrite_r+0x13c>
   10c34:	900d883a 	mov	r6,r18
   10c38:	01400284 	movi	r5,10
   10c3c:	e009883a 	mov	r4,fp
   10c40:	00116f80 	call	116f8 <memchr>
   10c44:	10003e26 	beq	r2,zero,10d40 <__sfvwrite_r+0x4a4>
   10c48:	10800044 	addi	r2,r2,1
   10c4c:	1727c83a 	sub	r19,r2,fp
   10c50:	02000044 	movi	r8,1
   10c54:	003f9d06 	br	10acc <__sfvwrite_r+0x230>
   10c58:	80800517 	ldw	r2,20(r16)
   10c5c:	81400417 	ldw	r5,16(r16)
   10c60:	81c00017 	ldw	r7,0(r16)
   10c64:	10a7883a 	add	r19,r2,r2
   10c68:	9885883a 	add	r2,r19,r2
   10c6c:	1026d7fa 	srli	r19,r2,31
   10c70:	396dc83a 	sub	r22,r7,r5
   10c74:	b1000044 	addi	r4,r22,1
   10c78:	9885883a 	add	r2,r19,r2
   10c7c:	1027d07a 	srai	r19,r2,1
   10c80:	2485883a 	add	r2,r4,r18
   10c84:	980d883a 	mov	r6,r19
   10c88:	9880022e 	bgeu	r19,r2,10c94 <__sfvwrite_r+0x3f8>
   10c8c:	1027883a 	mov	r19,r2
   10c90:	100d883a 	mov	r6,r2
   10c94:	18c1000c 	andi	r3,r3,1024
   10c98:	18001c26 	beq	r3,zero,10d0c <__sfvwrite_r+0x470>
   10c9c:	300b883a 	mov	r5,r6
   10ca0:	a809883a 	mov	r4,r21
   10ca4:	0010eec0 	call	10eec <_malloc_r>
   10ca8:	102f883a 	mov	r23,r2
   10cac:	10002926 	beq	r2,zero,10d54 <__sfvwrite_r+0x4b8>
   10cb0:	81400417 	ldw	r5,16(r16)
   10cb4:	b00d883a 	mov	r6,r22
   10cb8:	1009883a 	mov	r4,r2
   10cbc:	00117dc0 	call	117dc <memcpy>
   10cc0:	8080030b 	ldhu	r2,12(r16)
   10cc4:	00fedfc4 	movi	r3,-1153
   10cc8:	10c4703a 	and	r2,r2,r3
   10ccc:	10802014 	ori	r2,r2,128
   10cd0:	8080030d 	sth	r2,12(r16)
   10cd4:	bd89883a 	add	r4,r23,r22
   10cd8:	9d8fc83a 	sub	r7,r19,r22
   10cdc:	85c00415 	stw	r23,16(r16)
   10ce0:	84c00515 	stw	r19,20(r16)
   10ce4:	81000015 	stw	r4,0(r16)
   10ce8:	9027883a 	mov	r19,r18
   10cec:	81c00215 	stw	r7,8(r16)
   10cf0:	902f883a 	mov	r23,r18
   10cf4:	003f3806 	br	109d8 <__sfvwrite_r+0x13c>
   10cf8:	800b883a 	mov	r5,r16
   10cfc:	a809883a 	mov	r4,r21
   10d00:	00127c40 	call	127c4 <_fflush_r>
   10d04:	103fb926 	beq	r2,zero,10bec <__sfvwrite_r+0x350>
   10d08:	003f6506 	br	10aa0 <__sfvwrite_r+0x204>
   10d0c:	a809883a 	mov	r4,r21
   10d10:	0011ba80 	call	11ba8 <_realloc_r>
   10d14:	102f883a 	mov	r23,r2
   10d18:	103fee1e 	bne	r2,zero,10cd4 <__sfvwrite_r+0x438>
   10d1c:	81400417 	ldw	r5,16(r16)
   10d20:	a809883a 	mov	r4,r21
   10d24:	00129740 	call	12974 <_free_r>
   10d28:	8080030b 	ldhu	r2,12(r16)
   10d2c:	00ffdfc4 	movi	r3,-129
   10d30:	1884703a 	and	r2,r3,r2
   10d34:	00c00304 	movi	r3,12
   10d38:	a8c00015 	stw	r3,0(r21)
   10d3c:	003f5906 	br	10aa4 <__sfvwrite_r+0x208>
   10d40:	94c00044 	addi	r19,r18,1
   10d44:	02000044 	movi	r8,1
   10d48:	003f6006 	br	10acc <__sfvwrite_r+0x230>
   10d4c:	00bfffc4 	movi	r2,-1
   10d50:	003f0006 	br	10954 <__sfvwrite_r+0xb8>
   10d54:	00800304 	movi	r2,12
   10d58:	a8800015 	stw	r2,0(r21)
   10d5c:	8080030b 	ldhu	r2,12(r16)
   10d60:	003f5006 	br	10aa4 <__sfvwrite_r+0x208>

00010d64 <_fwalk>:
   10d64:	defff704 	addi	sp,sp,-36
   10d68:	dd000415 	stw	r20,16(sp)
   10d6c:	dfc00815 	stw	ra,32(sp)
   10d70:	ddc00715 	stw	r23,28(sp)
   10d74:	dd800615 	stw	r22,24(sp)
   10d78:	dd400515 	stw	r21,20(sp)
   10d7c:	dcc00315 	stw	r19,12(sp)
   10d80:	dc800215 	stw	r18,8(sp)
   10d84:	dc400115 	stw	r17,4(sp)
   10d88:	dc000015 	stw	r16,0(sp)
   10d8c:	2500b804 	addi	r20,r4,736
   10d90:	a0002326 	beq	r20,zero,10e20 <_fwalk+0xbc>
   10d94:	282b883a 	mov	r21,r5
   10d98:	002f883a 	mov	r23,zero
   10d9c:	05800044 	movi	r22,1
   10da0:	04ffffc4 	movi	r19,-1
   10da4:	a4400117 	ldw	r17,4(r20)
   10da8:	a4800217 	ldw	r18,8(r20)
   10dac:	8c7fffc4 	addi	r17,r17,-1
   10db0:	88000d16 	blt	r17,zero,10de8 <_fwalk+0x84>
   10db4:	94000304 	addi	r16,r18,12
   10db8:	94800384 	addi	r18,r18,14
   10dbc:	8080000b 	ldhu	r2,0(r16)
   10dc0:	8c7fffc4 	addi	r17,r17,-1
   10dc4:	813ffd04 	addi	r4,r16,-12
   10dc8:	b080042e 	bgeu	r22,r2,10ddc <_fwalk+0x78>
   10dcc:	9080000f 	ldh	r2,0(r18)
   10dd0:	14c00226 	beq	r2,r19,10ddc <_fwalk+0x78>
   10dd4:	a83ee83a 	callr	r21
   10dd8:	b8aeb03a 	or	r23,r23,r2
   10ddc:	84001a04 	addi	r16,r16,104
   10de0:	94801a04 	addi	r18,r18,104
   10de4:	8cfff51e 	bne	r17,r19,10dbc <_fwalk+0x58>
   10de8:	a5000017 	ldw	r20,0(r20)
   10dec:	a03fed1e 	bne	r20,zero,10da4 <_fwalk+0x40>
   10df0:	b805883a 	mov	r2,r23
   10df4:	dfc00817 	ldw	ra,32(sp)
   10df8:	ddc00717 	ldw	r23,28(sp)
   10dfc:	dd800617 	ldw	r22,24(sp)
   10e00:	dd400517 	ldw	r21,20(sp)
   10e04:	dd000417 	ldw	r20,16(sp)
   10e08:	dcc00317 	ldw	r19,12(sp)
   10e0c:	dc800217 	ldw	r18,8(sp)
   10e10:	dc400117 	ldw	r17,4(sp)
   10e14:	dc000017 	ldw	r16,0(sp)
   10e18:	dec00904 	addi	sp,sp,36
   10e1c:	f800283a 	ret
   10e20:	002f883a 	mov	r23,zero
   10e24:	003ff206 	br	10df0 <_fwalk+0x8c>

00010e28 <_fwalk_reent>:
   10e28:	defff704 	addi	sp,sp,-36
   10e2c:	dd000415 	stw	r20,16(sp)
   10e30:	dfc00815 	stw	ra,32(sp)
   10e34:	ddc00715 	stw	r23,28(sp)
   10e38:	dd800615 	stw	r22,24(sp)
   10e3c:	dd400515 	stw	r21,20(sp)
   10e40:	dcc00315 	stw	r19,12(sp)
   10e44:	dc800215 	stw	r18,8(sp)
   10e48:	dc400115 	stw	r17,4(sp)
   10e4c:	dc000015 	stw	r16,0(sp)
   10e50:	2500b804 	addi	r20,r4,736
   10e54:	a0002326 	beq	r20,zero,10ee4 <_fwalk_reent+0xbc>
   10e58:	282b883a 	mov	r21,r5
   10e5c:	2027883a 	mov	r19,r4
   10e60:	002f883a 	mov	r23,zero
   10e64:	05800044 	movi	r22,1
   10e68:	04bfffc4 	movi	r18,-1
   10e6c:	a4400117 	ldw	r17,4(r20)
   10e70:	a4000217 	ldw	r16,8(r20)
   10e74:	8c7fffc4 	addi	r17,r17,-1
   10e78:	88000c16 	blt	r17,zero,10eac <_fwalk_reent+0x84>
   10e7c:	84000304 	addi	r16,r16,12
   10e80:	8080000b 	ldhu	r2,0(r16)
   10e84:	8c7fffc4 	addi	r17,r17,-1
   10e88:	817ffd04 	addi	r5,r16,-12
   10e8c:	b080052e 	bgeu	r22,r2,10ea4 <_fwalk_reent+0x7c>
   10e90:	8080008f 	ldh	r2,2(r16)
   10e94:	9809883a 	mov	r4,r19
   10e98:	14800226 	beq	r2,r18,10ea4 <_fwalk_reent+0x7c>
   10e9c:	a83ee83a 	callr	r21
   10ea0:	b8aeb03a 	or	r23,r23,r2
   10ea4:	84001a04 	addi	r16,r16,104
   10ea8:	8cbff51e 	bne	r17,r18,10e80 <_fwalk_reent+0x58>
   10eac:	a5000017 	ldw	r20,0(r20)
   10eb0:	a03fee1e 	bne	r20,zero,10e6c <_fwalk_reent+0x44>
   10eb4:	b805883a 	mov	r2,r23
   10eb8:	dfc00817 	ldw	ra,32(sp)
   10ebc:	ddc00717 	ldw	r23,28(sp)
   10ec0:	dd800617 	ldw	r22,24(sp)
   10ec4:	dd400517 	ldw	r21,20(sp)
   10ec8:	dd000417 	ldw	r20,16(sp)
   10ecc:	dcc00317 	ldw	r19,12(sp)
   10ed0:	dc800217 	ldw	r18,8(sp)
   10ed4:	dc400117 	ldw	r17,4(sp)
   10ed8:	dc000017 	ldw	r16,0(sp)
   10edc:	dec00904 	addi	sp,sp,36
   10ee0:	f800283a 	ret
   10ee4:	002f883a 	mov	r23,zero
   10ee8:	003ff206 	br	10eb4 <_fwalk_reent+0x8c>

00010eec <_malloc_r>:
   10eec:	defff504 	addi	sp,sp,-44
   10ef0:	dc800315 	stw	r18,12(sp)
   10ef4:	dfc00a15 	stw	ra,40(sp)
   10ef8:	df000915 	stw	fp,36(sp)
   10efc:	ddc00815 	stw	r23,32(sp)
   10f00:	dd800715 	stw	r22,28(sp)
   10f04:	dd400615 	stw	r21,24(sp)
   10f08:	dd000515 	stw	r20,20(sp)
   10f0c:	dcc00415 	stw	r19,16(sp)
   10f10:	dc400215 	stw	r17,8(sp)
   10f14:	dc000115 	stw	r16,4(sp)
   10f18:	288002c4 	addi	r2,r5,11
   10f1c:	00c00584 	movi	r3,22
   10f20:	2025883a 	mov	r18,r4
   10f24:	18807f2e 	bgeu	r3,r2,11124 <_malloc_r+0x238>
   10f28:	047ffe04 	movi	r17,-8
   10f2c:	1462703a 	and	r17,r2,r17
   10f30:	8800a316 	blt	r17,zero,111c0 <_malloc_r+0x2d4>
   10f34:	8940a236 	bltu	r17,r5,111c0 <_malloc_r+0x2d4>
   10f38:	00142ac0 	call	142ac <__malloc_lock>
   10f3c:	00807dc4 	movi	r2,503
   10f40:	1441e92e 	bgeu	r2,r17,116e8 <_malloc_r+0x7fc>
   10f44:	8804d27a 	srli	r2,r17,9
   10f48:	1000a126 	beq	r2,zero,111d0 <_malloc_r+0x2e4>
   10f4c:	00c00104 	movi	r3,4
   10f50:	18811e36 	bltu	r3,r2,113cc <_malloc_r+0x4e0>
   10f54:	8804d1ba 	srli	r2,r17,6
   10f58:	12000e44 	addi	r8,r2,57
   10f5c:	11c00e04 	addi	r7,r2,56
   10f60:	4209883a 	add	r4,r8,r8
   10f64:	04c000b4 	movhi	r19,2
   10f68:	2109883a 	add	r4,r4,r4
   10f6c:	9ce1d604 	addi	r19,r19,-30888
   10f70:	2109883a 	add	r4,r4,r4
   10f74:	9909883a 	add	r4,r19,r4
   10f78:	24000117 	ldw	r16,4(r4)
   10f7c:	213ffe04 	addi	r4,r4,-8
   10f80:	24009726 	beq	r4,r16,111e0 <_malloc_r+0x2f4>
   10f84:	80800117 	ldw	r2,4(r16)
   10f88:	01bfff04 	movi	r6,-4
   10f8c:	014003c4 	movi	r5,15
   10f90:	1184703a 	and	r2,r2,r6
   10f94:	1447c83a 	sub	r3,r2,r17
   10f98:	28c00716 	blt	r5,r3,10fb8 <_malloc_r+0xcc>
   10f9c:	1800920e 	bge	r3,zero,111e8 <_malloc_r+0x2fc>
   10fa0:	84000317 	ldw	r16,12(r16)
   10fa4:	24008e26 	beq	r4,r16,111e0 <_malloc_r+0x2f4>
   10fa8:	80800117 	ldw	r2,4(r16)
   10fac:	1184703a 	and	r2,r2,r6
   10fb0:	1447c83a 	sub	r3,r2,r17
   10fb4:	28fff90e 	bge	r5,r3,10f9c <_malloc_r+0xb0>
   10fb8:	3809883a 	mov	r4,r7
   10fbc:	018000b4 	movhi	r6,2
   10fc0:	9c000417 	ldw	r16,16(r19)
   10fc4:	31a1d604 	addi	r6,r6,-30888
   10fc8:	32000204 	addi	r8,r6,8
   10fcc:	82013426 	beq	r16,r8,114a0 <_malloc_r+0x5b4>
   10fd0:	80c00117 	ldw	r3,4(r16)
   10fd4:	00bfff04 	movi	r2,-4
   10fd8:	188e703a 	and	r7,r3,r2
   10fdc:	3c45c83a 	sub	r2,r7,r17
   10fe0:	00c003c4 	movi	r3,15
   10fe4:	18811f16 	blt	r3,r2,11464 <_malloc_r+0x578>
   10fe8:	32000515 	stw	r8,20(r6)
   10fec:	32000415 	stw	r8,16(r6)
   10ff0:	10007f0e 	bge	r2,zero,111f0 <_malloc_r+0x304>
   10ff4:	00807fc4 	movi	r2,511
   10ff8:	11c0fd36 	bltu	r2,r7,113f0 <_malloc_r+0x504>
   10ffc:	3806d0fa 	srli	r3,r7,3
   11000:	01c00044 	movi	r7,1
   11004:	30800117 	ldw	r2,4(r6)
   11008:	19400044 	addi	r5,r3,1
   1100c:	294b883a 	add	r5,r5,r5
   11010:	1807d0ba 	srai	r3,r3,2
   11014:	294b883a 	add	r5,r5,r5
   11018:	294b883a 	add	r5,r5,r5
   1101c:	298b883a 	add	r5,r5,r6
   11020:	38c6983a 	sll	r3,r7,r3
   11024:	29c00017 	ldw	r7,0(r5)
   11028:	2a7ffe04 	addi	r9,r5,-8
   1102c:	1886b03a 	or	r3,r3,r2
   11030:	82400315 	stw	r9,12(r16)
   11034:	81c00215 	stw	r7,8(r16)
   11038:	30c00115 	stw	r3,4(r6)
   1103c:	2c000015 	stw	r16,0(r5)
   11040:	3c000315 	stw	r16,12(r7)
   11044:	2005d0ba 	srai	r2,r4,2
   11048:	01400044 	movi	r5,1
   1104c:	288a983a 	sll	r5,r5,r2
   11050:	19406f36 	bltu	r3,r5,11210 <_malloc_r+0x324>
   11054:	28c4703a 	and	r2,r5,r3
   11058:	10000a1e 	bne	r2,zero,11084 <_malloc_r+0x198>
   1105c:	00bfff04 	movi	r2,-4
   11060:	294b883a 	add	r5,r5,r5
   11064:	2088703a 	and	r4,r4,r2
   11068:	28c4703a 	and	r2,r5,r3
   1106c:	21000104 	addi	r4,r4,4
   11070:	1000041e 	bne	r2,zero,11084 <_malloc_r+0x198>
   11074:	294b883a 	add	r5,r5,r5
   11078:	28c4703a 	and	r2,r5,r3
   1107c:	21000104 	addi	r4,r4,4
   11080:	103ffc26 	beq	r2,zero,11074 <_malloc_r+0x188>
   11084:	02bfff04 	movi	r10,-4
   11088:	024003c4 	movi	r9,15
   1108c:	21800044 	addi	r6,r4,1
   11090:	318d883a 	add	r6,r6,r6
   11094:	318d883a 	add	r6,r6,r6
   11098:	318d883a 	add	r6,r6,r6
   1109c:	998d883a 	add	r6,r19,r6
   110a0:	333ffe04 	addi	r12,r6,-8
   110a4:	2017883a 	mov	r11,r4
   110a8:	31800104 	addi	r6,r6,4
   110ac:	34000017 	ldw	r16,0(r6)
   110b0:	31fffd04 	addi	r7,r6,-12
   110b4:	81c0041e 	bne	r16,r7,110c8 <_malloc_r+0x1dc>
   110b8:	0000fb06 	br	114a8 <_malloc_r+0x5bc>
   110bc:	1801030e 	bge	r3,zero,114cc <_malloc_r+0x5e0>
   110c0:	84000317 	ldw	r16,12(r16)
   110c4:	81c0f826 	beq	r16,r7,114a8 <_malloc_r+0x5bc>
   110c8:	80800117 	ldw	r2,4(r16)
   110cc:	1284703a 	and	r2,r2,r10
   110d0:	1447c83a 	sub	r3,r2,r17
   110d4:	48fff90e 	bge	r9,r3,110bc <_malloc_r+0x1d0>
   110d8:	80800317 	ldw	r2,12(r16)
   110dc:	81000217 	ldw	r4,8(r16)
   110e0:	89400054 	ori	r5,r17,1
   110e4:	81400115 	stw	r5,4(r16)
   110e8:	20800315 	stw	r2,12(r4)
   110ec:	11000215 	stw	r4,8(r2)
   110f0:	8463883a 	add	r17,r16,r17
   110f4:	9c400515 	stw	r17,20(r19)
   110f8:	9c400415 	stw	r17,16(r19)
   110fc:	18800054 	ori	r2,r3,1
   11100:	88800115 	stw	r2,4(r17)
   11104:	8a000315 	stw	r8,12(r17)
   11108:	8a000215 	stw	r8,8(r17)
   1110c:	88e3883a 	add	r17,r17,r3
   11110:	88c00015 	stw	r3,0(r17)
   11114:	9009883a 	mov	r4,r18
   11118:	00142d00 	call	142d0 <__malloc_unlock>
   1111c:	80800204 	addi	r2,r16,8
   11120:	00001b06 	br	11190 <_malloc_r+0x2a4>
   11124:	04400404 	movi	r17,16
   11128:	89402536 	bltu	r17,r5,111c0 <_malloc_r+0x2d4>
   1112c:	00142ac0 	call	142ac <__malloc_lock>
   11130:	00800184 	movi	r2,6
   11134:	01000084 	movi	r4,2
   11138:	04c000b4 	movhi	r19,2
   1113c:	1085883a 	add	r2,r2,r2
   11140:	9ce1d604 	addi	r19,r19,-30888
   11144:	1085883a 	add	r2,r2,r2
   11148:	9885883a 	add	r2,r19,r2
   1114c:	14000117 	ldw	r16,4(r2)
   11150:	10fffe04 	addi	r3,r2,-8
   11154:	80c0d926 	beq	r16,r3,114bc <_malloc_r+0x5d0>
   11158:	80c00117 	ldw	r3,4(r16)
   1115c:	81000317 	ldw	r4,12(r16)
   11160:	00bfff04 	movi	r2,-4
   11164:	1884703a 	and	r2,r3,r2
   11168:	81400217 	ldw	r5,8(r16)
   1116c:	8085883a 	add	r2,r16,r2
   11170:	10c00117 	ldw	r3,4(r2)
   11174:	29000315 	stw	r4,12(r5)
   11178:	21400215 	stw	r5,8(r4)
   1117c:	18c00054 	ori	r3,r3,1
   11180:	10c00115 	stw	r3,4(r2)
   11184:	9009883a 	mov	r4,r18
   11188:	00142d00 	call	142d0 <__malloc_unlock>
   1118c:	80800204 	addi	r2,r16,8
   11190:	dfc00a17 	ldw	ra,40(sp)
   11194:	df000917 	ldw	fp,36(sp)
   11198:	ddc00817 	ldw	r23,32(sp)
   1119c:	dd800717 	ldw	r22,28(sp)
   111a0:	dd400617 	ldw	r21,24(sp)
   111a4:	dd000517 	ldw	r20,20(sp)
   111a8:	dcc00417 	ldw	r19,16(sp)
   111ac:	dc800317 	ldw	r18,12(sp)
   111b0:	dc400217 	ldw	r17,8(sp)
   111b4:	dc000117 	ldw	r16,4(sp)
   111b8:	dec00b04 	addi	sp,sp,44
   111bc:	f800283a 	ret
   111c0:	00800304 	movi	r2,12
   111c4:	90800015 	stw	r2,0(r18)
   111c8:	0005883a 	mov	r2,zero
   111cc:	003ff006 	br	11190 <_malloc_r+0x2a4>
   111d0:	01002004 	movi	r4,128
   111d4:	02001004 	movi	r8,64
   111d8:	01c00fc4 	movi	r7,63
   111dc:	003f6106 	br	10f64 <_malloc_r+0x78>
   111e0:	4009883a 	mov	r4,r8
   111e4:	003f7506 	br	10fbc <_malloc_r+0xd0>
   111e8:	81000317 	ldw	r4,12(r16)
   111ec:	003fde06 	br	11168 <_malloc_r+0x27c>
   111f0:	81c5883a 	add	r2,r16,r7
   111f4:	11400117 	ldw	r5,4(r2)
   111f8:	9009883a 	mov	r4,r18
   111fc:	29400054 	ori	r5,r5,1
   11200:	11400115 	stw	r5,4(r2)
   11204:	00142d00 	call	142d0 <__malloc_unlock>
   11208:	80800204 	addi	r2,r16,8
   1120c:	003fe006 	br	11190 <_malloc_r+0x2a4>
   11210:	9c000217 	ldw	r16,8(r19)
   11214:	00bfff04 	movi	r2,-4
   11218:	85800117 	ldw	r22,4(r16)
   1121c:	b0ac703a 	and	r22,r22,r2
   11220:	b4400336 	bltu	r22,r17,11230 <_malloc_r+0x344>
   11224:	b445c83a 	sub	r2,r22,r17
   11228:	00c003c4 	movi	r3,15
   1122c:	18805d16 	blt	r3,r2,113a4 <_malloc_r+0x4b8>
   11230:	05c000b4 	movhi	r23,2
   11234:	008000b4 	movhi	r2,2
   11238:	10a79204 	addi	r2,r2,-25016
   1123c:	bde78304 	addi	r23,r23,-25076
   11240:	15400017 	ldw	r21,0(r2)
   11244:	b8c00017 	ldw	r3,0(r23)
   11248:	00bfffc4 	movi	r2,-1
   1124c:	858d883a 	add	r6,r16,r22
   11250:	8d6b883a 	add	r21,r17,r21
   11254:	1880ea26 	beq	r3,r2,11600 <_malloc_r+0x714>
   11258:	ad4403c4 	addi	r21,r21,4111
   1125c:	00bc0004 	movi	r2,-4096
   11260:	a8aa703a 	and	r21,r21,r2
   11264:	a80b883a 	mov	r5,r21
   11268:	9009883a 	mov	r4,r18
   1126c:	d9800015 	stw	r6,0(sp)
   11270:	001210c0 	call	1210c <_sbrk_r>
   11274:	1029883a 	mov	r20,r2
   11278:	00bfffc4 	movi	r2,-1
   1127c:	d9800017 	ldw	r6,0(sp)
   11280:	a080e826 	beq	r20,r2,11624 <_malloc_r+0x738>
   11284:	a180a636 	bltu	r20,r6,11520 <_malloc_r+0x634>
   11288:	070000b4 	movhi	fp,2
   1128c:	e7279f04 	addi	fp,fp,-24964
   11290:	e0800017 	ldw	r2,0(fp)
   11294:	a887883a 	add	r3,r21,r2
   11298:	e0c00015 	stw	r3,0(fp)
   1129c:	3500e626 	beq	r6,r20,11638 <_malloc_r+0x74c>
   112a0:	b9000017 	ldw	r4,0(r23)
   112a4:	00bfffc4 	movi	r2,-1
   112a8:	2080ee26 	beq	r4,r2,11664 <_malloc_r+0x778>
   112ac:	a185c83a 	sub	r2,r20,r6
   112b0:	10c5883a 	add	r2,r2,r3
   112b4:	e0800015 	stw	r2,0(fp)
   112b8:	a0c001cc 	andi	r3,r20,7
   112bc:	1800bc26 	beq	r3,zero,115b0 <_malloc_r+0x6c4>
   112c0:	a0e9c83a 	sub	r20,r20,r3
   112c4:	00840204 	movi	r2,4104
   112c8:	a5000204 	addi	r20,r20,8
   112cc:	10c7c83a 	sub	r3,r2,r3
   112d0:	a545883a 	add	r2,r20,r21
   112d4:	1083ffcc 	andi	r2,r2,4095
   112d8:	18abc83a 	sub	r21,r3,r2
   112dc:	a80b883a 	mov	r5,r21
   112e0:	9009883a 	mov	r4,r18
   112e4:	001210c0 	call	1210c <_sbrk_r>
   112e8:	00ffffc4 	movi	r3,-1
   112ec:	10c0e126 	beq	r2,r3,11674 <_malloc_r+0x788>
   112f0:	1505c83a 	sub	r2,r2,r20
   112f4:	1545883a 	add	r2,r2,r21
   112f8:	10800054 	ori	r2,r2,1
   112fc:	e0c00017 	ldw	r3,0(fp)
   11300:	9d000215 	stw	r20,8(r19)
   11304:	a0800115 	stw	r2,4(r20)
   11308:	a8c7883a 	add	r3,r21,r3
   1130c:	e0c00015 	stw	r3,0(fp)
   11310:	84c00e26 	beq	r16,r19,1134c <_malloc_r+0x460>
   11314:	018003c4 	movi	r6,15
   11318:	3580a72e 	bgeu	r6,r22,115b8 <_malloc_r+0x6cc>
   1131c:	81400117 	ldw	r5,4(r16)
   11320:	013ffe04 	movi	r4,-8
   11324:	b0bffd04 	addi	r2,r22,-12
   11328:	1104703a 	and	r2,r2,r4
   1132c:	2900004c 	andi	r4,r5,1
   11330:	2088b03a 	or	r4,r4,r2
   11334:	81000115 	stw	r4,4(r16)
   11338:	01400144 	movi	r5,5
   1133c:	8089883a 	add	r4,r16,r2
   11340:	21400115 	stw	r5,4(r4)
   11344:	21400215 	stw	r5,8(r4)
   11348:	3080cd36 	bltu	r6,r2,11680 <_malloc_r+0x794>
   1134c:	008000b4 	movhi	r2,2
   11350:	10a79104 	addi	r2,r2,-25020
   11354:	11000017 	ldw	r4,0(r2)
   11358:	20c0012e 	bgeu	r4,r3,11360 <_malloc_r+0x474>
   1135c:	10c00015 	stw	r3,0(r2)
   11360:	008000b4 	movhi	r2,2
   11364:	10a79004 	addi	r2,r2,-25024
   11368:	11000017 	ldw	r4,0(r2)
   1136c:	9c000217 	ldw	r16,8(r19)
   11370:	20c0012e 	bgeu	r4,r3,11378 <_malloc_r+0x48c>
   11374:	10c00015 	stw	r3,0(r2)
   11378:	80c00117 	ldw	r3,4(r16)
   1137c:	00bfff04 	movi	r2,-4
   11380:	1886703a 	and	r3,r3,r2
   11384:	1c45c83a 	sub	r2,r3,r17
   11388:	1c400236 	bltu	r3,r17,11394 <_malloc_r+0x4a8>
   1138c:	00c003c4 	movi	r3,15
   11390:	18800416 	blt	r3,r2,113a4 <_malloc_r+0x4b8>
   11394:	9009883a 	mov	r4,r18
   11398:	00142d00 	call	142d0 <__malloc_unlock>
   1139c:	0005883a 	mov	r2,zero
   113a0:	003f7b06 	br	11190 <_malloc_r+0x2a4>
   113a4:	88c00054 	ori	r3,r17,1
   113a8:	80c00115 	stw	r3,4(r16)
   113ac:	8463883a 	add	r17,r16,r17
   113b0:	10800054 	ori	r2,r2,1
   113b4:	9c400215 	stw	r17,8(r19)
   113b8:	88800115 	stw	r2,4(r17)
   113bc:	9009883a 	mov	r4,r18
   113c0:	00142d00 	call	142d0 <__malloc_unlock>
   113c4:	80800204 	addi	r2,r16,8
   113c8:	003f7106 	br	11190 <_malloc_r+0x2a4>
   113cc:	00c00504 	movi	r3,20
   113d0:	18804a2e 	bgeu	r3,r2,114fc <_malloc_r+0x610>
   113d4:	00c01504 	movi	r3,84
   113d8:	18806e36 	bltu	r3,r2,11594 <_malloc_r+0x6a8>
   113dc:	8804d33a 	srli	r2,r17,12
   113e0:	12001bc4 	addi	r8,r2,111
   113e4:	11c01b84 	addi	r7,r2,110
   113e8:	4209883a 	add	r4,r8,r8
   113ec:	003edd06 	br	10f64 <_malloc_r+0x78>
   113f0:	3804d27a 	srli	r2,r7,9
   113f4:	00c00104 	movi	r3,4
   113f8:	1880442e 	bgeu	r3,r2,1150c <_malloc_r+0x620>
   113fc:	00c00504 	movi	r3,20
   11400:	18808136 	bltu	r3,r2,11608 <_malloc_r+0x71c>
   11404:	11401704 	addi	r5,r2,92
   11408:	10c016c4 	addi	r3,r2,91
   1140c:	294b883a 	add	r5,r5,r5
   11410:	294b883a 	add	r5,r5,r5
   11414:	294b883a 	add	r5,r5,r5
   11418:	994b883a 	add	r5,r19,r5
   1141c:	28800017 	ldw	r2,0(r5)
   11420:	018000b4 	movhi	r6,2
   11424:	297ffe04 	addi	r5,r5,-8
   11428:	31a1d604 	addi	r6,r6,-30888
   1142c:	28806526 	beq	r5,r2,115c4 <_malloc_r+0x6d8>
   11430:	01bfff04 	movi	r6,-4
   11434:	10c00117 	ldw	r3,4(r2)
   11438:	1986703a 	and	r3,r3,r6
   1143c:	38c0022e 	bgeu	r7,r3,11448 <_malloc_r+0x55c>
   11440:	10800217 	ldw	r2,8(r2)
   11444:	28bffb1e 	bne	r5,r2,11434 <_malloc_r+0x548>
   11448:	11400317 	ldw	r5,12(r2)
   1144c:	98c00117 	ldw	r3,4(r19)
   11450:	81400315 	stw	r5,12(r16)
   11454:	80800215 	stw	r2,8(r16)
   11458:	2c000215 	stw	r16,8(r5)
   1145c:	14000315 	stw	r16,12(r2)
   11460:	003ef806 	br	11044 <_malloc_r+0x158>
   11464:	88c00054 	ori	r3,r17,1
   11468:	80c00115 	stw	r3,4(r16)
   1146c:	8463883a 	add	r17,r16,r17
   11470:	34400515 	stw	r17,20(r6)
   11474:	34400415 	stw	r17,16(r6)
   11478:	10c00054 	ori	r3,r2,1
   1147c:	8a000315 	stw	r8,12(r17)
   11480:	8a000215 	stw	r8,8(r17)
   11484:	88c00115 	stw	r3,4(r17)
   11488:	88a3883a 	add	r17,r17,r2
   1148c:	88800015 	stw	r2,0(r17)
   11490:	9009883a 	mov	r4,r18
   11494:	00142d00 	call	142d0 <__malloc_unlock>
   11498:	80800204 	addi	r2,r16,8
   1149c:	003f3c06 	br	11190 <_malloc_r+0x2a4>
   114a0:	30c00117 	ldw	r3,4(r6)
   114a4:	003ee706 	br	11044 <_malloc_r+0x158>
   114a8:	5ac00044 	addi	r11,r11,1
   114ac:	588000cc 	andi	r2,r11,3
   114b0:	31800204 	addi	r6,r6,8
   114b4:	103efd1e 	bne	r2,zero,110ac <_malloc_r+0x1c0>
   114b8:	00002406 	br	1154c <_malloc_r+0x660>
   114bc:	14000317 	ldw	r16,12(r2)
   114c0:	143f251e 	bne	r2,r16,11158 <_malloc_r+0x26c>
   114c4:	21000084 	addi	r4,r4,2
   114c8:	003ebc06 	br	10fbc <_malloc_r+0xd0>
   114cc:	8085883a 	add	r2,r16,r2
   114d0:	10c00117 	ldw	r3,4(r2)
   114d4:	81000317 	ldw	r4,12(r16)
   114d8:	81400217 	ldw	r5,8(r16)
   114dc:	18c00054 	ori	r3,r3,1
   114e0:	10c00115 	stw	r3,4(r2)
   114e4:	29000315 	stw	r4,12(r5)
   114e8:	21400215 	stw	r5,8(r4)
   114ec:	9009883a 	mov	r4,r18
   114f0:	00142d00 	call	142d0 <__malloc_unlock>
   114f4:	80800204 	addi	r2,r16,8
   114f8:	003f2506 	br	11190 <_malloc_r+0x2a4>
   114fc:	12001704 	addi	r8,r2,92
   11500:	11c016c4 	addi	r7,r2,91
   11504:	4209883a 	add	r4,r8,r8
   11508:	003e9606 	br	10f64 <_malloc_r+0x78>
   1150c:	3804d1ba 	srli	r2,r7,6
   11510:	11400e44 	addi	r5,r2,57
   11514:	10c00e04 	addi	r3,r2,56
   11518:	294b883a 	add	r5,r5,r5
   1151c:	003fbc06 	br	11410 <_malloc_r+0x524>
   11520:	84ff5926 	beq	r16,r19,11288 <_malloc_r+0x39c>
   11524:	008000b4 	movhi	r2,2
   11528:	10a1d604 	addi	r2,r2,-30888
   1152c:	14000217 	ldw	r16,8(r2)
   11530:	00bfff04 	movi	r2,-4
   11534:	80c00117 	ldw	r3,4(r16)
   11538:	1886703a 	and	r3,r3,r2
   1153c:	003f9106 	br	11384 <_malloc_r+0x498>
   11540:	60800217 	ldw	r2,8(r12)
   11544:	213fffc4 	addi	r4,r4,-1
   11548:	1300651e 	bne	r2,r12,116e0 <_malloc_r+0x7f4>
   1154c:	208000cc 	andi	r2,r4,3
   11550:	633ffe04 	addi	r12,r12,-8
   11554:	103ffa1e 	bne	r2,zero,11540 <_malloc_r+0x654>
   11558:	98800117 	ldw	r2,4(r19)
   1155c:	0146303a 	nor	r3,zero,r5
   11560:	1884703a 	and	r2,r3,r2
   11564:	98800115 	stw	r2,4(r19)
   11568:	294b883a 	add	r5,r5,r5
   1156c:	117f2836 	bltu	r2,r5,11210 <_malloc_r+0x324>
   11570:	283f2726 	beq	r5,zero,11210 <_malloc_r+0x324>
   11574:	2886703a 	and	r3,r5,r2
   11578:	5809883a 	mov	r4,r11
   1157c:	183ec31e 	bne	r3,zero,1108c <_malloc_r+0x1a0>
   11580:	294b883a 	add	r5,r5,r5
   11584:	2886703a 	and	r3,r5,r2
   11588:	21000104 	addi	r4,r4,4
   1158c:	183ffc26 	beq	r3,zero,11580 <_malloc_r+0x694>
   11590:	003ebe06 	br	1108c <_malloc_r+0x1a0>
   11594:	00c05504 	movi	r3,340
   11598:	18801236 	bltu	r3,r2,115e4 <_malloc_r+0x6f8>
   1159c:	8804d3fa 	srli	r2,r17,15
   115a0:	12001e04 	addi	r8,r2,120
   115a4:	11c01dc4 	addi	r7,r2,119
   115a8:	4209883a 	add	r4,r8,r8
   115ac:	003e6d06 	br	10f64 <_malloc_r+0x78>
   115b0:	00c40004 	movi	r3,4096
   115b4:	003f4606 	br	112d0 <_malloc_r+0x3e4>
   115b8:	00800044 	movi	r2,1
   115bc:	a0800115 	stw	r2,4(r20)
   115c0:	003f7406 	br	11394 <_malloc_r+0x4a8>
   115c4:	1805d0ba 	srai	r2,r3,2
   115c8:	01c00044 	movi	r7,1
   115cc:	30c00117 	ldw	r3,4(r6)
   115d0:	388e983a 	sll	r7,r7,r2
   115d4:	2805883a 	mov	r2,r5
   115d8:	38c6b03a 	or	r3,r7,r3
   115dc:	30c00115 	stw	r3,4(r6)
   115e0:	003f9b06 	br	11450 <_malloc_r+0x564>
   115e4:	00c15504 	movi	r3,1364
   115e8:	18801a36 	bltu	r3,r2,11654 <_malloc_r+0x768>
   115ec:	8804d4ba 	srli	r2,r17,18
   115f0:	12001f44 	addi	r8,r2,125
   115f4:	11c01f04 	addi	r7,r2,124
   115f8:	4209883a 	add	r4,r8,r8
   115fc:	003e5906 	br	10f64 <_malloc_r+0x78>
   11600:	ad400404 	addi	r21,r21,16
   11604:	003f1706 	br	11264 <_malloc_r+0x378>
   11608:	00c01504 	movi	r3,84
   1160c:	18802336 	bltu	r3,r2,1169c <_malloc_r+0x7b0>
   11610:	3804d33a 	srli	r2,r7,12
   11614:	11401bc4 	addi	r5,r2,111
   11618:	10c01b84 	addi	r3,r2,110
   1161c:	294b883a 	add	r5,r5,r5
   11620:	003f7b06 	br	11410 <_malloc_r+0x524>
   11624:	9c000217 	ldw	r16,8(r19)
   11628:	00bfff04 	movi	r2,-4
   1162c:	80c00117 	ldw	r3,4(r16)
   11630:	1886703a 	and	r3,r3,r2
   11634:	003f5306 	br	11384 <_malloc_r+0x498>
   11638:	3083ffcc 	andi	r2,r6,4095
   1163c:	103f181e 	bne	r2,zero,112a0 <_malloc_r+0x3b4>
   11640:	99000217 	ldw	r4,8(r19)
   11644:	b545883a 	add	r2,r22,r21
   11648:	10800054 	ori	r2,r2,1
   1164c:	20800115 	stw	r2,4(r4)
   11650:	003f3e06 	br	1134c <_malloc_r+0x460>
   11654:	01003f84 	movi	r4,254
   11658:	02001fc4 	movi	r8,127
   1165c:	01c01f84 	movi	r7,126
   11660:	003e4006 	br	10f64 <_malloc_r+0x78>
   11664:	008000b4 	movhi	r2,2
   11668:	10a78304 	addi	r2,r2,-25076
   1166c:	15000015 	stw	r20,0(r2)
   11670:	003f1106 	br	112b8 <_malloc_r+0x3cc>
   11674:	00800044 	movi	r2,1
   11678:	002b883a 	mov	r21,zero
   1167c:	003f1f06 	br	112fc <_malloc_r+0x410>
   11680:	81400204 	addi	r5,r16,8
   11684:	9009883a 	mov	r4,r18
   11688:	00129740 	call	12974 <_free_r>
   1168c:	008000b4 	movhi	r2,2
   11690:	10a79f04 	addi	r2,r2,-24964
   11694:	10c00017 	ldw	r3,0(r2)
   11698:	003f2c06 	br	1134c <_malloc_r+0x460>
   1169c:	00c05504 	movi	r3,340
   116a0:	18800536 	bltu	r3,r2,116b8 <_malloc_r+0x7cc>
   116a4:	3804d3fa 	srli	r2,r7,15
   116a8:	11401e04 	addi	r5,r2,120
   116ac:	10c01dc4 	addi	r3,r2,119
   116b0:	294b883a 	add	r5,r5,r5
   116b4:	003f5606 	br	11410 <_malloc_r+0x524>
   116b8:	00c15504 	movi	r3,1364
   116bc:	18800536 	bltu	r3,r2,116d4 <_malloc_r+0x7e8>
   116c0:	3804d4ba 	srli	r2,r7,18
   116c4:	11401f44 	addi	r5,r2,125
   116c8:	10c01f04 	addi	r3,r2,124
   116cc:	294b883a 	add	r5,r5,r5
   116d0:	003f4f06 	br	11410 <_malloc_r+0x524>
   116d4:	01403f84 	movi	r5,254
   116d8:	00c01f84 	movi	r3,126
   116dc:	003f4c06 	br	11410 <_malloc_r+0x524>
   116e0:	98800117 	ldw	r2,4(r19)
   116e4:	003fa006 	br	11568 <_malloc_r+0x67c>
   116e8:	8808d0fa 	srli	r4,r17,3
   116ec:	20800044 	addi	r2,r4,1
   116f0:	1085883a 	add	r2,r2,r2
   116f4:	003e9006 	br	11138 <_malloc_r+0x24c>

000116f8 <memchr>:
   116f8:	208000cc 	andi	r2,r4,3
   116fc:	280f883a 	mov	r7,r5
   11700:	10003426 	beq	r2,zero,117d4 <memchr+0xdc>
   11704:	30bfffc4 	addi	r2,r6,-1
   11708:	30001a26 	beq	r6,zero,11774 <memchr+0x7c>
   1170c:	20c00003 	ldbu	r3,0(r4)
   11710:	29803fcc 	andi	r6,r5,255
   11714:	30c0051e 	bne	r6,r3,1172c <memchr+0x34>
   11718:	00001806 	br	1177c <memchr+0x84>
   1171c:	10001526 	beq	r2,zero,11774 <memchr+0x7c>
   11720:	20c00003 	ldbu	r3,0(r4)
   11724:	10bfffc4 	addi	r2,r2,-1
   11728:	30c01426 	beq	r6,r3,1177c <memchr+0x84>
   1172c:	21000044 	addi	r4,r4,1
   11730:	20c000cc 	andi	r3,r4,3
   11734:	183ff91e 	bne	r3,zero,1171c <memchr+0x24>
   11738:	020000c4 	movi	r8,3
   1173c:	40801136 	bltu	r8,r2,11784 <memchr+0x8c>
   11740:	10000c26 	beq	r2,zero,11774 <memchr+0x7c>
   11744:	20c00003 	ldbu	r3,0(r4)
   11748:	29403fcc 	andi	r5,r5,255
   1174c:	28c00b26 	beq	r5,r3,1177c <memchr+0x84>
   11750:	20c00044 	addi	r3,r4,1
   11754:	39803fcc 	andi	r6,r7,255
   11758:	2089883a 	add	r4,r4,r2
   1175c:	00000306 	br	1176c <memchr+0x74>
   11760:	18c00044 	addi	r3,r3,1
   11764:	197fffc3 	ldbu	r5,-1(r3)
   11768:	31400526 	beq	r6,r5,11780 <memchr+0x88>
   1176c:	1805883a 	mov	r2,r3
   11770:	20fffb1e 	bne	r4,r3,11760 <memchr+0x68>
   11774:	0005883a 	mov	r2,zero
   11778:	f800283a 	ret
   1177c:	2005883a 	mov	r2,r4
   11780:	f800283a 	ret
   11784:	28c03fcc 	andi	r3,r5,255
   11788:	1812923a 	slli	r9,r3,8
   1178c:	02ffbff4 	movhi	r11,65279
   11790:	02a02074 	movhi	r10,32897
   11794:	48d2b03a 	or	r9,r9,r3
   11798:	4806943a 	slli	r3,r9,16
   1179c:	5affbfc4 	addi	r11,r11,-257
   117a0:	52a02004 	addi	r10,r10,-32640
   117a4:	48d2b03a 	or	r9,r9,r3
   117a8:	20c00017 	ldw	r3,0(r4)
   117ac:	48c6f03a 	xor	r3,r9,r3
   117b0:	1acd883a 	add	r6,r3,r11
   117b4:	00c6303a 	nor	r3,zero,r3
   117b8:	30c6703a 	and	r3,r6,r3
   117bc:	1a86703a 	and	r3,r3,r10
   117c0:	183fe01e 	bne	r3,zero,11744 <memchr+0x4c>
   117c4:	10bfff04 	addi	r2,r2,-4
   117c8:	21000104 	addi	r4,r4,4
   117cc:	40bff636 	bltu	r8,r2,117a8 <memchr+0xb0>
   117d0:	003fdb06 	br	11740 <memchr+0x48>
   117d4:	3005883a 	mov	r2,r6
   117d8:	003fd706 	br	11738 <memchr+0x40>

000117dc <memcpy>:
   117dc:	defffd04 	addi	sp,sp,-12
   117e0:	dfc00215 	stw	ra,8(sp)
   117e4:	dc400115 	stw	r17,4(sp)
   117e8:	dc000015 	stw	r16,0(sp)
   117ec:	00c003c4 	movi	r3,15
   117f0:	2005883a 	mov	r2,r4
   117f4:	1980452e 	bgeu	r3,r6,1190c <memcpy+0x130>
   117f8:	2906b03a 	or	r3,r5,r4
   117fc:	18c000cc 	andi	r3,r3,3
   11800:	1800441e 	bne	r3,zero,11914 <memcpy+0x138>
   11804:	347ffc04 	addi	r17,r6,-16
   11808:	8822d13a 	srli	r17,r17,4
   1180c:	28c00104 	addi	r3,r5,4
   11810:	23400104 	addi	r13,r4,4
   11814:	8820913a 	slli	r16,r17,4
   11818:	2b000204 	addi	r12,r5,8
   1181c:	22c00204 	addi	r11,r4,8
   11820:	84000504 	addi	r16,r16,20
   11824:	2a800304 	addi	r10,r5,12
   11828:	22400304 	addi	r9,r4,12
   1182c:	2c21883a 	add	r16,r5,r16
   11830:	2811883a 	mov	r8,r5
   11834:	200f883a 	mov	r7,r4
   11838:	41000017 	ldw	r4,0(r8)
   1183c:	1fc00017 	ldw	ra,0(r3)
   11840:	63c00017 	ldw	r15,0(r12)
   11844:	39000015 	stw	r4,0(r7)
   11848:	53800017 	ldw	r14,0(r10)
   1184c:	6fc00015 	stw	ra,0(r13)
   11850:	5bc00015 	stw	r15,0(r11)
   11854:	4b800015 	stw	r14,0(r9)
   11858:	18c00404 	addi	r3,r3,16
   1185c:	39c00404 	addi	r7,r7,16
   11860:	42000404 	addi	r8,r8,16
   11864:	6b400404 	addi	r13,r13,16
   11868:	63000404 	addi	r12,r12,16
   1186c:	5ac00404 	addi	r11,r11,16
   11870:	52800404 	addi	r10,r10,16
   11874:	4a400404 	addi	r9,r9,16
   11878:	1c3fef1e 	bne	r3,r16,11838 <memcpy+0x5c>
   1187c:	89c00044 	addi	r7,r17,1
   11880:	380e913a 	slli	r7,r7,4
   11884:	310003cc 	andi	r4,r6,15
   11888:	02c000c4 	movi	r11,3
   1188c:	11c7883a 	add	r3,r2,r7
   11890:	29cb883a 	add	r5,r5,r7
   11894:	5900212e 	bgeu	r11,r4,1191c <memcpy+0x140>
   11898:	1813883a 	mov	r9,r3
   1189c:	2811883a 	mov	r8,r5
   118a0:	200f883a 	mov	r7,r4
   118a4:	42800017 	ldw	r10,0(r8)
   118a8:	4a400104 	addi	r9,r9,4
   118ac:	39ffff04 	addi	r7,r7,-4
   118b0:	4abfff15 	stw	r10,-4(r9)
   118b4:	42000104 	addi	r8,r8,4
   118b8:	59fffa36 	bltu	r11,r7,118a4 <memcpy+0xc8>
   118bc:	213fff04 	addi	r4,r4,-4
   118c0:	2008d0ba 	srli	r4,r4,2
   118c4:	318000cc 	andi	r6,r6,3
   118c8:	21000044 	addi	r4,r4,1
   118cc:	2109883a 	add	r4,r4,r4
   118d0:	2109883a 	add	r4,r4,r4
   118d4:	1907883a 	add	r3,r3,r4
   118d8:	290b883a 	add	r5,r5,r4
   118dc:	30000626 	beq	r6,zero,118f8 <memcpy+0x11c>
   118e0:	198d883a 	add	r6,r3,r6
   118e4:	29c00003 	ldbu	r7,0(r5)
   118e8:	18c00044 	addi	r3,r3,1
   118ec:	29400044 	addi	r5,r5,1
   118f0:	19ffffc5 	stb	r7,-1(r3)
   118f4:	19bffb1e 	bne	r3,r6,118e4 <memcpy+0x108>
   118f8:	dfc00217 	ldw	ra,8(sp)
   118fc:	dc400117 	ldw	r17,4(sp)
   11900:	dc000017 	ldw	r16,0(sp)
   11904:	dec00304 	addi	sp,sp,12
   11908:	f800283a 	ret
   1190c:	2007883a 	mov	r3,r4
   11910:	003ff206 	br	118dc <memcpy+0x100>
   11914:	2007883a 	mov	r3,r4
   11918:	003ff106 	br	118e0 <memcpy+0x104>
   1191c:	200d883a 	mov	r6,r4
   11920:	003fee06 	br	118dc <memcpy+0x100>

00011924 <memmove>:
   11924:	2005883a 	mov	r2,r4
   11928:	29000b2e 	bgeu	r5,r4,11958 <memmove+0x34>
   1192c:	298f883a 	add	r7,r5,r6
   11930:	21c0092e 	bgeu	r4,r7,11958 <memmove+0x34>
   11934:	2187883a 	add	r3,r4,r6
   11938:	198bc83a 	sub	r5,r3,r6
   1193c:	30004826 	beq	r6,zero,11a60 <memmove+0x13c>
   11940:	39ffffc4 	addi	r7,r7,-1
   11944:	39000003 	ldbu	r4,0(r7)
   11948:	18ffffc4 	addi	r3,r3,-1
   1194c:	19000005 	stb	r4,0(r3)
   11950:	28fffb1e 	bne	r5,r3,11940 <memmove+0x1c>
   11954:	f800283a 	ret
   11958:	00c003c4 	movi	r3,15
   1195c:	1980412e 	bgeu	r3,r6,11a64 <memmove+0x140>
   11960:	2886b03a 	or	r3,r5,r2
   11964:	18c000cc 	andi	r3,r3,3
   11968:	1800401e 	bne	r3,zero,11a6c <memmove+0x148>
   1196c:	33fffc04 	addi	r15,r6,-16
   11970:	781ed13a 	srli	r15,r15,4
   11974:	28c00104 	addi	r3,r5,4
   11978:	13400104 	addi	r13,r2,4
   1197c:	781c913a 	slli	r14,r15,4
   11980:	2b000204 	addi	r12,r5,8
   11984:	12c00204 	addi	r11,r2,8
   11988:	73800504 	addi	r14,r14,20
   1198c:	2a800304 	addi	r10,r5,12
   11990:	12400304 	addi	r9,r2,12
   11994:	2b9d883a 	add	r14,r5,r14
   11998:	2811883a 	mov	r8,r5
   1199c:	100f883a 	mov	r7,r2
   119a0:	41000017 	ldw	r4,0(r8)
   119a4:	39c00404 	addi	r7,r7,16
   119a8:	18c00404 	addi	r3,r3,16
   119ac:	393ffc15 	stw	r4,-16(r7)
   119b0:	193ffc17 	ldw	r4,-16(r3)
   119b4:	6b400404 	addi	r13,r13,16
   119b8:	5ac00404 	addi	r11,r11,16
   119bc:	693ffc15 	stw	r4,-16(r13)
   119c0:	61000017 	ldw	r4,0(r12)
   119c4:	4a400404 	addi	r9,r9,16
   119c8:	42000404 	addi	r8,r8,16
   119cc:	593ffc15 	stw	r4,-16(r11)
   119d0:	51000017 	ldw	r4,0(r10)
   119d4:	63000404 	addi	r12,r12,16
   119d8:	52800404 	addi	r10,r10,16
   119dc:	493ffc15 	stw	r4,-16(r9)
   119e0:	1bbfef1e 	bne	r3,r14,119a0 <memmove+0x7c>
   119e4:	79000044 	addi	r4,r15,1
   119e8:	2008913a 	slli	r4,r4,4
   119ec:	328003cc 	andi	r10,r6,15
   119f0:	02c000c4 	movi	r11,3
   119f4:	1107883a 	add	r3,r2,r4
   119f8:	290b883a 	add	r5,r5,r4
   119fc:	5a801e2e 	bgeu	r11,r10,11a78 <memmove+0x154>
   11a00:	1813883a 	mov	r9,r3
   11a04:	2811883a 	mov	r8,r5
   11a08:	500f883a 	mov	r7,r10
   11a0c:	41000017 	ldw	r4,0(r8)
   11a10:	4a400104 	addi	r9,r9,4
   11a14:	39ffff04 	addi	r7,r7,-4
   11a18:	493fff15 	stw	r4,-4(r9)
   11a1c:	42000104 	addi	r8,r8,4
   11a20:	59fffa36 	bltu	r11,r7,11a0c <memmove+0xe8>
   11a24:	513fff04 	addi	r4,r10,-4
   11a28:	2008d0ba 	srli	r4,r4,2
   11a2c:	318000cc 	andi	r6,r6,3
   11a30:	21000044 	addi	r4,r4,1
   11a34:	2109883a 	add	r4,r4,r4
   11a38:	2109883a 	add	r4,r4,r4
   11a3c:	1907883a 	add	r3,r3,r4
   11a40:	290b883a 	add	r5,r5,r4
   11a44:	30000b26 	beq	r6,zero,11a74 <memmove+0x150>
   11a48:	198d883a 	add	r6,r3,r6
   11a4c:	29c00003 	ldbu	r7,0(r5)
   11a50:	18c00044 	addi	r3,r3,1
   11a54:	29400044 	addi	r5,r5,1
   11a58:	19ffffc5 	stb	r7,-1(r3)
   11a5c:	19bffb1e 	bne	r3,r6,11a4c <memmove+0x128>
   11a60:	f800283a 	ret
   11a64:	1007883a 	mov	r3,r2
   11a68:	003ff606 	br	11a44 <memmove+0x120>
   11a6c:	1007883a 	mov	r3,r2
   11a70:	003ff506 	br	11a48 <memmove+0x124>
   11a74:	f800283a 	ret
   11a78:	500d883a 	mov	r6,r10
   11a7c:	003ff106 	br	11a44 <memmove+0x120>

00011a80 <memset>:
   11a80:	20c000cc 	andi	r3,r4,3
   11a84:	2005883a 	mov	r2,r4
   11a88:	18004426 	beq	r3,zero,11b9c <memset+0x11c>
   11a8c:	31ffffc4 	addi	r7,r6,-1
   11a90:	30004026 	beq	r6,zero,11b94 <memset+0x114>
   11a94:	2813883a 	mov	r9,r5
   11a98:	200d883a 	mov	r6,r4
   11a9c:	2007883a 	mov	r3,r4
   11aa0:	00000406 	br	11ab4 <memset+0x34>
   11aa4:	3a3fffc4 	addi	r8,r7,-1
   11aa8:	31800044 	addi	r6,r6,1
   11aac:	38003926 	beq	r7,zero,11b94 <memset+0x114>
   11ab0:	400f883a 	mov	r7,r8
   11ab4:	18c00044 	addi	r3,r3,1
   11ab8:	32400005 	stb	r9,0(r6)
   11abc:	1a0000cc 	andi	r8,r3,3
   11ac0:	403ff81e 	bne	r8,zero,11aa4 <memset+0x24>
   11ac4:	010000c4 	movi	r4,3
   11ac8:	21c02d2e 	bgeu	r4,r7,11b80 <memset+0x100>
   11acc:	29003fcc 	andi	r4,r5,255
   11ad0:	200c923a 	slli	r6,r4,8
   11ad4:	3108b03a 	or	r4,r6,r4
   11ad8:	200c943a 	slli	r6,r4,16
   11adc:	218cb03a 	or	r6,r4,r6
   11ae0:	010003c4 	movi	r4,15
   11ae4:	21c0182e 	bgeu	r4,r7,11b48 <memset+0xc8>
   11ae8:	3b3ffc04 	addi	r12,r7,-16
   11aec:	6018d13a 	srli	r12,r12,4
   11af0:	1a000104 	addi	r8,r3,4
   11af4:	1ac00204 	addi	r11,r3,8
   11af8:	6008913a 	slli	r4,r12,4
   11afc:	1a800304 	addi	r10,r3,12
   11b00:	1813883a 	mov	r9,r3
   11b04:	21000504 	addi	r4,r4,20
   11b08:	1909883a 	add	r4,r3,r4
   11b0c:	49800015 	stw	r6,0(r9)
   11b10:	41800015 	stw	r6,0(r8)
   11b14:	59800015 	stw	r6,0(r11)
   11b18:	51800015 	stw	r6,0(r10)
   11b1c:	42000404 	addi	r8,r8,16
   11b20:	4a400404 	addi	r9,r9,16
   11b24:	5ac00404 	addi	r11,r11,16
   11b28:	52800404 	addi	r10,r10,16
   11b2c:	413ff71e 	bne	r8,r4,11b0c <memset+0x8c>
   11b30:	63000044 	addi	r12,r12,1
   11b34:	6018913a 	slli	r12,r12,4
   11b38:	39c003cc 	andi	r7,r7,15
   11b3c:	010000c4 	movi	r4,3
   11b40:	1b07883a 	add	r3,r3,r12
   11b44:	21c00e2e 	bgeu	r4,r7,11b80 <memset+0x100>
   11b48:	1813883a 	mov	r9,r3
   11b4c:	3811883a 	mov	r8,r7
   11b50:	010000c4 	movi	r4,3
   11b54:	49800015 	stw	r6,0(r9)
   11b58:	423fff04 	addi	r8,r8,-4
   11b5c:	4a400104 	addi	r9,r9,4
   11b60:	223ffc36 	bltu	r4,r8,11b54 <memset+0xd4>
   11b64:	393fff04 	addi	r4,r7,-4
   11b68:	2008d0ba 	srli	r4,r4,2
   11b6c:	39c000cc 	andi	r7,r7,3
   11b70:	21000044 	addi	r4,r4,1
   11b74:	2109883a 	add	r4,r4,r4
   11b78:	2109883a 	add	r4,r4,r4
   11b7c:	1907883a 	add	r3,r3,r4
   11b80:	38000526 	beq	r7,zero,11b98 <memset+0x118>
   11b84:	19cf883a 	add	r7,r3,r7
   11b88:	19400005 	stb	r5,0(r3)
   11b8c:	18c00044 	addi	r3,r3,1
   11b90:	38fffd1e 	bne	r7,r3,11b88 <memset+0x108>
   11b94:	f800283a 	ret
   11b98:	f800283a 	ret
   11b9c:	2007883a 	mov	r3,r4
   11ba0:	300f883a 	mov	r7,r6
   11ba4:	003fc706 	br	11ac4 <memset+0x44>

00011ba8 <_realloc_r>:
   11ba8:	defff604 	addi	sp,sp,-40
   11bac:	dc800215 	stw	r18,8(sp)
   11bb0:	dfc00915 	stw	ra,36(sp)
   11bb4:	df000815 	stw	fp,32(sp)
   11bb8:	ddc00715 	stw	r23,28(sp)
   11bbc:	dd800615 	stw	r22,24(sp)
   11bc0:	dd400515 	stw	r21,20(sp)
   11bc4:	dd000415 	stw	r20,16(sp)
   11bc8:	dcc00315 	stw	r19,12(sp)
   11bcc:	dc400115 	stw	r17,4(sp)
   11bd0:	dc000015 	stw	r16,0(sp)
   11bd4:	3025883a 	mov	r18,r6
   11bd8:	2800b726 	beq	r5,zero,11eb8 <_realloc_r+0x310>
   11bdc:	282b883a 	mov	r21,r5
   11be0:	2029883a 	mov	r20,r4
   11be4:	00142ac0 	call	142ac <__malloc_lock>
   11be8:	a8bfff17 	ldw	r2,-4(r21)
   11bec:	043fff04 	movi	r16,-4
   11bf0:	90c002c4 	addi	r3,r18,11
   11bf4:	01000584 	movi	r4,22
   11bf8:	acfffe04 	addi	r19,r21,-8
   11bfc:	1420703a 	and	r16,r2,r16
   11c00:	20c0332e 	bgeu	r4,r3,11cd0 <_realloc_r+0x128>
   11c04:	047ffe04 	movi	r17,-8
   11c08:	1c62703a 	and	r17,r3,r17
   11c0c:	8807883a 	mov	r3,r17
   11c10:	88005816 	blt	r17,zero,11d74 <_realloc_r+0x1cc>
   11c14:	8c805736 	bltu	r17,r18,11d74 <_realloc_r+0x1cc>
   11c18:	80c0300e 	bge	r16,r3,11cdc <_realloc_r+0x134>
   11c1c:	070000b4 	movhi	fp,2
   11c20:	e721d604 	addi	fp,fp,-30888
   11c24:	e1c00217 	ldw	r7,8(fp)
   11c28:	9c09883a 	add	r4,r19,r16
   11c2c:	22000117 	ldw	r8,4(r4)
   11c30:	21c06326 	beq	r4,r7,11dc0 <_realloc_r+0x218>
   11c34:	017fff84 	movi	r5,-2
   11c38:	414a703a 	and	r5,r8,r5
   11c3c:	214b883a 	add	r5,r4,r5
   11c40:	29800117 	ldw	r6,4(r5)
   11c44:	3180004c 	andi	r6,r6,1
   11c48:	30003f26 	beq	r6,zero,11d48 <_realloc_r+0x1a0>
   11c4c:	1080004c 	andi	r2,r2,1
   11c50:	10008326 	beq	r2,zero,11e60 <_realloc_r+0x2b8>
   11c54:	900b883a 	mov	r5,r18
   11c58:	a009883a 	mov	r4,r20
   11c5c:	0010eec0 	call	10eec <_malloc_r>
   11c60:	1025883a 	mov	r18,r2
   11c64:	10011e26 	beq	r2,zero,120e0 <_realloc_r+0x538>
   11c68:	a93fff17 	ldw	r4,-4(r21)
   11c6c:	10fffe04 	addi	r3,r2,-8
   11c70:	00bfff84 	movi	r2,-2
   11c74:	2084703a 	and	r2,r4,r2
   11c78:	9885883a 	add	r2,r19,r2
   11c7c:	1880ee26 	beq	r3,r2,12038 <_realloc_r+0x490>
   11c80:	81bfff04 	addi	r6,r16,-4
   11c84:	00800904 	movi	r2,36
   11c88:	1180b836 	bltu	r2,r6,11f6c <_realloc_r+0x3c4>
   11c8c:	00c004c4 	movi	r3,19
   11c90:	19809636 	bltu	r3,r6,11eec <_realloc_r+0x344>
   11c94:	9005883a 	mov	r2,r18
   11c98:	a807883a 	mov	r3,r21
   11c9c:	19000017 	ldw	r4,0(r3)
   11ca0:	11000015 	stw	r4,0(r2)
   11ca4:	19000117 	ldw	r4,4(r3)
   11ca8:	11000115 	stw	r4,4(r2)
   11cac:	18c00217 	ldw	r3,8(r3)
   11cb0:	10c00215 	stw	r3,8(r2)
   11cb4:	a80b883a 	mov	r5,r21
   11cb8:	a009883a 	mov	r4,r20
   11cbc:	00129740 	call	12974 <_free_r>
   11cc0:	a009883a 	mov	r4,r20
   11cc4:	00142d00 	call	142d0 <__malloc_unlock>
   11cc8:	9005883a 	mov	r2,r18
   11ccc:	00001206 	br	11d18 <_realloc_r+0x170>
   11cd0:	00c00404 	movi	r3,16
   11cd4:	1823883a 	mov	r17,r3
   11cd8:	003fce06 	br	11c14 <_realloc_r+0x6c>
   11cdc:	a825883a 	mov	r18,r21
   11ce0:	8445c83a 	sub	r2,r16,r17
   11ce4:	00c003c4 	movi	r3,15
   11ce8:	18802636 	bltu	r3,r2,11d84 <_realloc_r+0x1dc>
   11cec:	99800117 	ldw	r6,4(r19)
   11cf0:	9c07883a 	add	r3,r19,r16
   11cf4:	3180004c 	andi	r6,r6,1
   11cf8:	3420b03a 	or	r16,r6,r16
   11cfc:	9c000115 	stw	r16,4(r19)
   11d00:	18800117 	ldw	r2,4(r3)
   11d04:	10800054 	ori	r2,r2,1
   11d08:	18800115 	stw	r2,4(r3)
   11d0c:	a009883a 	mov	r4,r20
   11d10:	00142d00 	call	142d0 <__malloc_unlock>
   11d14:	9005883a 	mov	r2,r18
   11d18:	dfc00917 	ldw	ra,36(sp)
   11d1c:	df000817 	ldw	fp,32(sp)
   11d20:	ddc00717 	ldw	r23,28(sp)
   11d24:	dd800617 	ldw	r22,24(sp)
   11d28:	dd400517 	ldw	r21,20(sp)
   11d2c:	dd000417 	ldw	r20,16(sp)
   11d30:	dcc00317 	ldw	r19,12(sp)
   11d34:	dc800217 	ldw	r18,8(sp)
   11d38:	dc400117 	ldw	r17,4(sp)
   11d3c:	dc000017 	ldw	r16,0(sp)
   11d40:	dec00a04 	addi	sp,sp,40
   11d44:	f800283a 	ret
   11d48:	017fff04 	movi	r5,-4
   11d4c:	414a703a 	and	r5,r8,r5
   11d50:	814d883a 	add	r6,r16,r5
   11d54:	30c01f16 	blt	r6,r3,11dd4 <_realloc_r+0x22c>
   11d58:	20800317 	ldw	r2,12(r4)
   11d5c:	20c00217 	ldw	r3,8(r4)
   11d60:	a825883a 	mov	r18,r21
   11d64:	3021883a 	mov	r16,r6
   11d68:	18800315 	stw	r2,12(r3)
   11d6c:	10c00215 	stw	r3,8(r2)
   11d70:	003fdb06 	br	11ce0 <_realloc_r+0x138>
   11d74:	00800304 	movi	r2,12
   11d78:	a0800015 	stw	r2,0(r20)
   11d7c:	0005883a 	mov	r2,zero
   11d80:	003fe506 	br	11d18 <_realloc_r+0x170>
   11d84:	98c00117 	ldw	r3,4(r19)
   11d88:	9c4b883a 	add	r5,r19,r17
   11d8c:	11000054 	ori	r4,r2,1
   11d90:	18c0004c 	andi	r3,r3,1
   11d94:	1c62b03a 	or	r17,r3,r17
   11d98:	9c400115 	stw	r17,4(r19)
   11d9c:	29000115 	stw	r4,4(r5)
   11da0:	2885883a 	add	r2,r5,r2
   11da4:	10c00117 	ldw	r3,4(r2)
   11da8:	29400204 	addi	r5,r5,8
   11dac:	a009883a 	mov	r4,r20
   11db0:	18c00054 	ori	r3,r3,1
   11db4:	10c00115 	stw	r3,4(r2)
   11db8:	00129740 	call	12974 <_free_r>
   11dbc:	003fd306 	br	11d0c <_realloc_r+0x164>
   11dc0:	017fff04 	movi	r5,-4
   11dc4:	414a703a 	and	r5,r8,r5
   11dc8:	89800404 	addi	r6,r17,16
   11dcc:	8151883a 	add	r8,r16,r5
   11dd0:	4180590e 	bge	r8,r6,11f38 <_realloc_r+0x390>
   11dd4:	1080004c 	andi	r2,r2,1
   11dd8:	103f9e1e 	bne	r2,zero,11c54 <_realloc_r+0xac>
   11ddc:	adbffe17 	ldw	r22,-8(r21)
   11de0:	00bfff04 	movi	r2,-4
   11de4:	9dadc83a 	sub	r22,r19,r22
   11de8:	b1800117 	ldw	r6,4(r22)
   11dec:	3084703a 	and	r2,r6,r2
   11df0:	20002026 	beq	r4,zero,11e74 <_realloc_r+0x2cc>
   11df4:	80af883a 	add	r23,r16,r2
   11df8:	b96f883a 	add	r23,r23,r5
   11dfc:	21c05f26 	beq	r4,r7,11f7c <_realloc_r+0x3d4>
   11e00:	b8c01c16 	blt	r23,r3,11e74 <_realloc_r+0x2cc>
   11e04:	20800317 	ldw	r2,12(r4)
   11e08:	20c00217 	ldw	r3,8(r4)
   11e0c:	81bfff04 	addi	r6,r16,-4
   11e10:	01000904 	movi	r4,36
   11e14:	18800315 	stw	r2,12(r3)
   11e18:	10c00215 	stw	r3,8(r2)
   11e1c:	b0c00217 	ldw	r3,8(r22)
   11e20:	b0800317 	ldw	r2,12(r22)
   11e24:	b4800204 	addi	r18,r22,8
   11e28:	18800315 	stw	r2,12(r3)
   11e2c:	10c00215 	stw	r3,8(r2)
   11e30:	21801b36 	bltu	r4,r6,11ea0 <_realloc_r+0x2f8>
   11e34:	008004c4 	movi	r2,19
   11e38:	1180352e 	bgeu	r2,r6,11f10 <_realloc_r+0x368>
   11e3c:	a8800017 	ldw	r2,0(r21)
   11e40:	b0800215 	stw	r2,8(r22)
   11e44:	a8800117 	ldw	r2,4(r21)
   11e48:	b0800315 	stw	r2,12(r22)
   11e4c:	008006c4 	movi	r2,27
   11e50:	11807f36 	bltu	r2,r6,12050 <_realloc_r+0x4a8>
   11e54:	b0800404 	addi	r2,r22,16
   11e58:	ad400204 	addi	r21,r21,8
   11e5c:	00002d06 	br	11f14 <_realloc_r+0x36c>
   11e60:	adbffe17 	ldw	r22,-8(r21)
   11e64:	00bfff04 	movi	r2,-4
   11e68:	9dadc83a 	sub	r22,r19,r22
   11e6c:	b1000117 	ldw	r4,4(r22)
   11e70:	2084703a 	and	r2,r4,r2
   11e74:	b03f7726 	beq	r22,zero,11c54 <_realloc_r+0xac>
   11e78:	80af883a 	add	r23,r16,r2
   11e7c:	b8ff7516 	blt	r23,r3,11c54 <_realloc_r+0xac>
   11e80:	b0800317 	ldw	r2,12(r22)
   11e84:	b0c00217 	ldw	r3,8(r22)
   11e88:	81bfff04 	addi	r6,r16,-4
   11e8c:	01000904 	movi	r4,36
   11e90:	18800315 	stw	r2,12(r3)
   11e94:	10c00215 	stw	r3,8(r2)
   11e98:	b4800204 	addi	r18,r22,8
   11e9c:	21bfe52e 	bgeu	r4,r6,11e34 <_realloc_r+0x28c>
   11ea0:	a80b883a 	mov	r5,r21
   11ea4:	9009883a 	mov	r4,r18
   11ea8:	00119240 	call	11924 <memmove>
   11eac:	b821883a 	mov	r16,r23
   11eb0:	b027883a 	mov	r19,r22
   11eb4:	003f8a06 	br	11ce0 <_realloc_r+0x138>
   11eb8:	300b883a 	mov	r5,r6
   11ebc:	dfc00917 	ldw	ra,36(sp)
   11ec0:	df000817 	ldw	fp,32(sp)
   11ec4:	ddc00717 	ldw	r23,28(sp)
   11ec8:	dd800617 	ldw	r22,24(sp)
   11ecc:	dd400517 	ldw	r21,20(sp)
   11ed0:	dd000417 	ldw	r20,16(sp)
   11ed4:	dcc00317 	ldw	r19,12(sp)
   11ed8:	dc800217 	ldw	r18,8(sp)
   11edc:	dc400117 	ldw	r17,4(sp)
   11ee0:	dc000017 	ldw	r16,0(sp)
   11ee4:	dec00a04 	addi	sp,sp,40
   11ee8:	0010eec1 	jmpi	10eec <_malloc_r>
   11eec:	a8c00017 	ldw	r3,0(r21)
   11ef0:	90c00015 	stw	r3,0(r18)
   11ef4:	a8c00117 	ldw	r3,4(r21)
   11ef8:	90c00115 	stw	r3,4(r18)
   11efc:	00c006c4 	movi	r3,27
   11f00:	19804536 	bltu	r3,r6,12018 <_realloc_r+0x470>
   11f04:	90800204 	addi	r2,r18,8
   11f08:	a8c00204 	addi	r3,r21,8
   11f0c:	003f6306 	br	11c9c <_realloc_r+0xf4>
   11f10:	9005883a 	mov	r2,r18
   11f14:	a8c00017 	ldw	r3,0(r21)
   11f18:	b821883a 	mov	r16,r23
   11f1c:	b027883a 	mov	r19,r22
   11f20:	10c00015 	stw	r3,0(r2)
   11f24:	a8c00117 	ldw	r3,4(r21)
   11f28:	10c00115 	stw	r3,4(r2)
   11f2c:	a8c00217 	ldw	r3,8(r21)
   11f30:	10c00215 	stw	r3,8(r2)
   11f34:	003f6a06 	br	11ce0 <_realloc_r+0x138>
   11f38:	9c67883a 	add	r19,r19,r17
   11f3c:	4445c83a 	sub	r2,r8,r17
   11f40:	e4c00215 	stw	r19,8(fp)
   11f44:	10800054 	ori	r2,r2,1
   11f48:	98800115 	stw	r2,4(r19)
   11f4c:	a8bfff17 	ldw	r2,-4(r21)
   11f50:	a009883a 	mov	r4,r20
   11f54:	1080004c 	andi	r2,r2,1
   11f58:	1462b03a 	or	r17,r2,r17
   11f5c:	ac7fff15 	stw	r17,-4(r21)
   11f60:	00142d00 	call	142d0 <__malloc_unlock>
   11f64:	a805883a 	mov	r2,r21
   11f68:	003f6b06 	br	11d18 <_realloc_r+0x170>
   11f6c:	a80b883a 	mov	r5,r21
   11f70:	9009883a 	mov	r4,r18
   11f74:	00119240 	call	11924 <memmove>
   11f78:	003f4e06 	br	11cb4 <_realloc_r+0x10c>
   11f7c:	89000404 	addi	r4,r17,16
   11f80:	b93fbc16 	blt	r23,r4,11e74 <_realloc_r+0x2cc>
   11f84:	b0800317 	ldw	r2,12(r22)
   11f88:	b0c00217 	ldw	r3,8(r22)
   11f8c:	81bfff04 	addi	r6,r16,-4
   11f90:	01000904 	movi	r4,36
   11f94:	18800315 	stw	r2,12(r3)
   11f98:	10c00215 	stw	r3,8(r2)
   11f9c:	b4800204 	addi	r18,r22,8
   11fa0:	21804336 	bltu	r4,r6,120b0 <_realloc_r+0x508>
   11fa4:	008004c4 	movi	r2,19
   11fa8:	11803f2e 	bgeu	r2,r6,120a8 <_realloc_r+0x500>
   11fac:	a8800017 	ldw	r2,0(r21)
   11fb0:	b0800215 	stw	r2,8(r22)
   11fb4:	a8800117 	ldw	r2,4(r21)
   11fb8:	b0800315 	stw	r2,12(r22)
   11fbc:	008006c4 	movi	r2,27
   11fc0:	11803f36 	bltu	r2,r6,120c0 <_realloc_r+0x518>
   11fc4:	b0800404 	addi	r2,r22,16
   11fc8:	ad400204 	addi	r21,r21,8
   11fcc:	a8c00017 	ldw	r3,0(r21)
   11fd0:	10c00015 	stw	r3,0(r2)
   11fd4:	a8c00117 	ldw	r3,4(r21)
   11fd8:	10c00115 	stw	r3,4(r2)
   11fdc:	a8c00217 	ldw	r3,8(r21)
   11fe0:	10c00215 	stw	r3,8(r2)
   11fe4:	b447883a 	add	r3,r22,r17
   11fe8:	bc45c83a 	sub	r2,r23,r17
   11fec:	e0c00215 	stw	r3,8(fp)
   11ff0:	10800054 	ori	r2,r2,1
   11ff4:	18800115 	stw	r2,4(r3)
   11ff8:	b0800117 	ldw	r2,4(r22)
   11ffc:	a009883a 	mov	r4,r20
   12000:	1080004c 	andi	r2,r2,1
   12004:	1462b03a 	or	r17,r2,r17
   12008:	b4400115 	stw	r17,4(r22)
   1200c:	00142d00 	call	142d0 <__malloc_unlock>
   12010:	9005883a 	mov	r2,r18
   12014:	003f4006 	br	11d18 <_realloc_r+0x170>
   12018:	a8c00217 	ldw	r3,8(r21)
   1201c:	90c00215 	stw	r3,8(r18)
   12020:	a8c00317 	ldw	r3,12(r21)
   12024:	90c00315 	stw	r3,12(r18)
   12028:	30801126 	beq	r6,r2,12070 <_realloc_r+0x4c8>
   1202c:	90800404 	addi	r2,r18,16
   12030:	a8c00404 	addi	r3,r21,16
   12034:	003f1906 	br	11c9c <_realloc_r+0xf4>
   12038:	90ffff17 	ldw	r3,-4(r18)
   1203c:	00bfff04 	movi	r2,-4
   12040:	a825883a 	mov	r18,r21
   12044:	1884703a 	and	r2,r3,r2
   12048:	80a1883a 	add	r16,r16,r2
   1204c:	003f2406 	br	11ce0 <_realloc_r+0x138>
   12050:	a8800217 	ldw	r2,8(r21)
   12054:	b0800415 	stw	r2,16(r22)
   12058:	a8800317 	ldw	r2,12(r21)
   1205c:	b0800515 	stw	r2,20(r22)
   12060:	31000a26 	beq	r6,r4,1208c <_realloc_r+0x4e4>
   12064:	b0800604 	addi	r2,r22,24
   12068:	ad400404 	addi	r21,r21,16
   1206c:	003fa906 	br	11f14 <_realloc_r+0x36c>
   12070:	a9000417 	ldw	r4,16(r21)
   12074:	90800604 	addi	r2,r18,24
   12078:	a8c00604 	addi	r3,r21,24
   1207c:	91000415 	stw	r4,16(r18)
   12080:	a9000517 	ldw	r4,20(r21)
   12084:	91000515 	stw	r4,20(r18)
   12088:	003f0406 	br	11c9c <_realloc_r+0xf4>
   1208c:	a8c00417 	ldw	r3,16(r21)
   12090:	ad400604 	addi	r21,r21,24
   12094:	b0800804 	addi	r2,r22,32
   12098:	b0c00615 	stw	r3,24(r22)
   1209c:	a8ffff17 	ldw	r3,-4(r21)
   120a0:	b0c00715 	stw	r3,28(r22)
   120a4:	003f9b06 	br	11f14 <_realloc_r+0x36c>
   120a8:	9005883a 	mov	r2,r18
   120ac:	003fc706 	br	11fcc <_realloc_r+0x424>
   120b0:	a80b883a 	mov	r5,r21
   120b4:	9009883a 	mov	r4,r18
   120b8:	00119240 	call	11924 <memmove>
   120bc:	003fc906 	br	11fe4 <_realloc_r+0x43c>
   120c0:	a8800217 	ldw	r2,8(r21)
   120c4:	b0800415 	stw	r2,16(r22)
   120c8:	a8800317 	ldw	r2,12(r21)
   120cc:	b0800515 	stw	r2,20(r22)
   120d0:	31000726 	beq	r6,r4,120f0 <_realloc_r+0x548>
   120d4:	b0800604 	addi	r2,r22,24
   120d8:	ad400404 	addi	r21,r21,16
   120dc:	003fbb06 	br	11fcc <_realloc_r+0x424>
   120e0:	a009883a 	mov	r4,r20
   120e4:	00142d00 	call	142d0 <__malloc_unlock>
   120e8:	0005883a 	mov	r2,zero
   120ec:	003f0a06 	br	11d18 <_realloc_r+0x170>
   120f0:	a8c00417 	ldw	r3,16(r21)
   120f4:	ad400604 	addi	r21,r21,24
   120f8:	b0800804 	addi	r2,r22,32
   120fc:	b0c00615 	stw	r3,24(r22)
   12100:	a8ffff17 	ldw	r3,-4(r21)
   12104:	b0c00715 	stw	r3,28(r22)
   12108:	003fb006 	br	11fcc <_realloc_r+0x424>

0001210c <_sbrk_r>:
   1210c:	defffd04 	addi	sp,sp,-12
   12110:	dc000015 	stw	r16,0(sp)
   12114:	040000b4 	movhi	r16,2
   12118:	dc400115 	stw	r17,4(sp)
   1211c:	84279304 	addi	r16,r16,-25012
   12120:	2023883a 	mov	r17,r4
   12124:	2809883a 	mov	r4,r5
   12128:	dfc00215 	stw	ra,8(sp)
   1212c:	80000015 	stw	zero,0(r16)
   12130:	00144b80 	call	144b8 <sbrk>
   12134:	00ffffc4 	movi	r3,-1
   12138:	10c00526 	beq	r2,r3,12150 <_sbrk_r+0x44>
   1213c:	dfc00217 	ldw	ra,8(sp)
   12140:	dc400117 	ldw	r17,4(sp)
   12144:	dc000017 	ldw	r16,0(sp)
   12148:	dec00304 	addi	sp,sp,12
   1214c:	f800283a 	ret
   12150:	80c00017 	ldw	r3,0(r16)
   12154:	183ff926 	beq	r3,zero,1213c <_sbrk_r+0x30>
   12158:	88c00015 	stw	r3,0(r17)
   1215c:	003ff706 	br	1213c <_sbrk_r+0x30>

00012160 <__sread>:
   12160:	defffe04 	addi	sp,sp,-8
   12164:	dc000015 	stw	r16,0(sp)
   12168:	2821883a 	mov	r16,r5
   1216c:	2940038f 	ldh	r5,14(r5)
   12170:	dfc00115 	stw	ra,4(sp)
   12174:	0012ea00 	call	12ea0 <_read_r>
   12178:	10000716 	blt	r2,zero,12198 <__sread+0x38>
   1217c:	80c01417 	ldw	r3,80(r16)
   12180:	1887883a 	add	r3,r3,r2
   12184:	80c01415 	stw	r3,80(r16)
   12188:	dfc00117 	ldw	ra,4(sp)
   1218c:	dc000017 	ldw	r16,0(sp)
   12190:	dec00204 	addi	sp,sp,8
   12194:	f800283a 	ret
   12198:	80c0030b 	ldhu	r3,12(r16)
   1219c:	18fbffcc 	andi	r3,r3,61439
   121a0:	80c0030d 	sth	r3,12(r16)
   121a4:	dfc00117 	ldw	ra,4(sp)
   121a8:	dc000017 	ldw	r16,0(sp)
   121ac:	dec00204 	addi	sp,sp,8
   121b0:	f800283a 	ret

000121b4 <__seofread>:
   121b4:	0005883a 	mov	r2,zero
   121b8:	f800283a 	ret

000121bc <__swrite>:
   121bc:	2880030b 	ldhu	r2,12(r5)
   121c0:	defffb04 	addi	sp,sp,-20
   121c4:	dcc00315 	stw	r19,12(sp)
   121c8:	dc800215 	stw	r18,8(sp)
   121cc:	dc400115 	stw	r17,4(sp)
   121d0:	dc000015 	stw	r16,0(sp)
   121d4:	dfc00415 	stw	ra,16(sp)
   121d8:	10c0400c 	andi	r3,r2,256
   121dc:	2821883a 	mov	r16,r5
   121e0:	2023883a 	mov	r17,r4
   121e4:	3025883a 	mov	r18,r6
   121e8:	3827883a 	mov	r19,r7
   121ec:	18000526 	beq	r3,zero,12204 <__swrite+0x48>
   121f0:	2940038f 	ldh	r5,14(r5)
   121f4:	01c00084 	movi	r7,2
   121f8:	000d883a 	mov	r6,zero
   121fc:	0012c840 	call	12c84 <_lseek_r>
   12200:	8080030b 	ldhu	r2,12(r16)
   12204:	8140038f 	ldh	r5,14(r16)
   12208:	10bbffcc 	andi	r2,r2,61439
   1220c:	980f883a 	mov	r7,r19
   12210:	900d883a 	mov	r6,r18
   12214:	8809883a 	mov	r4,r17
   12218:	8080030d 	sth	r2,12(r16)
   1221c:	dfc00417 	ldw	ra,16(sp)
   12220:	dcc00317 	ldw	r19,12(sp)
   12224:	dc800217 	ldw	r18,8(sp)
   12228:	dc400117 	ldw	r17,4(sp)
   1222c:	dc000017 	ldw	r16,0(sp)
   12230:	dec00504 	addi	sp,sp,20
   12234:	001229c1 	jmpi	1229c <_write_r>

00012238 <__sseek>:
   12238:	defffe04 	addi	sp,sp,-8
   1223c:	dc000015 	stw	r16,0(sp)
   12240:	2821883a 	mov	r16,r5
   12244:	2940038f 	ldh	r5,14(r5)
   12248:	dfc00115 	stw	ra,4(sp)
   1224c:	0012c840 	call	12c84 <_lseek_r>
   12250:	00ffffc4 	movi	r3,-1
   12254:	10c00826 	beq	r2,r3,12278 <__sseek+0x40>
   12258:	80c0030b 	ldhu	r3,12(r16)
   1225c:	80801415 	stw	r2,80(r16)
   12260:	18c40014 	ori	r3,r3,4096
   12264:	80c0030d 	sth	r3,12(r16)
   12268:	dfc00117 	ldw	ra,4(sp)
   1226c:	dc000017 	ldw	r16,0(sp)
   12270:	dec00204 	addi	sp,sp,8
   12274:	f800283a 	ret
   12278:	80c0030b 	ldhu	r3,12(r16)
   1227c:	18fbffcc 	andi	r3,r3,61439
   12280:	80c0030d 	sth	r3,12(r16)
   12284:	dfc00117 	ldw	ra,4(sp)
   12288:	dc000017 	ldw	r16,0(sp)
   1228c:	dec00204 	addi	sp,sp,8
   12290:	f800283a 	ret

00012294 <__sclose>:
   12294:	2940038f 	ldh	r5,14(r5)
   12298:	00124501 	jmpi	12450 <_close_r>

0001229c <_write_r>:
   1229c:	defffd04 	addi	sp,sp,-12
   122a0:	2805883a 	mov	r2,r5
   122a4:	dc000015 	stw	r16,0(sp)
   122a8:	040000b4 	movhi	r16,2
   122ac:	dc400115 	stw	r17,4(sp)
   122b0:	300b883a 	mov	r5,r6
   122b4:	84279304 	addi	r16,r16,-25012
   122b8:	2023883a 	mov	r17,r4
   122bc:	380d883a 	mov	r6,r7
   122c0:	1009883a 	mov	r4,r2
   122c4:	dfc00215 	stw	ra,8(sp)
   122c8:	80000015 	stw	zero,0(r16)
   122cc:	00147480 	call	14748 <write>
   122d0:	00ffffc4 	movi	r3,-1
   122d4:	10c00526 	beq	r2,r3,122ec <_write_r+0x50>
   122d8:	dfc00217 	ldw	ra,8(sp)
   122dc:	dc400117 	ldw	r17,4(sp)
   122e0:	dc000017 	ldw	r16,0(sp)
   122e4:	dec00304 	addi	sp,sp,12
   122e8:	f800283a 	ret
   122ec:	80c00017 	ldw	r3,0(r16)
   122f0:	183ff926 	beq	r3,zero,122d8 <_write_r+0x3c>
   122f4:	88c00015 	stw	r3,0(r17)
   122f8:	003ff706 	br	122d8 <_write_r+0x3c>

000122fc <__swsetup_r>:
   122fc:	008000b4 	movhi	r2,2
   12300:	defffd04 	addi	sp,sp,-12
   12304:	10a78204 	addi	r2,r2,-25080
   12308:	dc400115 	stw	r17,4(sp)
   1230c:	2023883a 	mov	r17,r4
   12310:	11000017 	ldw	r4,0(r2)
   12314:	dc000015 	stw	r16,0(sp)
   12318:	dfc00215 	stw	ra,8(sp)
   1231c:	2821883a 	mov	r16,r5
   12320:	20000226 	beq	r4,zero,1232c <__swsetup_r+0x30>
   12324:	20800e17 	ldw	r2,56(r4)
   12328:	10003126 	beq	r2,zero,123f0 <__swsetup_r+0xf4>
   1232c:	8080030b 	ldhu	r2,12(r16)
   12330:	10c0020c 	andi	r3,r2,8
   12334:	1009883a 	mov	r4,r2
   12338:	18000f26 	beq	r3,zero,12378 <__swsetup_r+0x7c>
   1233c:	80c00417 	ldw	r3,16(r16)
   12340:	18001526 	beq	r3,zero,12398 <__swsetup_r+0x9c>
   12344:	1100004c 	andi	r4,r2,1
   12348:	20001c1e 	bne	r4,zero,123bc <__swsetup_r+0xc0>
   1234c:	1080008c 	andi	r2,r2,2
   12350:	1000291e 	bne	r2,zero,123f8 <__swsetup_r+0xfc>
   12354:	80800517 	ldw	r2,20(r16)
   12358:	80800215 	stw	r2,8(r16)
   1235c:	18001c26 	beq	r3,zero,123d0 <__swsetup_r+0xd4>
   12360:	0005883a 	mov	r2,zero
   12364:	dfc00217 	ldw	ra,8(sp)
   12368:	dc400117 	ldw	r17,4(sp)
   1236c:	dc000017 	ldw	r16,0(sp)
   12370:	dec00304 	addi	sp,sp,12
   12374:	f800283a 	ret
   12378:	2080040c 	andi	r2,r4,16
   1237c:	10002e26 	beq	r2,zero,12438 <__swsetup_r+0x13c>
   12380:	2080010c 	andi	r2,r4,4
   12384:	10001e1e 	bne	r2,zero,12400 <__swsetup_r+0x104>
   12388:	80c00417 	ldw	r3,16(r16)
   1238c:	20800214 	ori	r2,r4,8
   12390:	8080030d 	sth	r2,12(r16)
   12394:	183feb1e 	bne	r3,zero,12344 <__swsetup_r+0x48>
   12398:	1100a00c 	andi	r4,r2,640
   1239c:	01408004 	movi	r5,512
   123a0:	217fe826 	beq	r4,r5,12344 <__swsetup_r+0x48>
   123a4:	800b883a 	mov	r5,r16
   123a8:	8809883a 	mov	r4,r17
   123ac:	0012ce40 	call	12ce4 <__smakebuf_r>
   123b0:	8080030b 	ldhu	r2,12(r16)
   123b4:	80c00417 	ldw	r3,16(r16)
   123b8:	003fe206 	br	12344 <__swsetup_r+0x48>
   123bc:	80800517 	ldw	r2,20(r16)
   123c0:	80000215 	stw	zero,8(r16)
   123c4:	0085c83a 	sub	r2,zero,r2
   123c8:	80800615 	stw	r2,24(r16)
   123cc:	183fe41e 	bne	r3,zero,12360 <__swsetup_r+0x64>
   123d0:	80c0030b 	ldhu	r3,12(r16)
   123d4:	0005883a 	mov	r2,zero
   123d8:	1900200c 	andi	r4,r3,128
   123dc:	203fe126 	beq	r4,zero,12364 <__swsetup_r+0x68>
   123e0:	18c01014 	ori	r3,r3,64
   123e4:	80c0030d 	sth	r3,12(r16)
   123e8:	00bfffc4 	movi	r2,-1
   123ec:	003fdd06 	br	12364 <__swsetup_r+0x68>
   123f0:	001084c0 	call	1084c <__sinit>
   123f4:	003fcd06 	br	1232c <__swsetup_r+0x30>
   123f8:	0005883a 	mov	r2,zero
   123fc:	003fd606 	br	12358 <__swsetup_r+0x5c>
   12400:	81400c17 	ldw	r5,48(r16)
   12404:	28000626 	beq	r5,zero,12420 <__swsetup_r+0x124>
   12408:	80801004 	addi	r2,r16,64
   1240c:	28800326 	beq	r5,r2,1241c <__swsetup_r+0x120>
   12410:	8809883a 	mov	r4,r17
   12414:	00129740 	call	12974 <_free_r>
   12418:	8100030b 	ldhu	r4,12(r16)
   1241c:	80000c15 	stw	zero,48(r16)
   12420:	80c00417 	ldw	r3,16(r16)
   12424:	00bff6c4 	movi	r2,-37
   12428:	1108703a 	and	r4,r2,r4
   1242c:	80000115 	stw	zero,4(r16)
   12430:	80c00015 	stw	r3,0(r16)
   12434:	003fd506 	br	1238c <__swsetup_r+0x90>
   12438:	00800244 	movi	r2,9
   1243c:	88800015 	stw	r2,0(r17)
   12440:	20801014 	ori	r2,r4,64
   12444:	8080030d 	sth	r2,12(r16)
   12448:	00bfffc4 	movi	r2,-1
   1244c:	003fc506 	br	12364 <__swsetup_r+0x68>

00012450 <_close_r>:
   12450:	defffd04 	addi	sp,sp,-12
   12454:	dc000015 	stw	r16,0(sp)
   12458:	040000b4 	movhi	r16,2
   1245c:	dc400115 	stw	r17,4(sp)
   12460:	84279304 	addi	r16,r16,-25012
   12464:	2023883a 	mov	r17,r4
   12468:	2809883a 	mov	r4,r5
   1246c:	dfc00215 	stw	ra,8(sp)
   12470:	80000015 	stw	zero,0(r16)
   12474:	00131c80 	call	131c8 <close>
   12478:	00ffffc4 	movi	r3,-1
   1247c:	10c00526 	beq	r2,r3,12494 <_close_r+0x44>
   12480:	dfc00217 	ldw	ra,8(sp)
   12484:	dc400117 	ldw	r17,4(sp)
   12488:	dc000017 	ldw	r16,0(sp)
   1248c:	dec00304 	addi	sp,sp,12
   12490:	f800283a 	ret
   12494:	80c00017 	ldw	r3,0(r16)
   12498:	183ff926 	beq	r3,zero,12480 <_close_r+0x30>
   1249c:	88c00015 	stw	r3,0(r17)
   124a0:	003ff706 	br	12480 <_close_r+0x30>

000124a4 <_fclose_r>:
   124a4:	28003926 	beq	r5,zero,1258c <_fclose_r+0xe8>
   124a8:	defffc04 	addi	sp,sp,-16
   124ac:	dc400115 	stw	r17,4(sp)
   124b0:	dc000015 	stw	r16,0(sp)
   124b4:	dfc00315 	stw	ra,12(sp)
   124b8:	dc800215 	stw	r18,8(sp)
   124bc:	2023883a 	mov	r17,r4
   124c0:	2821883a 	mov	r16,r5
   124c4:	20000226 	beq	r4,zero,124d0 <_fclose_r+0x2c>
   124c8:	20800e17 	ldw	r2,56(r4)
   124cc:	10002726 	beq	r2,zero,1256c <_fclose_r+0xc8>
   124d0:	8080030f 	ldh	r2,12(r16)
   124d4:	1000071e 	bne	r2,zero,124f4 <_fclose_r+0x50>
   124d8:	0005883a 	mov	r2,zero
   124dc:	dfc00317 	ldw	ra,12(sp)
   124e0:	dc800217 	ldw	r18,8(sp)
   124e4:	dc400117 	ldw	r17,4(sp)
   124e8:	dc000017 	ldw	r16,0(sp)
   124ec:	dec00404 	addi	sp,sp,16
   124f0:	f800283a 	ret
   124f4:	800b883a 	mov	r5,r16
   124f8:	8809883a 	mov	r4,r17
   124fc:	00125a80 	call	125a8 <__sflush_r>
   12500:	1025883a 	mov	r18,r2
   12504:	80800b17 	ldw	r2,44(r16)
   12508:	10000426 	beq	r2,zero,1251c <_fclose_r+0x78>
   1250c:	81400717 	ldw	r5,28(r16)
   12510:	8809883a 	mov	r4,r17
   12514:	103ee83a 	callr	r2
   12518:	10001616 	blt	r2,zero,12574 <_fclose_r+0xd0>
   1251c:	8080030b 	ldhu	r2,12(r16)
   12520:	1080200c 	andi	r2,r2,128
   12524:	1000151e 	bne	r2,zero,1257c <_fclose_r+0xd8>
   12528:	81400c17 	ldw	r5,48(r16)
   1252c:	28000526 	beq	r5,zero,12544 <_fclose_r+0xa0>
   12530:	80801004 	addi	r2,r16,64
   12534:	28800226 	beq	r5,r2,12540 <_fclose_r+0x9c>
   12538:	8809883a 	mov	r4,r17
   1253c:	00129740 	call	12974 <_free_r>
   12540:	80000c15 	stw	zero,48(r16)
   12544:	81401117 	ldw	r5,68(r16)
   12548:	28000326 	beq	r5,zero,12558 <_fclose_r+0xb4>
   1254c:	8809883a 	mov	r4,r17
   12550:	00129740 	call	12974 <_free_r>
   12554:	80001115 	stw	zero,68(r16)
   12558:	001085c0 	call	1085c <__sfp_lock_acquire>
   1255c:	8000030d 	sth	zero,12(r16)
   12560:	00108600 	call	10860 <__sfp_lock_release>
   12564:	9005883a 	mov	r2,r18
   12568:	003fdc06 	br	124dc <_fclose_r+0x38>
   1256c:	001084c0 	call	1084c <__sinit>
   12570:	003fd706 	br	124d0 <_fclose_r+0x2c>
   12574:	04bfffc4 	movi	r18,-1
   12578:	003fe806 	br	1251c <_fclose_r+0x78>
   1257c:	81400417 	ldw	r5,16(r16)
   12580:	8809883a 	mov	r4,r17
   12584:	00129740 	call	12974 <_free_r>
   12588:	003fe706 	br	12528 <_fclose_r+0x84>
   1258c:	0005883a 	mov	r2,zero
   12590:	f800283a 	ret

00012594 <fclose>:
   12594:	008000b4 	movhi	r2,2
   12598:	10a78204 	addi	r2,r2,-25080
   1259c:	200b883a 	mov	r5,r4
   125a0:	11000017 	ldw	r4,0(r2)
   125a4:	00124a41 	jmpi	124a4 <_fclose_r>

000125a8 <__sflush_r>:
   125a8:	2880030b 	ldhu	r2,12(r5)
   125ac:	defffb04 	addi	sp,sp,-20
   125b0:	dcc00315 	stw	r19,12(sp)
   125b4:	dc400115 	stw	r17,4(sp)
   125b8:	dfc00415 	stw	ra,16(sp)
   125bc:	dc800215 	stw	r18,8(sp)
   125c0:	dc000015 	stw	r16,0(sp)
   125c4:	10c0020c 	andi	r3,r2,8
   125c8:	2823883a 	mov	r17,r5
   125cc:	2027883a 	mov	r19,r4
   125d0:	1800311e 	bne	r3,zero,12698 <__sflush_r+0xf0>
   125d4:	28c00117 	ldw	r3,4(r5)
   125d8:	10820014 	ori	r2,r2,2048
   125dc:	2880030d 	sth	r2,12(r5)
   125e0:	00c04b0e 	bge	zero,r3,12710 <__sflush_r+0x168>
   125e4:	8a000a17 	ldw	r8,40(r17)
   125e8:	40002326 	beq	r8,zero,12678 <__sflush_r+0xd0>
   125ec:	9c000017 	ldw	r16,0(r19)
   125f0:	10c4000c 	andi	r3,r2,4096
   125f4:	98000015 	stw	zero,0(r19)
   125f8:	18004826 	beq	r3,zero,1271c <__sflush_r+0x174>
   125fc:	89801417 	ldw	r6,80(r17)
   12600:	10c0010c 	andi	r3,r2,4
   12604:	18000626 	beq	r3,zero,12620 <__sflush_r+0x78>
   12608:	88c00117 	ldw	r3,4(r17)
   1260c:	88800c17 	ldw	r2,48(r17)
   12610:	30cdc83a 	sub	r6,r6,r3
   12614:	10000226 	beq	r2,zero,12620 <__sflush_r+0x78>
   12618:	88800f17 	ldw	r2,60(r17)
   1261c:	308dc83a 	sub	r6,r6,r2
   12620:	89400717 	ldw	r5,28(r17)
   12624:	000f883a 	mov	r7,zero
   12628:	9809883a 	mov	r4,r19
   1262c:	403ee83a 	callr	r8
   12630:	00ffffc4 	movi	r3,-1
   12634:	10c04426 	beq	r2,r3,12748 <__sflush_r+0x1a0>
   12638:	88c0030b 	ldhu	r3,12(r17)
   1263c:	89000417 	ldw	r4,16(r17)
   12640:	88000115 	stw	zero,4(r17)
   12644:	197dffcc 	andi	r5,r3,63487
   12648:	8940030d 	sth	r5,12(r17)
   1264c:	89000015 	stw	r4,0(r17)
   12650:	18c4000c 	andi	r3,r3,4096
   12654:	18002c1e 	bne	r3,zero,12708 <__sflush_r+0x160>
   12658:	89400c17 	ldw	r5,48(r17)
   1265c:	9c000015 	stw	r16,0(r19)
   12660:	28000526 	beq	r5,zero,12678 <__sflush_r+0xd0>
   12664:	88801004 	addi	r2,r17,64
   12668:	28800226 	beq	r5,r2,12674 <__sflush_r+0xcc>
   1266c:	9809883a 	mov	r4,r19
   12670:	00129740 	call	12974 <_free_r>
   12674:	88000c15 	stw	zero,48(r17)
   12678:	0005883a 	mov	r2,zero
   1267c:	dfc00417 	ldw	ra,16(sp)
   12680:	dcc00317 	ldw	r19,12(sp)
   12684:	dc800217 	ldw	r18,8(sp)
   12688:	dc400117 	ldw	r17,4(sp)
   1268c:	dc000017 	ldw	r16,0(sp)
   12690:	dec00504 	addi	sp,sp,20
   12694:	f800283a 	ret
   12698:	2c800417 	ldw	r18,16(r5)
   1269c:	903ff626 	beq	r18,zero,12678 <__sflush_r+0xd0>
   126a0:	2c000017 	ldw	r16,0(r5)
   126a4:	108000cc 	andi	r2,r2,3
   126a8:	2c800015 	stw	r18,0(r5)
   126ac:	84a1c83a 	sub	r16,r16,r18
   126b0:	1000131e 	bne	r2,zero,12700 <__sflush_r+0x158>
   126b4:	28800517 	ldw	r2,20(r5)
   126b8:	88800215 	stw	r2,8(r17)
   126bc:	04000316 	blt	zero,r16,126cc <__sflush_r+0x124>
   126c0:	003fed06 	br	12678 <__sflush_r+0xd0>
   126c4:	90a5883a 	add	r18,r18,r2
   126c8:	043feb0e 	bge	zero,r16,12678 <__sflush_r+0xd0>
   126cc:	88800917 	ldw	r2,36(r17)
   126d0:	89400717 	ldw	r5,28(r17)
   126d4:	800f883a 	mov	r7,r16
   126d8:	900d883a 	mov	r6,r18
   126dc:	9809883a 	mov	r4,r19
   126e0:	103ee83a 	callr	r2
   126e4:	80a1c83a 	sub	r16,r16,r2
   126e8:	00bff616 	blt	zero,r2,126c4 <__sflush_r+0x11c>
   126ec:	88c0030b 	ldhu	r3,12(r17)
   126f0:	00bfffc4 	movi	r2,-1
   126f4:	18c01014 	ori	r3,r3,64
   126f8:	88c0030d 	sth	r3,12(r17)
   126fc:	003fdf06 	br	1267c <__sflush_r+0xd4>
   12700:	0005883a 	mov	r2,zero
   12704:	003fec06 	br	126b8 <__sflush_r+0x110>
   12708:	88801415 	stw	r2,80(r17)
   1270c:	003fd206 	br	12658 <__sflush_r+0xb0>
   12710:	28c00f17 	ldw	r3,60(r5)
   12714:	00ffb316 	blt	zero,r3,125e4 <__sflush_r+0x3c>
   12718:	003fd706 	br	12678 <__sflush_r+0xd0>
   1271c:	89400717 	ldw	r5,28(r17)
   12720:	000d883a 	mov	r6,zero
   12724:	01c00044 	movi	r7,1
   12728:	9809883a 	mov	r4,r19
   1272c:	403ee83a 	callr	r8
   12730:	100d883a 	mov	r6,r2
   12734:	00bfffc4 	movi	r2,-1
   12738:	30801426 	beq	r6,r2,1278c <__sflush_r+0x1e4>
   1273c:	8880030b 	ldhu	r2,12(r17)
   12740:	8a000a17 	ldw	r8,40(r17)
   12744:	003fae06 	br	12600 <__sflush_r+0x58>
   12748:	98c00017 	ldw	r3,0(r19)
   1274c:	183fba26 	beq	r3,zero,12638 <__sflush_r+0x90>
   12750:	01000744 	movi	r4,29
   12754:	19000626 	beq	r3,r4,12770 <__sflush_r+0x1c8>
   12758:	01000584 	movi	r4,22
   1275c:	19000426 	beq	r3,r4,12770 <__sflush_r+0x1c8>
   12760:	88c0030b 	ldhu	r3,12(r17)
   12764:	18c01014 	ori	r3,r3,64
   12768:	88c0030d 	sth	r3,12(r17)
   1276c:	003fc306 	br	1267c <__sflush_r+0xd4>
   12770:	8880030b 	ldhu	r2,12(r17)
   12774:	88c00417 	ldw	r3,16(r17)
   12778:	88000115 	stw	zero,4(r17)
   1277c:	10bdffcc 	andi	r2,r2,63487
   12780:	8880030d 	sth	r2,12(r17)
   12784:	88c00015 	stw	r3,0(r17)
   12788:	003fb306 	br	12658 <__sflush_r+0xb0>
   1278c:	98800017 	ldw	r2,0(r19)
   12790:	103fea26 	beq	r2,zero,1273c <__sflush_r+0x194>
   12794:	00c00744 	movi	r3,29
   12798:	10c00226 	beq	r2,r3,127a4 <__sflush_r+0x1fc>
   1279c:	00c00584 	movi	r3,22
   127a0:	10c0031e 	bne	r2,r3,127b0 <__sflush_r+0x208>
   127a4:	9c000015 	stw	r16,0(r19)
   127a8:	0005883a 	mov	r2,zero
   127ac:	003fb306 	br	1267c <__sflush_r+0xd4>
   127b0:	88c0030b 	ldhu	r3,12(r17)
   127b4:	3005883a 	mov	r2,r6
   127b8:	18c01014 	ori	r3,r3,64
   127bc:	88c0030d 	sth	r3,12(r17)
   127c0:	003fae06 	br	1267c <__sflush_r+0xd4>

000127c4 <_fflush_r>:
   127c4:	defffd04 	addi	sp,sp,-12
   127c8:	dc000115 	stw	r16,4(sp)
   127cc:	dfc00215 	stw	ra,8(sp)
   127d0:	2021883a 	mov	r16,r4
   127d4:	20000226 	beq	r4,zero,127e0 <_fflush_r+0x1c>
   127d8:	20800e17 	ldw	r2,56(r4)
   127dc:	10000c26 	beq	r2,zero,12810 <_fflush_r+0x4c>
   127e0:	2880030f 	ldh	r2,12(r5)
   127e4:	1000051e 	bne	r2,zero,127fc <_fflush_r+0x38>
   127e8:	0005883a 	mov	r2,zero
   127ec:	dfc00217 	ldw	ra,8(sp)
   127f0:	dc000117 	ldw	r16,4(sp)
   127f4:	dec00304 	addi	sp,sp,12
   127f8:	f800283a 	ret
   127fc:	8009883a 	mov	r4,r16
   12800:	dfc00217 	ldw	ra,8(sp)
   12804:	dc000117 	ldw	r16,4(sp)
   12808:	dec00304 	addi	sp,sp,12
   1280c:	00125a81 	jmpi	125a8 <__sflush_r>
   12810:	d9400015 	stw	r5,0(sp)
   12814:	001084c0 	call	1084c <__sinit>
   12818:	d9400017 	ldw	r5,0(sp)
   1281c:	003ff006 	br	127e0 <_fflush_r+0x1c>

00012820 <fflush>:
   12820:	20000526 	beq	r4,zero,12838 <fflush+0x18>
   12824:	008000b4 	movhi	r2,2
   12828:	10a78204 	addi	r2,r2,-25080
   1282c:	200b883a 	mov	r5,r4
   12830:	11000017 	ldw	r4,0(r2)
   12834:	00127c41 	jmpi	127c4 <_fflush_r>
   12838:	008000b4 	movhi	r2,2
   1283c:	10a78104 	addi	r2,r2,-25084
   12840:	11000017 	ldw	r4,0(r2)
   12844:	01400074 	movhi	r5,1
   12848:	2949f104 	addi	r5,r5,10180
   1284c:	0010e281 	jmpi	10e28 <_fwalk_reent>

00012850 <_malloc_trim_r>:
   12850:	defffb04 	addi	sp,sp,-20
   12854:	dcc00315 	stw	r19,12(sp)
   12858:	04c000b4 	movhi	r19,2
   1285c:	dc800215 	stw	r18,8(sp)
   12860:	dc400115 	stw	r17,4(sp)
   12864:	dc000015 	stw	r16,0(sp)
   12868:	dfc00415 	stw	ra,16(sp)
   1286c:	2821883a 	mov	r16,r5
   12870:	9ce1d604 	addi	r19,r19,-30888
   12874:	2025883a 	mov	r18,r4
   12878:	00142ac0 	call	142ac <__malloc_lock>
   1287c:	98800217 	ldw	r2,8(r19)
   12880:	14400117 	ldw	r17,4(r2)
   12884:	00bfff04 	movi	r2,-4
   12888:	88a2703a 	and	r17,r17,r2
   1288c:	8c21c83a 	sub	r16,r17,r16
   12890:	8403fbc4 	addi	r16,r16,4079
   12894:	8020d33a 	srli	r16,r16,12
   12898:	0083ffc4 	movi	r2,4095
   1289c:	843fffc4 	addi	r16,r16,-1
   128a0:	8020933a 	slli	r16,r16,12
   128a4:	1400060e 	bge	r2,r16,128c0 <_malloc_trim_r+0x70>
   128a8:	000b883a 	mov	r5,zero
   128ac:	9009883a 	mov	r4,r18
   128b0:	001210c0 	call	1210c <_sbrk_r>
   128b4:	98c00217 	ldw	r3,8(r19)
   128b8:	1c47883a 	add	r3,r3,r17
   128bc:	10c00a26 	beq	r2,r3,128e8 <_malloc_trim_r+0x98>
   128c0:	9009883a 	mov	r4,r18
   128c4:	00142d00 	call	142d0 <__malloc_unlock>
   128c8:	0005883a 	mov	r2,zero
   128cc:	dfc00417 	ldw	ra,16(sp)
   128d0:	dcc00317 	ldw	r19,12(sp)
   128d4:	dc800217 	ldw	r18,8(sp)
   128d8:	dc400117 	ldw	r17,4(sp)
   128dc:	dc000017 	ldw	r16,0(sp)
   128e0:	dec00504 	addi	sp,sp,20
   128e4:	f800283a 	ret
   128e8:	040bc83a 	sub	r5,zero,r16
   128ec:	9009883a 	mov	r4,r18
   128f0:	001210c0 	call	1210c <_sbrk_r>
   128f4:	00ffffc4 	movi	r3,-1
   128f8:	10c00d26 	beq	r2,r3,12930 <_malloc_trim_r+0xe0>
   128fc:	00c000b4 	movhi	r3,2
   12900:	18e79f04 	addi	r3,r3,-24964
   12904:	18800017 	ldw	r2,0(r3)
   12908:	99000217 	ldw	r4,8(r19)
   1290c:	8c23c83a 	sub	r17,r17,r16
   12910:	8c400054 	ori	r17,r17,1
   12914:	1421c83a 	sub	r16,r2,r16
   12918:	24400115 	stw	r17,4(r4)
   1291c:	9009883a 	mov	r4,r18
   12920:	1c000015 	stw	r16,0(r3)
   12924:	00142d00 	call	142d0 <__malloc_unlock>
   12928:	00800044 	movi	r2,1
   1292c:	003fe706 	br	128cc <_malloc_trim_r+0x7c>
   12930:	000b883a 	mov	r5,zero
   12934:	9009883a 	mov	r4,r18
   12938:	001210c0 	call	1210c <_sbrk_r>
   1293c:	99000217 	ldw	r4,8(r19)
   12940:	014003c4 	movi	r5,15
   12944:	1107c83a 	sub	r3,r2,r4
   12948:	28ffdd0e 	bge	r5,r3,128c0 <_malloc_trim_r+0x70>
   1294c:	014000b4 	movhi	r5,2
   12950:	29678304 	addi	r5,r5,-25076
   12954:	29400017 	ldw	r5,0(r5)
   12958:	18c00054 	ori	r3,r3,1
   1295c:	20c00115 	stw	r3,4(r4)
   12960:	00c000b4 	movhi	r3,2
   12964:	1145c83a 	sub	r2,r2,r5
   12968:	18e79f04 	addi	r3,r3,-24964
   1296c:	18800015 	stw	r2,0(r3)
   12970:	003fd306 	br	128c0 <_malloc_trim_r+0x70>

00012974 <_free_r>:
   12974:	28004126 	beq	r5,zero,12a7c <_free_r+0x108>
   12978:	defffd04 	addi	sp,sp,-12
   1297c:	dc400115 	stw	r17,4(sp)
   12980:	dc000015 	stw	r16,0(sp)
   12984:	2023883a 	mov	r17,r4
   12988:	2821883a 	mov	r16,r5
   1298c:	dfc00215 	stw	ra,8(sp)
   12990:	00142ac0 	call	142ac <__malloc_lock>
   12994:	81ffff17 	ldw	r7,-4(r16)
   12998:	00bfff84 	movi	r2,-2
   1299c:	010000b4 	movhi	r4,2
   129a0:	81bffe04 	addi	r6,r16,-8
   129a4:	3884703a 	and	r2,r7,r2
   129a8:	2121d604 	addi	r4,r4,-30888
   129ac:	308b883a 	add	r5,r6,r2
   129b0:	2a400117 	ldw	r9,4(r5)
   129b4:	22000217 	ldw	r8,8(r4)
   129b8:	00ffff04 	movi	r3,-4
   129bc:	48c6703a 	and	r3,r9,r3
   129c0:	2a005726 	beq	r5,r8,12b20 <_free_r+0x1ac>
   129c4:	28c00115 	stw	r3,4(r5)
   129c8:	39c0004c 	andi	r7,r7,1
   129cc:	3800091e 	bne	r7,zero,129f4 <_free_r+0x80>
   129d0:	823ffe17 	ldw	r8,-8(r16)
   129d4:	22400204 	addi	r9,r4,8
   129d8:	320dc83a 	sub	r6,r6,r8
   129dc:	31c00217 	ldw	r7,8(r6)
   129e0:	1205883a 	add	r2,r2,r8
   129e4:	3a406526 	beq	r7,r9,12b7c <_free_r+0x208>
   129e8:	32000317 	ldw	r8,12(r6)
   129ec:	3a000315 	stw	r8,12(r7)
   129f0:	41c00215 	stw	r7,8(r8)
   129f4:	28cf883a 	add	r7,r5,r3
   129f8:	39c00117 	ldw	r7,4(r7)
   129fc:	39c0004c 	andi	r7,r7,1
   12a00:	38003a26 	beq	r7,zero,12aec <_free_r+0x178>
   12a04:	10c00054 	ori	r3,r2,1
   12a08:	30c00115 	stw	r3,4(r6)
   12a0c:	3087883a 	add	r3,r6,r2
   12a10:	18800015 	stw	r2,0(r3)
   12a14:	00c07fc4 	movi	r3,511
   12a18:	18801936 	bltu	r3,r2,12a80 <_free_r+0x10c>
   12a1c:	1004d0fa 	srli	r2,r2,3
   12a20:	01c00044 	movi	r7,1
   12a24:	21400117 	ldw	r5,4(r4)
   12a28:	10c00044 	addi	r3,r2,1
   12a2c:	18c7883a 	add	r3,r3,r3
   12a30:	1005d0ba 	srai	r2,r2,2
   12a34:	18c7883a 	add	r3,r3,r3
   12a38:	18c7883a 	add	r3,r3,r3
   12a3c:	1907883a 	add	r3,r3,r4
   12a40:	3884983a 	sll	r2,r7,r2
   12a44:	19c00017 	ldw	r7,0(r3)
   12a48:	1a3ffe04 	addi	r8,r3,-8
   12a4c:	1144b03a 	or	r2,r2,r5
   12a50:	32000315 	stw	r8,12(r6)
   12a54:	31c00215 	stw	r7,8(r6)
   12a58:	20800115 	stw	r2,4(r4)
   12a5c:	19800015 	stw	r6,0(r3)
   12a60:	39800315 	stw	r6,12(r7)
   12a64:	8809883a 	mov	r4,r17
   12a68:	dfc00217 	ldw	ra,8(sp)
   12a6c:	dc400117 	ldw	r17,4(sp)
   12a70:	dc000017 	ldw	r16,0(sp)
   12a74:	dec00304 	addi	sp,sp,12
   12a78:	00142d01 	jmpi	142d0 <__malloc_unlock>
   12a7c:	f800283a 	ret
   12a80:	100ad27a 	srli	r5,r2,9
   12a84:	00c00104 	movi	r3,4
   12a88:	19404a36 	bltu	r3,r5,12bb4 <_free_r+0x240>
   12a8c:	100ad1ba 	srli	r5,r2,6
   12a90:	28c00e44 	addi	r3,r5,57
   12a94:	18c7883a 	add	r3,r3,r3
   12a98:	29400e04 	addi	r5,r5,56
   12a9c:	18c7883a 	add	r3,r3,r3
   12aa0:	18c7883a 	add	r3,r3,r3
   12aa4:	1909883a 	add	r4,r3,r4
   12aa8:	20c00017 	ldw	r3,0(r4)
   12aac:	01c000b4 	movhi	r7,2
   12ab0:	213ffe04 	addi	r4,r4,-8
   12ab4:	39e1d604 	addi	r7,r7,-30888
   12ab8:	20c04426 	beq	r4,r3,12bcc <_free_r+0x258>
   12abc:	01ffff04 	movi	r7,-4
   12ac0:	19400117 	ldw	r5,4(r3)
   12ac4:	29ca703a 	and	r5,r5,r7
   12ac8:	1140022e 	bgeu	r2,r5,12ad4 <_free_r+0x160>
   12acc:	18c00217 	ldw	r3,8(r3)
   12ad0:	20fffb1e 	bne	r4,r3,12ac0 <_free_r+0x14c>
   12ad4:	19000317 	ldw	r4,12(r3)
   12ad8:	31000315 	stw	r4,12(r6)
   12adc:	30c00215 	stw	r3,8(r6)
   12ae0:	21800215 	stw	r6,8(r4)
   12ae4:	19800315 	stw	r6,12(r3)
   12ae8:	003fde06 	br	12a64 <_free_r+0xf0>
   12aec:	29c00217 	ldw	r7,8(r5)
   12af0:	10c5883a 	add	r2,r2,r3
   12af4:	00c000b4 	movhi	r3,2
   12af8:	18e1d804 	addi	r3,r3,-30880
   12afc:	38c03b26 	beq	r7,r3,12bec <_free_r+0x278>
   12b00:	2a000317 	ldw	r8,12(r5)
   12b04:	11400054 	ori	r5,r2,1
   12b08:	3087883a 	add	r3,r6,r2
   12b0c:	3a000315 	stw	r8,12(r7)
   12b10:	41c00215 	stw	r7,8(r8)
   12b14:	31400115 	stw	r5,4(r6)
   12b18:	18800015 	stw	r2,0(r3)
   12b1c:	003fbd06 	br	12a14 <_free_r+0xa0>
   12b20:	39c0004c 	andi	r7,r7,1
   12b24:	10c5883a 	add	r2,r2,r3
   12b28:	3800071e 	bne	r7,zero,12b48 <_free_r+0x1d4>
   12b2c:	81fffe17 	ldw	r7,-8(r16)
   12b30:	31cdc83a 	sub	r6,r6,r7
   12b34:	30c00317 	ldw	r3,12(r6)
   12b38:	31400217 	ldw	r5,8(r6)
   12b3c:	11c5883a 	add	r2,r2,r7
   12b40:	28c00315 	stw	r3,12(r5)
   12b44:	19400215 	stw	r5,8(r3)
   12b48:	10c00054 	ori	r3,r2,1
   12b4c:	30c00115 	stw	r3,4(r6)
   12b50:	00c000b4 	movhi	r3,2
   12b54:	18e78404 	addi	r3,r3,-25072
   12b58:	18c00017 	ldw	r3,0(r3)
   12b5c:	21800215 	stw	r6,8(r4)
   12b60:	10ffc036 	bltu	r2,r3,12a64 <_free_r+0xf0>
   12b64:	008000b4 	movhi	r2,2
   12b68:	10a79204 	addi	r2,r2,-25016
   12b6c:	11400017 	ldw	r5,0(r2)
   12b70:	8809883a 	mov	r4,r17
   12b74:	00128500 	call	12850 <_malloc_trim_r>
   12b78:	003fba06 	br	12a64 <_free_r+0xf0>
   12b7c:	28c9883a 	add	r4,r5,r3
   12b80:	21000117 	ldw	r4,4(r4)
   12b84:	2100004c 	andi	r4,r4,1
   12b88:	2000391e 	bne	r4,zero,12c70 <_free_r+0x2fc>
   12b8c:	29c00217 	ldw	r7,8(r5)
   12b90:	29000317 	ldw	r4,12(r5)
   12b94:	1885883a 	add	r2,r3,r2
   12b98:	10c00054 	ori	r3,r2,1
   12b9c:	39000315 	stw	r4,12(r7)
   12ba0:	21c00215 	stw	r7,8(r4)
   12ba4:	30c00115 	stw	r3,4(r6)
   12ba8:	308d883a 	add	r6,r6,r2
   12bac:	30800015 	stw	r2,0(r6)
   12bb0:	003fac06 	br	12a64 <_free_r+0xf0>
   12bb4:	00c00504 	movi	r3,20
   12bb8:	19401536 	bltu	r3,r5,12c10 <_free_r+0x29c>
   12bbc:	28c01704 	addi	r3,r5,92
   12bc0:	18c7883a 	add	r3,r3,r3
   12bc4:	294016c4 	addi	r5,r5,91
   12bc8:	003fb406 	br	12a9c <_free_r+0x128>
   12bcc:	280bd0ba 	srai	r5,r5,2
   12bd0:	00c00044 	movi	r3,1
   12bd4:	38800117 	ldw	r2,4(r7)
   12bd8:	194a983a 	sll	r5,r3,r5
   12bdc:	2007883a 	mov	r3,r4
   12be0:	2884b03a 	or	r2,r5,r2
   12be4:	38800115 	stw	r2,4(r7)
   12be8:	003fbb06 	br	12ad8 <_free_r+0x164>
   12bec:	21800515 	stw	r6,20(r4)
   12bf0:	21800415 	stw	r6,16(r4)
   12bf4:	10c00054 	ori	r3,r2,1
   12bf8:	31c00315 	stw	r7,12(r6)
   12bfc:	31c00215 	stw	r7,8(r6)
   12c00:	30c00115 	stw	r3,4(r6)
   12c04:	308d883a 	add	r6,r6,r2
   12c08:	30800015 	stw	r2,0(r6)
   12c0c:	003f9506 	br	12a64 <_free_r+0xf0>
   12c10:	00c01504 	movi	r3,84
   12c14:	19400536 	bltu	r3,r5,12c2c <_free_r+0x2b8>
   12c18:	100ad33a 	srli	r5,r2,12
   12c1c:	28c01bc4 	addi	r3,r5,111
   12c20:	18c7883a 	add	r3,r3,r3
   12c24:	29401b84 	addi	r5,r5,110
   12c28:	003f9c06 	br	12a9c <_free_r+0x128>
   12c2c:	00c05504 	movi	r3,340
   12c30:	19400536 	bltu	r3,r5,12c48 <_free_r+0x2d4>
   12c34:	100ad3fa 	srli	r5,r2,15
   12c38:	28c01e04 	addi	r3,r5,120
   12c3c:	18c7883a 	add	r3,r3,r3
   12c40:	29401dc4 	addi	r5,r5,119
   12c44:	003f9506 	br	12a9c <_free_r+0x128>
   12c48:	00c15504 	movi	r3,1364
   12c4c:	19400536 	bltu	r3,r5,12c64 <_free_r+0x2f0>
   12c50:	100ad4ba 	srli	r5,r2,18
   12c54:	28c01f44 	addi	r3,r5,125
   12c58:	18c7883a 	add	r3,r3,r3
   12c5c:	29401f04 	addi	r5,r5,124
   12c60:	003f8e06 	br	12a9c <_free_r+0x128>
   12c64:	00c03f84 	movi	r3,254
   12c68:	01401f84 	movi	r5,126
   12c6c:	003f8b06 	br	12a9c <_free_r+0x128>
   12c70:	10c00054 	ori	r3,r2,1
   12c74:	30c00115 	stw	r3,4(r6)
   12c78:	308d883a 	add	r6,r6,r2
   12c7c:	30800015 	stw	r2,0(r6)
   12c80:	003f7806 	br	12a64 <_free_r+0xf0>

00012c84 <_lseek_r>:
   12c84:	defffd04 	addi	sp,sp,-12
   12c88:	2805883a 	mov	r2,r5
   12c8c:	dc000015 	stw	r16,0(sp)
   12c90:	040000b4 	movhi	r16,2
   12c94:	dc400115 	stw	r17,4(sp)
   12c98:	300b883a 	mov	r5,r6
   12c9c:	84279304 	addi	r16,r16,-25012
   12ca0:	2023883a 	mov	r17,r4
   12ca4:	380d883a 	mov	r6,r7
   12ca8:	1009883a 	mov	r4,r2
   12cac:	dfc00215 	stw	ra,8(sp)
   12cb0:	80000015 	stw	zero,0(r16)
   12cb4:	001407c0 	call	1407c <lseek>
   12cb8:	00ffffc4 	movi	r3,-1
   12cbc:	10c00526 	beq	r2,r3,12cd4 <_lseek_r+0x50>
   12cc0:	dfc00217 	ldw	ra,8(sp)
   12cc4:	dc400117 	ldw	r17,4(sp)
   12cc8:	dc000017 	ldw	r16,0(sp)
   12ccc:	dec00304 	addi	sp,sp,12
   12cd0:	f800283a 	ret
   12cd4:	80c00017 	ldw	r3,0(r16)
   12cd8:	183ff926 	beq	r3,zero,12cc0 <_lseek_r+0x3c>
   12cdc:	88c00015 	stw	r3,0(r17)
   12ce0:	003ff706 	br	12cc0 <_lseek_r+0x3c>

00012ce4 <__smakebuf_r>:
   12ce4:	2880030b 	ldhu	r2,12(r5)
   12ce8:	10c0008c 	andi	r3,r2,2
   12cec:	1800411e 	bne	r3,zero,12df4 <__smakebuf_r+0x110>
   12cf0:	deffec04 	addi	sp,sp,-80
   12cf4:	dc000f15 	stw	r16,60(sp)
   12cf8:	2821883a 	mov	r16,r5
   12cfc:	2940038f 	ldh	r5,14(r5)
   12d00:	dc401015 	stw	r17,64(sp)
   12d04:	dfc01315 	stw	ra,76(sp)
   12d08:	dcc01215 	stw	r19,72(sp)
   12d0c:	dc801115 	stw	r18,68(sp)
   12d10:	2023883a 	mov	r17,r4
   12d14:	28001c16 	blt	r5,zero,12d88 <__smakebuf_r+0xa4>
   12d18:	d80d883a 	mov	r6,sp
   12d1c:	0012f000 	call	12f00 <_fstat_r>
   12d20:	10001816 	blt	r2,zero,12d84 <__smakebuf_r+0xa0>
   12d24:	d8800117 	ldw	r2,4(sp)
   12d28:	00e00014 	movui	r3,32768
   12d2c:	10bc000c 	andi	r2,r2,61440
   12d30:	14c80020 	cmpeqi	r19,r2,8192
   12d34:	10c03726 	beq	r2,r3,12e14 <__smakebuf_r+0x130>
   12d38:	80c0030b 	ldhu	r3,12(r16)
   12d3c:	18c20014 	ori	r3,r3,2048
   12d40:	80c0030d 	sth	r3,12(r16)
   12d44:	00c80004 	movi	r3,8192
   12d48:	10c0521e 	bne	r2,r3,12e94 <__smakebuf_r+0x1b0>
   12d4c:	8140038f 	ldh	r5,14(r16)
   12d50:	8809883a 	mov	r4,r17
   12d54:	0012f5c0 	call	12f5c <_isatty_r>
   12d58:	10004c26 	beq	r2,zero,12e8c <__smakebuf_r+0x1a8>
   12d5c:	8080030b 	ldhu	r2,12(r16)
   12d60:	80c010c4 	addi	r3,r16,67
   12d64:	80c00015 	stw	r3,0(r16)
   12d68:	10800054 	ori	r2,r2,1
   12d6c:	8080030d 	sth	r2,12(r16)
   12d70:	00800044 	movi	r2,1
   12d74:	80c00415 	stw	r3,16(r16)
   12d78:	80800515 	stw	r2,20(r16)
   12d7c:	04810004 	movi	r18,1024
   12d80:	00000706 	br	12da0 <__smakebuf_r+0xbc>
   12d84:	8080030b 	ldhu	r2,12(r16)
   12d88:	10c0200c 	andi	r3,r2,128
   12d8c:	18001f1e 	bne	r3,zero,12e0c <__smakebuf_r+0x128>
   12d90:	04810004 	movi	r18,1024
   12d94:	10820014 	ori	r2,r2,2048
   12d98:	8080030d 	sth	r2,12(r16)
   12d9c:	0027883a 	mov	r19,zero
   12da0:	900b883a 	mov	r5,r18
   12da4:	8809883a 	mov	r4,r17
   12da8:	0010eec0 	call	10eec <_malloc_r>
   12dac:	10002c26 	beq	r2,zero,12e60 <__smakebuf_r+0x17c>
   12db0:	80c0030b 	ldhu	r3,12(r16)
   12db4:	01000074 	movhi	r4,1
   12db8:	21013d04 	addi	r4,r4,1268
   12dbc:	89000f15 	stw	r4,60(r17)
   12dc0:	18c02014 	ori	r3,r3,128
   12dc4:	80c0030d 	sth	r3,12(r16)
   12dc8:	80800015 	stw	r2,0(r16)
   12dcc:	80800415 	stw	r2,16(r16)
   12dd0:	84800515 	stw	r18,20(r16)
   12dd4:	98001a1e 	bne	r19,zero,12e40 <__smakebuf_r+0x15c>
   12dd8:	dfc01317 	ldw	ra,76(sp)
   12ddc:	dcc01217 	ldw	r19,72(sp)
   12de0:	dc801117 	ldw	r18,68(sp)
   12de4:	dc401017 	ldw	r17,64(sp)
   12de8:	dc000f17 	ldw	r16,60(sp)
   12dec:	dec01404 	addi	sp,sp,80
   12df0:	f800283a 	ret
   12df4:	288010c4 	addi	r2,r5,67
   12df8:	28800015 	stw	r2,0(r5)
   12dfc:	28800415 	stw	r2,16(r5)
   12e00:	00800044 	movi	r2,1
   12e04:	28800515 	stw	r2,20(r5)
   12e08:	f800283a 	ret
   12e0c:	04801004 	movi	r18,64
   12e10:	003fe006 	br	12d94 <__smakebuf_r+0xb0>
   12e14:	81000a17 	ldw	r4,40(r16)
   12e18:	00c00074 	movhi	r3,1
   12e1c:	18c88e04 	addi	r3,r3,8760
   12e20:	20ffc51e 	bne	r4,r3,12d38 <__smakebuf_r+0x54>
   12e24:	8080030b 	ldhu	r2,12(r16)
   12e28:	04810004 	movi	r18,1024
   12e2c:	84801315 	stw	r18,76(r16)
   12e30:	1484b03a 	or	r2,r2,r18
   12e34:	8080030d 	sth	r2,12(r16)
   12e38:	0027883a 	mov	r19,zero
   12e3c:	003fd806 	br	12da0 <__smakebuf_r+0xbc>
   12e40:	8140038f 	ldh	r5,14(r16)
   12e44:	8809883a 	mov	r4,r17
   12e48:	0012f5c0 	call	12f5c <_isatty_r>
   12e4c:	103fe226 	beq	r2,zero,12dd8 <__smakebuf_r+0xf4>
   12e50:	8080030b 	ldhu	r2,12(r16)
   12e54:	10800054 	ori	r2,r2,1
   12e58:	8080030d 	sth	r2,12(r16)
   12e5c:	003fde06 	br	12dd8 <__smakebuf_r+0xf4>
   12e60:	8080030b 	ldhu	r2,12(r16)
   12e64:	10c0800c 	andi	r3,r2,512
   12e68:	183fdb1e 	bne	r3,zero,12dd8 <__smakebuf_r+0xf4>
   12e6c:	10800094 	ori	r2,r2,2
   12e70:	80c010c4 	addi	r3,r16,67
   12e74:	8080030d 	sth	r2,12(r16)
   12e78:	00800044 	movi	r2,1
   12e7c:	80c00015 	stw	r3,0(r16)
   12e80:	80c00415 	stw	r3,16(r16)
   12e84:	80800515 	stw	r2,20(r16)
   12e88:	003fd306 	br	12dd8 <__smakebuf_r+0xf4>
   12e8c:	04810004 	movi	r18,1024
   12e90:	003fc306 	br	12da0 <__smakebuf_r+0xbc>
   12e94:	0027883a 	mov	r19,zero
   12e98:	04810004 	movi	r18,1024
   12e9c:	003fc006 	br	12da0 <__smakebuf_r+0xbc>

00012ea0 <_read_r>:
   12ea0:	defffd04 	addi	sp,sp,-12
   12ea4:	2805883a 	mov	r2,r5
   12ea8:	dc000015 	stw	r16,0(sp)
   12eac:	040000b4 	movhi	r16,2
   12eb0:	dc400115 	stw	r17,4(sp)
   12eb4:	300b883a 	mov	r5,r6
   12eb8:	84279304 	addi	r16,r16,-25012
   12ebc:	2023883a 	mov	r17,r4
   12ec0:	380d883a 	mov	r6,r7
   12ec4:	1009883a 	mov	r4,r2
   12ec8:	dfc00215 	stw	ra,8(sp)
   12ecc:	80000015 	stw	zero,0(r16)
   12ed0:	00143300 	call	14330 <read>
   12ed4:	00ffffc4 	movi	r3,-1
   12ed8:	10c00526 	beq	r2,r3,12ef0 <_read_r+0x50>
   12edc:	dfc00217 	ldw	ra,8(sp)
   12ee0:	dc400117 	ldw	r17,4(sp)
   12ee4:	dc000017 	ldw	r16,0(sp)
   12ee8:	dec00304 	addi	sp,sp,12
   12eec:	f800283a 	ret
   12ef0:	80c00017 	ldw	r3,0(r16)
   12ef4:	183ff926 	beq	r3,zero,12edc <_read_r+0x3c>
   12ef8:	88c00015 	stw	r3,0(r17)
   12efc:	003ff706 	br	12edc <_read_r+0x3c>

00012f00 <_fstat_r>:
   12f00:	defffd04 	addi	sp,sp,-12
   12f04:	2805883a 	mov	r2,r5
   12f08:	dc000015 	stw	r16,0(sp)
   12f0c:	040000b4 	movhi	r16,2
   12f10:	dc400115 	stw	r17,4(sp)
   12f14:	84279304 	addi	r16,r16,-25012
   12f18:	2023883a 	mov	r17,r4
   12f1c:	300b883a 	mov	r5,r6
   12f20:	1009883a 	mov	r4,r2
   12f24:	dfc00215 	stw	ra,8(sp)
   12f28:	80000015 	stw	zero,0(r16)
   12f2c:	00133080 	call	13308 <fstat>
   12f30:	00ffffc4 	movi	r3,-1
   12f34:	10c00526 	beq	r2,r3,12f4c <_fstat_r+0x4c>
   12f38:	dfc00217 	ldw	ra,8(sp)
   12f3c:	dc400117 	ldw	r17,4(sp)
   12f40:	dc000017 	ldw	r16,0(sp)
   12f44:	dec00304 	addi	sp,sp,12
   12f48:	f800283a 	ret
   12f4c:	80c00017 	ldw	r3,0(r16)
   12f50:	183ff926 	beq	r3,zero,12f38 <_fstat_r+0x38>
   12f54:	88c00015 	stw	r3,0(r17)
   12f58:	003ff706 	br	12f38 <_fstat_r+0x38>

00012f5c <_isatty_r>:
   12f5c:	defffd04 	addi	sp,sp,-12
   12f60:	dc000015 	stw	r16,0(sp)
   12f64:	040000b4 	movhi	r16,2
   12f68:	dc400115 	stw	r17,4(sp)
   12f6c:	84279304 	addi	r16,r16,-25012
   12f70:	2023883a 	mov	r17,r4
   12f74:	2809883a 	mov	r4,r5
   12f78:	dfc00215 	stw	ra,8(sp)
   12f7c:	80000015 	stw	zero,0(r16)
   12f80:	00133fc0 	call	133fc <isatty>
   12f84:	00ffffc4 	movi	r3,-1
   12f88:	10c00526 	beq	r2,r3,12fa0 <_isatty_r+0x44>
   12f8c:	dfc00217 	ldw	ra,8(sp)
   12f90:	dc400117 	ldw	r17,4(sp)
   12f94:	dc000017 	ldw	r16,0(sp)
   12f98:	dec00304 	addi	sp,sp,12
   12f9c:	f800283a 	ret
   12fa0:	80c00017 	ldw	r3,0(r16)
   12fa4:	183ff926 	beq	r3,zero,12f8c <_isatty_r+0x30>
   12fa8:	88c00015 	stw	r3,0(r17)
   12fac:	003ff706 	br	12f8c <_isatty_r+0x30>

00012fb0 <__divsi3>:
   12fb0:	20001b16 	blt	r4,zero,13020 <__divsi3+0x70>
   12fb4:	000f883a 	mov	r7,zero
   12fb8:	28001616 	blt	r5,zero,13014 <__divsi3+0x64>
   12fbc:	200d883a 	mov	r6,r4
   12fc0:	29001a2e 	bgeu	r5,r4,1302c <__divsi3+0x7c>
   12fc4:	00800804 	movi	r2,32
   12fc8:	00c00044 	movi	r3,1
   12fcc:	00000106 	br	12fd4 <__divsi3+0x24>
   12fd0:	10000d26 	beq	r2,zero,13008 <__divsi3+0x58>
   12fd4:	294b883a 	add	r5,r5,r5
   12fd8:	10bfffc4 	addi	r2,r2,-1
   12fdc:	18c7883a 	add	r3,r3,r3
   12fe0:	293ffb36 	bltu	r5,r4,12fd0 <__divsi3+0x20>
   12fe4:	0005883a 	mov	r2,zero
   12fe8:	18000726 	beq	r3,zero,13008 <__divsi3+0x58>
   12fec:	0005883a 	mov	r2,zero
   12ff0:	31400236 	bltu	r6,r5,12ffc <__divsi3+0x4c>
   12ff4:	314dc83a 	sub	r6,r6,r5
   12ff8:	10c4b03a 	or	r2,r2,r3
   12ffc:	1806d07a 	srli	r3,r3,1
   13000:	280ad07a 	srli	r5,r5,1
   13004:	183ffa1e 	bne	r3,zero,12ff0 <__divsi3+0x40>
   13008:	38000126 	beq	r7,zero,13010 <__divsi3+0x60>
   1300c:	0085c83a 	sub	r2,zero,r2
   13010:	f800283a 	ret
   13014:	014bc83a 	sub	r5,zero,r5
   13018:	39c0005c 	xori	r7,r7,1
   1301c:	003fe706 	br	12fbc <__divsi3+0xc>
   13020:	0109c83a 	sub	r4,zero,r4
   13024:	01c00044 	movi	r7,1
   13028:	003fe306 	br	12fb8 <__divsi3+0x8>
   1302c:	00c00044 	movi	r3,1
   13030:	003fee06 	br	12fec <__divsi3+0x3c>

00013034 <__modsi3>:
   13034:	20001716 	blt	r4,zero,13094 <__modsi3+0x60>
   13038:	000f883a 	mov	r7,zero
   1303c:	2005883a 	mov	r2,r4
   13040:	28001216 	blt	r5,zero,1308c <__modsi3+0x58>
   13044:	2900162e 	bgeu	r5,r4,130a0 <__modsi3+0x6c>
   13048:	01800804 	movi	r6,32
   1304c:	00c00044 	movi	r3,1
   13050:	00000106 	br	13058 <__modsi3+0x24>
   13054:	30000a26 	beq	r6,zero,13080 <__modsi3+0x4c>
   13058:	294b883a 	add	r5,r5,r5
   1305c:	31bfffc4 	addi	r6,r6,-1
   13060:	18c7883a 	add	r3,r3,r3
   13064:	293ffb36 	bltu	r5,r4,13054 <__modsi3+0x20>
   13068:	18000526 	beq	r3,zero,13080 <__modsi3+0x4c>
   1306c:	1806d07a 	srli	r3,r3,1
   13070:	11400136 	bltu	r2,r5,13078 <__modsi3+0x44>
   13074:	1145c83a 	sub	r2,r2,r5
   13078:	280ad07a 	srli	r5,r5,1
   1307c:	183ffb1e 	bne	r3,zero,1306c <__modsi3+0x38>
   13080:	38000126 	beq	r7,zero,13088 <__modsi3+0x54>
   13084:	0085c83a 	sub	r2,zero,r2
   13088:	f800283a 	ret
   1308c:	014bc83a 	sub	r5,zero,r5
   13090:	003fec06 	br	13044 <__modsi3+0x10>
   13094:	0109c83a 	sub	r4,zero,r4
   13098:	01c00044 	movi	r7,1
   1309c:	003fe706 	br	1303c <__modsi3+0x8>
   130a0:	00c00044 	movi	r3,1
   130a4:	003ff106 	br	1306c <__modsi3+0x38>

000130a8 <__udivsi3>:
   130a8:	200d883a 	mov	r6,r4
   130ac:	2900152e 	bgeu	r5,r4,13104 <__udivsi3+0x5c>
   130b0:	28001416 	blt	r5,zero,13104 <__udivsi3+0x5c>
   130b4:	00800804 	movi	r2,32
   130b8:	00c00044 	movi	r3,1
   130bc:	00000206 	br	130c8 <__udivsi3+0x20>
   130c0:	10000e26 	beq	r2,zero,130fc <__udivsi3+0x54>
   130c4:	28000516 	blt	r5,zero,130dc <__udivsi3+0x34>
   130c8:	294b883a 	add	r5,r5,r5
   130cc:	10bfffc4 	addi	r2,r2,-1
   130d0:	18c7883a 	add	r3,r3,r3
   130d4:	293ffa36 	bltu	r5,r4,130c0 <__udivsi3+0x18>
   130d8:	18000826 	beq	r3,zero,130fc <__udivsi3+0x54>
   130dc:	0005883a 	mov	r2,zero
   130e0:	31400236 	bltu	r6,r5,130ec <__udivsi3+0x44>
   130e4:	314dc83a 	sub	r6,r6,r5
   130e8:	10c4b03a 	or	r2,r2,r3
   130ec:	1806d07a 	srli	r3,r3,1
   130f0:	280ad07a 	srli	r5,r5,1
   130f4:	183ffa1e 	bne	r3,zero,130e0 <__udivsi3+0x38>
   130f8:	f800283a 	ret
   130fc:	0005883a 	mov	r2,zero
   13100:	f800283a 	ret
   13104:	00c00044 	movi	r3,1
   13108:	003ff406 	br	130dc <__udivsi3+0x34>

0001310c <__umodsi3>:
   1310c:	2005883a 	mov	r2,r4
   13110:	2900122e 	bgeu	r5,r4,1315c <__umodsi3+0x50>
   13114:	28001116 	blt	r5,zero,1315c <__umodsi3+0x50>
   13118:	01800804 	movi	r6,32
   1311c:	00c00044 	movi	r3,1
   13120:	00000206 	br	1312c <__umodsi3+0x20>
   13124:	30000c26 	beq	r6,zero,13158 <__umodsi3+0x4c>
   13128:	28000516 	blt	r5,zero,13140 <__umodsi3+0x34>
   1312c:	294b883a 	add	r5,r5,r5
   13130:	31bfffc4 	addi	r6,r6,-1
   13134:	18c7883a 	add	r3,r3,r3
   13138:	293ffa36 	bltu	r5,r4,13124 <__umodsi3+0x18>
   1313c:	18000626 	beq	r3,zero,13158 <__umodsi3+0x4c>
   13140:	1806d07a 	srli	r3,r3,1
   13144:	11400136 	bltu	r2,r5,1314c <__umodsi3+0x40>
   13148:	1145c83a 	sub	r2,r2,r5
   1314c:	280ad07a 	srli	r5,r5,1
   13150:	183ffb1e 	bne	r3,zero,13140 <__umodsi3+0x34>
   13154:	f800283a 	ret
   13158:	f800283a 	ret
   1315c:	00c00044 	movi	r3,1
   13160:	003ff706 	br	13140 <__umodsi3+0x34>

00013164 <__mulsi3>:
   13164:	0005883a 	mov	r2,zero
   13168:	20000726 	beq	r4,zero,13188 <__mulsi3+0x24>
   1316c:	20c0004c 	andi	r3,r4,1
   13170:	2008d07a 	srli	r4,r4,1
   13174:	18000126 	beq	r3,zero,1317c <__mulsi3+0x18>
   13178:	1145883a 	add	r2,r2,r5
   1317c:	294b883a 	add	r5,r5,r5
   13180:	203ffa1e 	bne	r4,zero,1316c <__mulsi3+0x8>
   13184:	f800283a 	ret
   13188:	f800283a 	ret

0001318c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1318c:	defffe04 	addi	sp,sp,-8
   13190:	dfc00115 	stw	ra,4(sp)
   13194:	df000015 	stw	fp,0(sp)
   13198:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1319c:	d0a00917 	ldw	r2,-32732(gp)
   131a0:	10000326 	beq	r2,zero,131b0 <alt_get_errno+0x24>
   131a4:	d0a00917 	ldw	r2,-32732(gp)
   131a8:	103ee83a 	callr	r2
   131ac:	00000106 	br	131b4 <alt_get_errno+0x28>
   131b0:	d0a01204 	addi	r2,gp,-32696
}
   131b4:	e037883a 	mov	sp,fp
   131b8:	dfc00117 	ldw	ra,4(sp)
   131bc:	df000017 	ldw	fp,0(sp)
   131c0:	dec00204 	addi	sp,sp,8
   131c4:	f800283a 	ret

000131c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   131c8:	defffb04 	addi	sp,sp,-20
   131cc:	dfc00415 	stw	ra,16(sp)
   131d0:	df000315 	stw	fp,12(sp)
   131d4:	df000304 	addi	fp,sp,12
   131d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   131dc:	e0bfff17 	ldw	r2,-4(fp)
   131e0:	10000816 	blt	r2,zero,13204 <close+0x3c>
   131e4:	01400304 	movi	r5,12
   131e8:	e13fff17 	ldw	r4,-4(fp)
   131ec:	00131640 	call	13164 <__mulsi3>
   131f0:	1007883a 	mov	r3,r2
   131f4:	008000b4 	movhi	r2,2
   131f8:	10a2e204 	addi	r2,r2,-29816
   131fc:	1885883a 	add	r2,r3,r2
   13200:	00000106 	br	13208 <close+0x40>
   13204:	0005883a 	mov	r2,zero
   13208:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1320c:	e0bffd17 	ldw	r2,-12(fp)
   13210:	10001926 	beq	r2,zero,13278 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13214:	e0bffd17 	ldw	r2,-12(fp)
   13218:	10800017 	ldw	r2,0(r2)
   1321c:	10800417 	ldw	r2,16(r2)
   13220:	10000626 	beq	r2,zero,1323c <close+0x74>
   13224:	e0bffd17 	ldw	r2,-12(fp)
   13228:	10800017 	ldw	r2,0(r2)
   1322c:	10800417 	ldw	r2,16(r2)
   13230:	e13ffd17 	ldw	r4,-12(fp)
   13234:	103ee83a 	callr	r2
   13238:	00000106 	br	13240 <close+0x78>
   1323c:	0005883a 	mov	r2,zero
   13240:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13244:	e13fff17 	ldw	r4,-4(fp)
   13248:	00144340 	call	14434 <alt_release_fd>
    if (rval < 0)
   1324c:	e0bffe17 	ldw	r2,-8(fp)
   13250:	1000070e 	bge	r2,zero,13270 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   13254:	001318c0 	call	1318c <alt_get_errno>
   13258:	1007883a 	mov	r3,r2
   1325c:	e0bffe17 	ldw	r2,-8(fp)
   13260:	0085c83a 	sub	r2,zero,r2
   13264:	18800015 	stw	r2,0(r3)
      return -1;
   13268:	00bfffc4 	movi	r2,-1
   1326c:	00000706 	br	1328c <close+0xc4>
    }
    return 0;
   13270:	0005883a 	mov	r2,zero
   13274:	00000506 	br	1328c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13278:	001318c0 	call	1318c <alt_get_errno>
   1327c:	1007883a 	mov	r3,r2
   13280:	00801444 	movi	r2,81
   13284:	18800015 	stw	r2,0(r3)
    return -1;
   13288:	00bfffc4 	movi	r2,-1
  }
}
   1328c:	e037883a 	mov	sp,fp
   13290:	dfc00117 	ldw	ra,4(sp)
   13294:	df000017 	ldw	fp,0(sp)
   13298:	dec00204 	addi	sp,sp,8
   1329c:	f800283a 	ret

000132a0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   132a0:	defffc04 	addi	sp,sp,-16
   132a4:	df000315 	stw	fp,12(sp)
   132a8:	df000304 	addi	fp,sp,12
   132ac:	e13ffd15 	stw	r4,-12(fp)
   132b0:	e17ffe15 	stw	r5,-8(fp)
   132b4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   132b8:	e0bfff17 	ldw	r2,-4(fp)
}
   132bc:	e037883a 	mov	sp,fp
   132c0:	df000017 	ldw	fp,0(sp)
   132c4:	dec00104 	addi	sp,sp,4
   132c8:	f800283a 	ret

000132cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   132cc:	defffe04 	addi	sp,sp,-8
   132d0:	dfc00115 	stw	ra,4(sp)
   132d4:	df000015 	stw	fp,0(sp)
   132d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   132dc:	d0a00917 	ldw	r2,-32732(gp)
   132e0:	10000326 	beq	r2,zero,132f0 <alt_get_errno+0x24>
   132e4:	d0a00917 	ldw	r2,-32732(gp)
   132e8:	103ee83a 	callr	r2
   132ec:	00000106 	br	132f4 <alt_get_errno+0x28>
   132f0:	d0a01204 	addi	r2,gp,-32696
}
   132f4:	e037883a 	mov	sp,fp
   132f8:	dfc00117 	ldw	ra,4(sp)
   132fc:	df000017 	ldw	fp,0(sp)
   13300:	dec00204 	addi	sp,sp,8
   13304:	f800283a 	ret

00013308 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13308:	defffb04 	addi	sp,sp,-20
   1330c:	dfc00415 	stw	ra,16(sp)
   13310:	df000315 	stw	fp,12(sp)
   13314:	df000304 	addi	fp,sp,12
   13318:	e13ffe15 	stw	r4,-8(fp)
   1331c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13320:	e0bffe17 	ldw	r2,-8(fp)
   13324:	10000816 	blt	r2,zero,13348 <fstat+0x40>
   13328:	01400304 	movi	r5,12
   1332c:	e13ffe17 	ldw	r4,-8(fp)
   13330:	00131640 	call	13164 <__mulsi3>
   13334:	1007883a 	mov	r3,r2
   13338:	008000b4 	movhi	r2,2
   1333c:	10a2e204 	addi	r2,r2,-29816
   13340:	1885883a 	add	r2,r3,r2
   13344:	00000106 	br	1334c <fstat+0x44>
   13348:	0005883a 	mov	r2,zero
   1334c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13350:	e0bffd17 	ldw	r2,-12(fp)
   13354:	10001026 	beq	r2,zero,13398 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13358:	e0bffd17 	ldw	r2,-12(fp)
   1335c:	10800017 	ldw	r2,0(r2)
   13360:	10800817 	ldw	r2,32(r2)
   13364:	10000726 	beq	r2,zero,13384 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   13368:	e0bffd17 	ldw	r2,-12(fp)
   1336c:	10800017 	ldw	r2,0(r2)
   13370:	10800817 	ldw	r2,32(r2)
   13374:	e17fff17 	ldw	r5,-4(fp)
   13378:	e13ffd17 	ldw	r4,-12(fp)
   1337c:	103ee83a 	callr	r2
   13380:	00000a06 	br	133ac <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13384:	e0bfff17 	ldw	r2,-4(fp)
   13388:	00c80004 	movi	r3,8192
   1338c:	10c00115 	stw	r3,4(r2)
      return 0;
   13390:	0005883a 	mov	r2,zero
   13394:	00000506 	br	133ac <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13398:	00132cc0 	call	132cc <alt_get_errno>
   1339c:	1007883a 	mov	r3,r2
   133a0:	00801444 	movi	r2,81
   133a4:	18800015 	stw	r2,0(r3)
    return -1;
   133a8:	00bfffc4 	movi	r2,-1
  }
}
   133ac:	e037883a 	mov	sp,fp
   133b0:	dfc00117 	ldw	ra,4(sp)
   133b4:	df000017 	ldw	fp,0(sp)
   133b8:	dec00204 	addi	sp,sp,8
   133bc:	f800283a 	ret

000133c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   133c0:	defffe04 	addi	sp,sp,-8
   133c4:	dfc00115 	stw	ra,4(sp)
   133c8:	df000015 	stw	fp,0(sp)
   133cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   133d0:	d0a00917 	ldw	r2,-32732(gp)
   133d4:	10000326 	beq	r2,zero,133e4 <alt_get_errno+0x24>
   133d8:	d0a00917 	ldw	r2,-32732(gp)
   133dc:	103ee83a 	callr	r2
   133e0:	00000106 	br	133e8 <alt_get_errno+0x28>
   133e4:	d0a01204 	addi	r2,gp,-32696
}
   133e8:	e037883a 	mov	sp,fp
   133ec:	dfc00117 	ldw	ra,4(sp)
   133f0:	df000017 	ldw	fp,0(sp)
   133f4:	dec00204 	addi	sp,sp,8
   133f8:	f800283a 	ret

000133fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   133fc:	deffed04 	addi	sp,sp,-76
   13400:	dfc01215 	stw	ra,72(sp)
   13404:	df001115 	stw	fp,68(sp)
   13408:	df001104 	addi	fp,sp,68
   1340c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13410:	e0bfff17 	ldw	r2,-4(fp)
   13414:	10000816 	blt	r2,zero,13438 <isatty+0x3c>
   13418:	01400304 	movi	r5,12
   1341c:	e13fff17 	ldw	r4,-4(fp)
   13420:	00131640 	call	13164 <__mulsi3>
   13424:	1007883a 	mov	r3,r2
   13428:	008000b4 	movhi	r2,2
   1342c:	10a2e204 	addi	r2,r2,-29816
   13430:	1885883a 	add	r2,r3,r2
   13434:	00000106 	br	1343c <isatty+0x40>
   13438:	0005883a 	mov	r2,zero
   1343c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13440:	e0bfef17 	ldw	r2,-68(fp)
   13444:	10000e26 	beq	r2,zero,13480 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13448:	e0bfef17 	ldw	r2,-68(fp)
   1344c:	10800017 	ldw	r2,0(r2)
   13450:	10800817 	ldw	r2,32(r2)
   13454:	1000021e 	bne	r2,zero,13460 <isatty+0x64>
    {
      return 1;
   13458:	00800044 	movi	r2,1
   1345c:	00000d06 	br	13494 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13460:	e0bff004 	addi	r2,fp,-64
   13464:	100b883a 	mov	r5,r2
   13468:	e13fff17 	ldw	r4,-4(fp)
   1346c:	00133080 	call	13308 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13470:	e0bff117 	ldw	r2,-60(fp)
   13474:	10880020 	cmpeqi	r2,r2,8192
   13478:	10803fcc 	andi	r2,r2,255
   1347c:	00000506 	br	13494 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13480:	00133c00 	call	133c0 <alt_get_errno>
   13484:	1007883a 	mov	r3,r2
   13488:	00801444 	movi	r2,81
   1348c:	18800015 	stw	r2,0(r3)
    return 0;
   13490:	0005883a 	mov	r2,zero
  }
}
   13494:	e037883a 	mov	sp,fp
   13498:	dfc00117 	ldw	ra,4(sp)
   1349c:	df000017 	ldw	fp,0(sp)
   134a0:	dec00204 	addi	sp,sp,8
   134a4:	f800283a 	ret

000134a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   134a8:	defffc04 	addi	sp,sp,-16
   134ac:	df000315 	stw	fp,12(sp)
   134b0:	df000304 	addi	fp,sp,12
   134b4:	e13ffd15 	stw	r4,-12(fp)
   134b8:	e17ffe15 	stw	r5,-8(fp)
   134bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   134c0:	e0fffe17 	ldw	r3,-8(fp)
   134c4:	e0bffd17 	ldw	r2,-12(fp)
   134c8:	18800c26 	beq	r3,r2,134fc <alt_load_section+0x54>
  {
    while( to != end )
   134cc:	00000806 	br	134f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   134d0:	e0bffe17 	ldw	r2,-8(fp)
   134d4:	10c00104 	addi	r3,r2,4
   134d8:	e0fffe15 	stw	r3,-8(fp)
   134dc:	e0fffd17 	ldw	r3,-12(fp)
   134e0:	19000104 	addi	r4,r3,4
   134e4:	e13ffd15 	stw	r4,-12(fp)
   134e8:	18c00017 	ldw	r3,0(r3)
   134ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   134f0:	e0fffe17 	ldw	r3,-8(fp)
   134f4:	e0bfff17 	ldw	r2,-4(fp)
   134f8:	18bff51e 	bne	r3,r2,134d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   134fc:	0001883a 	nop
   13500:	e037883a 	mov	sp,fp
   13504:	df000017 	ldw	fp,0(sp)
   13508:	dec00104 	addi	sp,sp,4
   1350c:	f800283a 	ret

00013510 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13510:	defffe04 	addi	sp,sp,-8
   13514:	dfc00115 	stw	ra,4(sp)
   13518:	df000015 	stw	fp,0(sp)
   1351c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13520:	018000b4 	movhi	r6,2
   13524:	31a79004 	addi	r6,r6,-25024
   13528:	014000b4 	movhi	r5,2
   1352c:	2960cd04 	addi	r5,r5,-31948
   13530:	01000074 	movhi	r4,1
   13534:	211a3204 	addi	r4,r4,26824
   13538:	00134a80 	call	134a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1353c:	01800074 	movhi	r6,1
   13540:	31808c04 	addi	r6,r6,560
   13544:	01400074 	movhi	r5,1
   13548:	29400804 	addi	r5,r5,32
   1354c:	01000074 	movhi	r4,1
   13550:	21000804 	addi	r4,r4,32
   13554:	00134a80 	call	134a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13558:	018000b4 	movhi	r6,2
   1355c:	31a0cd04 	addi	r6,r6,-31948
   13560:	014000b4 	movhi	r5,2
   13564:	29600004 	addi	r5,r5,-32768
   13568:	01000074 	movhi	r4,1
   1356c:	21196504 	addi	r4,r4,26004
   13570:	00134a80 	call	134a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13574:	00155140 	call	15514 <alt_dcache_flush_all>
  alt_icache_flush_all();
   13578:	00156d40 	call	156d4 <alt_icache_flush_all>
}
   1357c:	0001883a 	nop
   13580:	e037883a 	mov	sp,fp
   13584:	dfc00117 	ldw	ra,4(sp)
   13588:	df000017 	ldw	fp,0(sp)
   1358c:	dec00204 	addi	sp,sp,8
   13590:	f800283a 	ret

00013594 <tx_log_str>:
	#include "sys/alt_log_printf.h"

        .global tx_log_str
tx_log_str:
	/* load base uart / jtag uart address into r6 */
	movhi r6, %hiadj(ALT_LOG_PORT_BASE)
   13594:	018000b4 	movhi	r6,2
	addi r6, r6, %lo(ALT_LOG_PORT_BASE)
   13598:	31840404 	addi	r6,r6,4112

0001359c <tx_next_char>:
tx_next_char:
        /* if pointer points to null, return 
         * r4 is the pointer to the str to be printed, set by ALT_LOG_PUTS */
	ldb r7, (r4)
   1359c:	21c00007 	ldb	r7,0(r4)
	beq r0, r7, end_tx
   135a0:	01c00826 	beq	zero,r7,135c4 <end_tx>

000135a4 <wait_tx_ready_loop>:

	/* check device transmit ready  */
wait_tx_ready_loop:
        ldwio   r8, ALT_LOG_PRINT_REG_OFFSET(r6)
   135a4:	32000137 	ldwio	r8,4(r6)
        /*UART, ALT_LOG_PRINT_MSK == 0x40
          JTAG UART, ALT_LOG_PRINT_MSK == 0xFFFF0000 */
        andhi   r5, r8, %hi(ALT_LOG_PRINT_MSK)
   135a8:	417fffec 	andhi	r5,r8,65535
        andi    r8, r8, %lo(ALT_LOG_PRINT_MSK)
   135ac:	4200000c 	andi	r8,r8,0
        or      r5, r5, r8
   135b0:	2a0ab03a 	or	r5,r5,r8
        beq     r5, r0, wait_tx_ready_loop	
   135b4:	283ffb26 	beq	r5,zero,135a4 <wait_tx_ready_loop>
	/* write char */
	stwio   r7, ALT_LOG_PRINT_TXDATA_REG_OFFSET (r6)		
   135b8:	31c00035 	stwio	r7,0(r6)
	/* advance string pointer */
	addi r4, r4, 1
   135bc:	21000044 	addi	r4,r4,1
	br tx_next_char
   135c0:	003ff606 	br	1359c <tx_next_char>

000135c4 <end_tx>:
end_tx:	
        ret
   135c4:	f800283a 	ret

000135c8 <alt_log_txchar>:



/* Function to put one char onto the UART/JTAG UART txdata register. */
void alt_log_txchar(int c,char *base)
{
   135c8:	defffd04 	addi	sp,sp,-12
   135cc:	df000215 	stw	fp,8(sp)
   135d0:	df000204 	addi	fp,sp,8
   135d4:	e13ffe15 	stw	r4,-8(fp)
   135d8:	e17fff15 	stw	r5,-4(fp)
  /* Wait until the device is ready for a character */
  while((ALT_LOG_PRINT_REG_RD(base) & ALT_LOG_PRINT_MSK) == 0)
   135dc:	0001883a 	nop
   135e0:	e0bfff17 	ldw	r2,-4(fp)
   135e4:	10800104 	addi	r2,r2,4
   135e8:	10800037 	ldwio	r2,0(r2)
   135ec:	10bfffec 	andhi	r2,r2,65535
   135f0:	103ffb26 	beq	r2,zero,135e0 <alt_log_txchar+0x18>
    ;
  /* And pop the character into the register */
  ALT_LOG_PRINT_TXDATA_WR(base,c);
   135f4:	e0bfff17 	ldw	r2,-4(fp)
   135f8:	e0fffe17 	ldw	r3,-8(fp)
   135fc:	10c00035 	stwio	r3,0(r2)
}
   13600:	0001883a 	nop
   13604:	e037883a 	mov	sp,fp
   13608:	df000017 	ldw	fp,0(sp)
   1360c:	dec00104 	addi	sp,sp,4
   13610:	f800283a 	ret

00013614 <alt_log_repchar>:


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
   13614:	defffb04 	addi	sp,sp,-20
   13618:	dfc00415 	stw	ra,16(sp)
   1361c:	df000315 	stw	fp,12(sp)
   13620:	df000304 	addi	fp,sp,12
   13624:	2005883a 	mov	r2,r4
   13628:	e17ffe15 	stw	r5,-8(fp)
   1362c:	e1bfff15 	stw	r6,-4(fp)
   13630:	e0bffd05 	stb	r2,-12(fp)
  while(r-- > 0)
   13634:	00000506 	br	1364c <alt_log_repchar+0x38>
    alt_log_txchar(c,(char*) base);
   13638:	e0bffd07 	ldb	r2,-12(fp)
   1363c:	e0ffff17 	ldw	r3,-4(fp)
   13640:	180b883a 	mov	r5,r3
   13644:	1009883a 	mov	r4,r2
   13648:	00135c80 	call	135c8 <alt_log_txchar>


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
  while(r-- > 0)
   1364c:	e0bffe17 	ldw	r2,-8(fp)
   13650:	10ffffc4 	addi	r3,r2,-1
   13654:	e0fffe15 	stw	r3,-8(fp)
   13658:	00bff716 	blt	zero,r2,13638 <alt_log_repchar+0x24>
    alt_log_txchar(c,(char*) base);
}
   1365c:	0001883a 	nop
   13660:	e037883a 	mov	sp,fp
   13664:	dfc00117 	ldw	ra,4(sp)
   13668:	df000017 	ldw	fp,0(sp)
   1366c:	dec00204 	addi	sp,sp,8
   13670:	f800283a 	ret

00013674 <alt_log_private_printf>:


/* Stripped down printf function */
void alt_log_private_printf(const char *fmt,int base,va_list args)
  {
   13674:	deffe904 	addi	sp,sp,-92
   13678:	dfc01615 	stw	ra,88(sp)
   1367c:	df001515 	stw	fp,84(sp)
   13680:	dc001415 	stw	r16,80(sp)
   13684:	df001504 	addi	fp,sp,84
   13688:	e13ffc15 	stw	r4,-16(fp)
   1368c:	e17ffd15 	stw	r5,-12(fp)
   13690:	e1bffe15 	stw	r6,-8(fp)
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
   13694:	e03fed15 	stw	zero,-76(fp)
  int fmtLong = 0;
   13698:	e03fee15 	stw	zero,-72(fp)
  int fmtBeforeDecimal = 0;
   1369c:	e03fef15 	stw	zero,-68(fp)
  int fmtAfterDecimal = 0;
   136a0:	e03ff015 	stw	zero,-64(fp)
  int fmtBase = 0;
   136a4:	e03ff115 	stw	zero,-60(fp)
  int fmtSigned = 0;
   136a8:	e03ff215 	stw	zero,-56(fp)
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */
   136ac:	e03ff315 	stw	zero,-52(fp)

  w = fmt;
   136b0:	e0bffc17 	ldw	r2,-16(fp)
   136b4:	e0bfeb15 	stw	r2,-84(fp)
  state = pfState_chars;
   136b8:	e03fec15 	stw	zero,-80(fp)

  while(0 != (c = *w++))
   136bc:	00014f06 	br	13bfc <alt_log_private_printf+0x588>
    {
    switch(state)
   136c0:	e0bfec17 	ldw	r2,-80(fp)
   136c4:	10c00060 	cmpeqi	r3,r2,1
   136c8:	18001b1e 	bne	r3,zero,13738 <alt_log_private_printf+0xc4>
   136cc:	10c000a0 	cmpeqi	r3,r2,2
   136d0:	18002d1e 	bne	r3,zero,13788 <alt_log_private_printf+0x114>
   136d4:	10000126 	beq	r2,zero,136dc <alt_log_private_printf+0x68>
   136d8:	00014806 	br	13bfc <alt_log_private_printf+0x588>
      {
      case pfState_chars:
        if(c == '%')
   136dc:	e0bffb07 	ldb	r2,-20(fp)
   136e0:	10800958 	cmpnei	r2,r2,37
   136e4:	10000e1e 	bne	r2,zero,13720 <alt_log_private_printf+0xac>
        {
          fmtLeadingZero = 0;
   136e8:	e03fed15 	stw	zero,-76(fp)
          fmtLong = 0;
   136ec:	e03fee15 	stw	zero,-72(fp)
          fmtBase = 10;
   136f0:	00800284 	movi	r2,10
   136f4:	e0bff115 	stw	r2,-60(fp)
          fmtSigned = 1;
   136f8:	00800044 	movi	r2,1
   136fc:	e0bff215 	stw	r2,-56(fp)
          fmtCase = 0; /* Only %X sets this. */
   13700:	e03ff315 	stw	zero,-52(fp)
          fmtBeforeDecimal = -1;
   13704:	00bfffc4 	movi	r2,-1
   13708:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = -1;
   1370c:	00bfffc4 	movi	r2,-1
   13710:	e0bff015 	stw	r2,-64(fp)
          state = pfState_firstFmtChar;
   13714:	00800044 	movi	r2,1
   13718:	e0bfec15 	stw	r2,-80(fp)
   1371c:	00013706 	br	13bfc <alt_log_private_printf+0x588>
        }
        else
        {
          alt_log_txchar(c,(char*)base);
   13720:	e0bffb07 	ldb	r2,-20(fp)
   13724:	e0fffd17 	ldw	r3,-12(fp)
   13728:	180b883a 	mov	r5,r3
   1372c:	1009883a 	mov	r4,r2
   13730:	00135c80 	call	135c8 <alt_log_txchar>
        }
        break;
   13734:	00013106 	br	13bfc <alt_log_private_printf+0x588>

      case pfState_firstFmtChar:
        if(c == '0')
   13738:	e0bffb07 	ldb	r2,-20(fp)
   1373c:	10800c18 	cmpnei	r2,r2,48
   13740:	1000051e 	bne	r2,zero,13758 <alt_log_private_printf+0xe4>
        {
          fmtLeadingZero = 1;
   13744:	00800044 	movi	r2,1
   13748:	e0bfed15 	stw	r2,-76(fp)
          state = pfState_otherFmtChar;
   1374c:	00800084 	movi	r2,2
   13750:	e0bfec15 	stw	r2,-80(fp)
   13754:	00012906 	br	13bfc <alt_log_private_printf+0x588>
        }
        else if(c == '%')
   13758:	e0bffb07 	ldb	r2,-20(fp)
   1375c:	10800958 	cmpnei	r2,r2,37
   13760:	1000071e 	bne	r2,zero,13780 <alt_log_private_printf+0x10c>
        {
          alt_log_txchar(c,(char*)base);
   13764:	e0bffb07 	ldb	r2,-20(fp)
   13768:	e0fffd17 	ldw	r3,-12(fp)
   1376c:	180b883a 	mov	r5,r3
   13770:	1009883a 	mov	r4,r2
   13774:	00135c80 	call	135c8 <alt_log_txchar>
          state = pfState_chars;
   13778:	e03fec15 	stw	zero,-80(fp)
   1377c:	00011f06 	br	13bfc <alt_log_private_printf+0x588>
        }
        else
        {
          state = pfState_otherFmtChar;
   13780:	00800084 	movi	r2,2
   13784:	e0bfec15 	stw	r2,-80(fp)
        }
        break;

      case pfState_otherFmtChar:
otherFmtChar:
        if(c == '.')
   13788:	e0bffb07 	ldb	r2,-20(fp)
   1378c:	10800b98 	cmpnei	r2,r2,46
   13790:	1000021e 	bne	r2,zero,1379c <alt_log_private_printf+0x128>
        {
          fmtAfterDecimal = 0;
   13794:	e03ff015 	stw	zero,-64(fp)
   13798:	00011706 	br	13bf8 <alt_log_private_printf+0x584>
        }
        else if('0' <= c && c <= '9')
   1379c:	e0bffb07 	ldb	r2,-20(fp)
   137a0:	10800c10 	cmplti	r2,r2,48
   137a4:	10001d1e 	bne	r2,zero,1381c <alt_log_private_printf+0x1a8>
   137a8:	e0bffb07 	ldb	r2,-20(fp)
   137ac:	10800e88 	cmpgei	r2,r2,58
   137b0:	10001a1e 	bne	r2,zero,1381c <alt_log_private_printf+0x1a8>
        {
          c -= '0';
   137b4:	e0bffb03 	ldbu	r2,-20(fp)
   137b8:	10bff404 	addi	r2,r2,-48
   137bc:	e0bffb05 	stb	r2,-20(fp)
          if(fmtAfterDecimal < 0)     /* still before decimal */
   137c0:	e0bff017 	ldw	r2,-64(fp)
   137c4:	10000d0e 	bge	r2,zero,137fc <alt_log_private_printf+0x188>
          {
            if(fmtBeforeDecimal < 0)
   137c8:	e0bfef17 	ldw	r2,-68(fp)
   137cc:	1000020e 	bge	r2,zero,137d8 <alt_log_private_printf+0x164>
            {
              fmtBeforeDecimal = 0;
   137d0:	e03fef15 	stw	zero,-68(fp)
   137d4:	00000406 	br	137e8 <alt_log_private_printf+0x174>
            }
            else
            {
              fmtBeforeDecimal *= 10;
   137d8:	01400284 	movi	r5,10
   137dc:	e13fef17 	ldw	r4,-68(fp)
   137e0:	00131640 	call	13164 <__mulsi3>
   137e4:	e0bfef15 	stw	r2,-68(fp)
            }
            fmtBeforeDecimal += c;
   137e8:	e0bffb07 	ldb	r2,-20(fp)
   137ec:	e0ffef17 	ldw	r3,-68(fp)
   137f0:	1885883a 	add	r2,r3,r2
   137f4:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
   137f8:	0000ff06 	br	13bf8 <alt_log_private_printf+0x584>
            }
            fmtBeforeDecimal += c;
          }
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
   137fc:	01400284 	movi	r5,10
   13800:	e13ff017 	ldw	r4,-64(fp)
   13804:	00131640 	call	13164 <__mulsi3>
   13808:	1007883a 	mov	r3,r2
   1380c:	e0bffb07 	ldb	r2,-20(fp)
   13810:	1885883a 	add	r2,r3,r2
   13814:	e0bff015 	stw	r2,-64(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
   13818:	0000f706 	br	13bf8 <alt_log_private_printf+0x584>
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
          }
        }
        else if(c == 'l')
   1381c:	e0bffb07 	ldb	r2,-20(fp)
   13820:	10801b18 	cmpnei	r2,r2,108
   13824:	1000031e 	bne	r2,zero,13834 <alt_log_private_printf+0x1c0>
        {
          fmtLong = 1;
   13828:	00800044 	movi	r2,1
   1382c:	e0bfee15 	stw	r2,-72(fp)
   13830:	0000f106 	br	13bf8 <alt_log_private_printf+0x584>
        }
        else                  /* we're up to the letter which determines type */
        {
          switch(c)
   13834:	e0bffb07 	ldb	r2,-20(fp)
   13838:	10bfea04 	addi	r2,r2,-88
   1383c:	10c00868 	cmpgeui	r3,r2,33
   13840:	1800ec1e 	bne	r3,zero,13bf4 <alt_log_private_printf+0x580>
   13844:	100690ba 	slli	r3,r2,2
   13848:	00800074 	movhi	r2,1
   1384c:	108e1704 	addi	r2,r2,14428
   13850:	1885883a 	add	r2,r3,r2
   13854:	10800017 	ldw	r2,0(r2)
   13858:	1000683a 	jmp	r2
   1385c:	00013b20 	cmpeqi	zero,zero,1260
   13860:	00013bf4 	movhi	zero,1263
   13864:	00013bf4 	movhi	zero,1263
   13868:	00013bf4 	movhi	zero,1263
   1386c:	00013bf4 	movhi	zero,1263
   13870:	00013bf4 	movhi	zero,1263
   13874:	00013bf4 	movhi	zero,1263
   13878:	00013bf4 	movhi	zero,1263
   1387c:	00013bf4 	movhi	zero,1263
   13880:	00013bf4 	movhi	zero,1263
   13884:	00013bf4 	movhi	zero,1263
   13888:	00013b38 	rdprs	zero,zero,1260
   1388c:	000138e0 	cmpeqi	zero,zero,1251
   13890:	00013bf4 	movhi	zero,1263
   13894:	00013bf4 	movhi	zero,1263
   13898:	00013bf4 	movhi	zero,1263
   1389c:	00013bf4 	movhi	zero,1263
   138a0:	000138e0 	cmpeqi	zero,zero,1251
   138a4:	00013bf4 	movhi	zero,1263
   138a8:	00013bf4 	movhi	zero,1263
   138ac:	00013bf4 	movhi	zero,1263
   138b0:	00013bf4 	movhi	zero,1263
   138b4:	00013bf4 	movhi	zero,1263
   138b8:	00013b00 	call	13b0 <__alt_mem_onchip_memory2_0-0xec50>
   138bc:	00013bf4 	movhi	zero,1263
   138c0:	00013bf4 	movhi	zero,1263
   138c4:	00013bf4 	movhi	zero,1263
   138c8:	00013b74 	movhi	zero,1261
   138cc:	00013bf4 	movhi	zero,1263
   138d0:	00013af8 	rdprs	zero,zero,1259
   138d4:	00013bf4 	movhi	zero,1263
   138d8:	00013bf4 	movhi	zero,1263
   138dc:	00013b10 	cmplti	zero,zero,1260
                unsigned long vShrink;  /* used to count digits */
                int sign;
                int digitCount;

                /* Get the value */
                if(fmtLong)
   138e0:	e0bfee17 	ldw	r2,-72(fp)
   138e4:	10000e26 	beq	r2,zero,13920 <alt_log_private_printf+0x2ac>
                {
                  if (fmtSigned)
   138e8:	e0bff217 	ldw	r2,-56(fp)
   138ec:	10000626 	beq	r2,zero,13908 <alt_log_private_printf+0x294>
                  {
                    v = va_arg(args,long);
   138f0:	e0bffe17 	ldw	r2,-8(fp)
   138f4:	10c00104 	addi	r3,r2,4
   138f8:	e0fffe15 	stw	r3,-8(fp)
   138fc:	10800017 	ldw	r2,0(r2)
   13900:	e0bff415 	stw	r2,-48(fp)
   13904:	00001306 	br	13954 <alt_log_private_printf+0x2e0>
                  }
                  else
                  {
                    v = va_arg(args,unsigned long);
   13908:	e0bffe17 	ldw	r2,-8(fp)
   1390c:	10c00104 	addi	r3,r2,4
   13910:	e0fffe15 	stw	r3,-8(fp)
   13914:	10800017 	ldw	r2,0(r2)
   13918:	e0bff415 	stw	r2,-48(fp)
   1391c:	00000d06 	br	13954 <alt_log_private_printf+0x2e0>
                  }
                }
                else
                {
                  if (fmtSigned)
   13920:	e0bff217 	ldw	r2,-56(fp)
   13924:	10000626 	beq	r2,zero,13940 <alt_log_private_printf+0x2cc>
                  {
                    v = va_arg(args,int);
   13928:	e0bffe17 	ldw	r2,-8(fp)
   1392c:	10c00104 	addi	r3,r2,4
   13930:	e0fffe15 	stw	r3,-8(fp)
   13934:	10800017 	ldw	r2,0(r2)
   13938:	e0bff415 	stw	r2,-48(fp)
   1393c:	00000506 	br	13954 <alt_log_private_printf+0x2e0>
                  }
                  else
                  {
                    v = va_arg(args,unsigned int);
   13940:	e0bffe17 	ldw	r2,-8(fp)
   13944:	10c00104 	addi	r3,r2,4
   13948:	e0fffe15 	stw	r3,-8(fp)
   1394c:	10800017 	ldw	r2,0(r2)
   13950:	e0bff415 	stw	r2,-48(fp)
                  }
                }

                /* Strip sign */
                sign = 0;
   13954:	e03ff715 	stw	zero,-36(fp)
                  /* (assumes sign bit is #31) */
                if( fmtSigned && (v & (0x80000000)) )
   13958:	e0bff217 	ldw	r2,-56(fp)
   1395c:	10000726 	beq	r2,zero,1397c <alt_log_private_printf+0x308>
   13960:	e0bff417 	ldw	r2,-48(fp)
   13964:	1000050e 	bge	r2,zero,1397c <alt_log_private_printf+0x308>
                  {
                  v = ~v + 1;
   13968:	e0bff417 	ldw	r2,-48(fp)
   1396c:	0085c83a 	sub	r2,zero,r2
   13970:	e0bff415 	stw	r2,-48(fp)
                  sign = 1;
   13974:	00800044 	movi	r2,1
   13978:	e0bff715 	stw	r2,-36(fp)
                  }

                /* Count digits, and get largest place value */
                vShrink = v;
   1397c:	e0bff417 	ldw	r2,-48(fp)
   13980:	e0bff615 	stw	r2,-40(fp)
                p = 1;
   13984:	00800044 	movi	r2,1
   13988:	e0bff515 	stw	r2,-44(fp)
                digitCount = 1;
   1398c:	00800044 	movi	r2,1
   13990:	e0bff815 	stw	r2,-32(fp)
                while( (vShrink = vShrink / fmtBase) > 0 )
   13994:	00000806 	br	139b8 <alt_log_private_printf+0x344>
                  {
                  digitCount++;
   13998:	e0bff817 	ldw	r2,-32(fp)
   1399c:	10800044 	addi	r2,r2,1
   139a0:	e0bff815 	stw	r2,-32(fp)
                  p *= fmtBase;
   139a4:	e0bff117 	ldw	r2,-60(fp)
   139a8:	100b883a 	mov	r5,r2
   139ac:	e13ff517 	ldw	r4,-44(fp)
   139b0:	00131640 	call	13164 <__mulsi3>
   139b4:	e0bff515 	stw	r2,-44(fp)

                /* Count digits, and get largest place value */
                vShrink = v;
                p = 1;
                digitCount = 1;
                while( (vShrink = vShrink / fmtBase) > 0 )
   139b8:	e0bff117 	ldw	r2,-60(fp)
   139bc:	100b883a 	mov	r5,r2
   139c0:	e13ff617 	ldw	r4,-40(fp)
   139c4:	00130a80 	call	130a8 <__udivsi3>
   139c8:	e0bff615 	stw	r2,-40(fp)
   139cc:	e0bff617 	ldw	r2,-40(fp)
   139d0:	103ff11e 	bne	r2,zero,13998 <alt_log_private_printf+0x324>
                  digitCount++;
                  p *= fmtBase;
                  }

                /* Print leading characters & sign */
                fmtBeforeDecimal -= digitCount;
   139d4:	e0ffef17 	ldw	r3,-68(fp)
   139d8:	e0bff817 	ldw	r2,-32(fp)
   139dc:	1885c83a 	sub	r2,r3,r2
   139e0:	e0bfef15 	stw	r2,-68(fp)
                if(fmtLeadingZero)
   139e4:	e0bfed17 	ldw	r2,-76(fp)
   139e8:	10000e26 	beq	r2,zero,13a24 <alt_log_private_printf+0x3b0>
                  {
                  if(sign)
   139ec:	e0bff717 	ldw	r2,-36(fp)
   139f0:	10000726 	beq	r2,zero,13a10 <alt_log_private_printf+0x39c>
                    {
                    alt_log_txchar('-',(char*)base);
   139f4:	e0bffd17 	ldw	r2,-12(fp)
   139f8:	100b883a 	mov	r5,r2
   139fc:	01000b44 	movi	r4,45
   13a00:	00135c80 	call	135c8 <alt_log_txchar>
                    fmtBeforeDecimal--;
   13a04:	e0bfef17 	ldw	r2,-68(fp)
   13a08:	10bfffc4 	addi	r2,r2,-1
   13a0c:	e0bfef15 	stw	r2,-68(fp)
                    }
                  alt_log_repchar('0',fmtBeforeDecimal,base);
   13a10:	e1bffd17 	ldw	r6,-12(fp)
   13a14:	e17fef17 	ldw	r5,-68(fp)
   13a18:	01000c04 	movi	r4,48
   13a1c:	00136140 	call	13614 <alt_log_repchar>
   13a20:	00003106 	br	13ae8 <alt_log_private_printf+0x474>
                  }
                else
                  {
                    if(sign)
   13a24:	e0bff717 	ldw	r2,-36(fp)
   13a28:	10000326 	beq	r2,zero,13a38 <alt_log_private_printf+0x3c4>
                    {
                      fmtBeforeDecimal--;
   13a2c:	e0bfef17 	ldw	r2,-68(fp)
   13a30:	10bfffc4 	addi	r2,r2,-1
   13a34:	e0bfef15 	stw	r2,-68(fp)
                    }
                    alt_log_repchar(' ',fmtBeforeDecimal,base);
   13a38:	e1bffd17 	ldw	r6,-12(fp)
   13a3c:	e17fef17 	ldw	r5,-68(fp)
   13a40:	01000804 	movi	r4,32
   13a44:	00136140 	call	13614 <alt_log_repchar>
                    if(sign)
   13a48:	e0bff717 	ldw	r2,-36(fp)
   13a4c:	10002626 	beq	r2,zero,13ae8 <alt_log_private_printf+0x474>
                    {
                      alt_log_txchar('-',(char*)base);
   13a50:	e0bffd17 	ldw	r2,-12(fp)
   13a54:	100b883a 	mov	r5,r2
   13a58:	01000b44 	movi	r4,45
   13a5c:	00135c80 	call	135c8 <alt_log_txchar>
                    }
                  }

                /* Print numbery parts */
                while(p)
   13a60:	00002106 	br	13ae8 <alt_log_private_printf+0x474>
                  {
                  unsigned char d;

                  d = v / p;
   13a64:	e17ff517 	ldw	r5,-44(fp)
   13a68:	e13ff417 	ldw	r4,-48(fp)
   13a6c:	00130a80 	call	130a8 <__udivsi3>
   13a70:	e0bff905 	stb	r2,-28(fp)
                  d += '0';
   13a74:	e0bff903 	ldbu	r2,-28(fp)
   13a78:	10800c04 	addi	r2,r2,48
   13a7c:	e0bff905 	stb	r2,-28(fp)
                  if(d > '9')
   13a80:	e0bff903 	ldbu	r2,-28(fp)
   13a84:	10800eb0 	cmpltui	r2,r2,58
   13a88:	1000081e 	bne	r2,zero,13aac <alt_log_private_printf+0x438>
                  {
                    d += (fmtCase ? 'A' : 'a') - '0' - 10;
   13a8c:	e0bff317 	ldw	r2,-52(fp)
   13a90:	10000226 	beq	r2,zero,13a9c <alt_log_private_printf+0x428>
   13a94:	008001c4 	movi	r2,7
   13a98:	00000106 	br	13aa0 <alt_log_private_printf+0x42c>
   13a9c:	008009c4 	movi	r2,39
   13aa0:	e0fff903 	ldbu	r3,-28(fp)
   13aa4:	10c5883a 	add	r2,r2,r3
   13aa8:	e0bff905 	stb	r2,-28(fp)
                  }
                  alt_log_txchar(d,(char*)base);
   13aac:	e0bff903 	ldbu	r2,-28(fp)
   13ab0:	e0fffd17 	ldw	r3,-12(fp)
   13ab4:	180b883a 	mov	r5,r3
   13ab8:	1009883a 	mov	r4,r2
   13abc:	00135c80 	call	135c8 <alt_log_txchar>

                  v = v % p;
   13ac0:	e0bff417 	ldw	r2,-48(fp)
   13ac4:	e17ff517 	ldw	r5,-44(fp)
   13ac8:	1009883a 	mov	r4,r2
   13acc:	001310c0 	call	1310c <__umodsi3>
   13ad0:	e0bff415 	stw	r2,-48(fp)
                  p = p / fmtBase;
   13ad4:	e0bff117 	ldw	r2,-60(fp)
   13ad8:	100b883a 	mov	r5,r2
   13adc:	e13ff517 	ldw	r4,-44(fp)
   13ae0:	00130a80 	call	130a8 <__udivsi3>
   13ae4:	e0bff515 	stw	r2,-44(fp)
                      alt_log_txchar('-',(char*)base);
                    }
                  }

                /* Print numbery parts */
                while(p)
   13ae8:	e0bff517 	ldw	r2,-44(fp)
   13aec:	103fdd1e 	bne	r2,zero,13a64 <alt_log_private_printf+0x3f0>
                  v = v % p;
                  p = p / fmtBase;
                  }
                }

              state = pfState_chars;
   13af0:	e03fec15 	stw	zero,-80(fp)
              break;
   13af4:	00003f06 	br	13bf4 <alt_log_private_printf+0x580>

            case 'u':
              fmtSigned = 0;
   13af8:	e03ff215 	stw	zero,-56(fp)
              goto doIntegerPrint;
   13afc:	003f7806 	br	138e0 <alt_log_private_printf+0x26c>
            case 'o':
              fmtSigned = 0;
   13b00:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 8;
   13b04:	00800204 	movi	r2,8
   13b08:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
   13b0c:	003f7406 	br	138e0 <alt_log_private_printf+0x26c>
            case 'x':
              fmtSigned = 0;
   13b10:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
   13b14:	00800404 	movi	r2,16
   13b18:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
   13b1c:	003f7006 	br	138e0 <alt_log_private_printf+0x26c>
            case 'X':
              fmtSigned = 0;
   13b20:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
   13b24:	00800404 	movi	r2,16
   13b28:	e0bff115 	stw	r2,-60(fp)
              fmtCase = 1;
   13b2c:	00800044 	movi	r2,1
   13b30:	e0bff315 	stw	r2,-52(fp)
              goto doIntegerPrint;
   13b34:	003f6a06 	br	138e0 <alt_log_private_printf+0x26c>

            case 'c':
              alt_log_repchar(' ',fmtBeforeDecimal-1,base);
   13b38:	e0bfef17 	ldw	r2,-68(fp)
   13b3c:	10bfffc4 	addi	r2,r2,-1
   13b40:	e1bffd17 	ldw	r6,-12(fp)
   13b44:	100b883a 	mov	r5,r2
   13b48:	01000804 	movi	r4,32
   13b4c:	00136140 	call	13614 <alt_log_repchar>
              alt_log_txchar(va_arg(args,int),(char*)base);
   13b50:	e0bffe17 	ldw	r2,-8(fp)
   13b54:	10c00104 	addi	r3,r2,4
   13b58:	e0fffe15 	stw	r3,-8(fp)
   13b5c:	10800017 	ldw	r2,0(r2)
   13b60:	e0fffd17 	ldw	r3,-12(fp)
   13b64:	180b883a 	mov	r5,r3
   13b68:	1009883a 	mov	r4,r2
   13b6c:	00135c80 	call	135c8 <alt_log_txchar>
              break;
   13b70:	00002006 	br	13bf4 <alt_log_private_printf+0x580>

            case 's':
                {
                char *s;

                s = va_arg(args,char *);
   13b74:	e0bffe17 	ldw	r2,-8(fp)
   13b78:	10c00104 	addi	r3,r2,4
   13b7c:	e0fffe15 	stw	r3,-8(fp)
   13b80:	10800017 	ldw	r2,0(r2)
   13b84:	e0bffa15 	stw	r2,-24(fp)
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);
   13b88:	e43fef17 	ldw	r16,-68(fp)
   13b8c:	e13ffa17 	ldw	r4,-24(fp)
   13b90:	00104540 	call	10454 <strlen>
   13b94:	8085c83a 	sub	r2,r16,r2
   13b98:	e1bffd17 	ldw	r6,-12(fp)
   13b9c:	100b883a 	mov	r5,r2
   13ba0:	01000804 	movi	r4,32
   13ba4:	00136140 	call	13614 <alt_log_repchar>

                while(*s)
   13ba8:	00000b06 	br	13bd8 <alt_log_private_printf+0x564>
                  alt_log_txchar(*s++,(char*)base);
   13bac:	e0bffa17 	ldw	r2,-24(fp)
   13bb0:	10c00044 	addi	r3,r2,1
   13bb4:	e0fffa15 	stw	r3,-24(fp)
   13bb8:	10800003 	ldbu	r2,0(r2)
   13bbc:	10803fcc 	andi	r2,r2,255
   13bc0:	1080201c 	xori	r2,r2,128
   13bc4:	10bfe004 	addi	r2,r2,-128
   13bc8:	e0fffd17 	ldw	r3,-12(fp)
   13bcc:	180b883a 	mov	r5,r3
   13bd0:	1009883a 	mov	r4,r2
   13bd4:	00135c80 	call	135c8 <alt_log_txchar>
                char *s;

                s = va_arg(args,char *);
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);

                while(*s)
   13bd8:	e0bffa17 	ldw	r2,-24(fp)
   13bdc:	10800003 	ldbu	r2,0(r2)
   13be0:	10803fcc 	andi	r2,r2,255
   13be4:	1080201c 	xori	r2,r2,128
   13be8:	10bfe004 	addi	r2,r2,-128
   13bec:	103fef1e 	bne	r2,zero,13bac <alt_log_private_printf+0x538>
                  alt_log_txchar(*s++,(char*)base);
                }
              break;
   13bf0:	0001883a 	nop
            } /* switch last letter of fmt */
          state=pfState_chars;
   13bf4:	e03fec15 	stw	zero,-80(fp)
          }
        break;
   13bf8:	0001883a 	nop
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */

  w = fmt;
  state = pfState_chars;

  while(0 != (c = *w++))
   13bfc:	e0bfeb17 	ldw	r2,-84(fp)
   13c00:	10c00044 	addi	r3,r2,1
   13c04:	e0ffeb15 	stw	r3,-84(fp)
   13c08:	10800003 	ldbu	r2,0(r2)
   13c0c:	e0bffb05 	stb	r2,-20(fp)
   13c10:	e0bffb07 	ldb	r2,-20(fp)
   13c14:	103eaa1e 	bne	r2,zero,136c0 <alt_log_private_printf+0x4c>
          state=pfState_chars;
          }
        break;
      } /* switch */
    } /* while chars left */
  } /* printf */
   13c18:	0001883a 	nop
   13c1c:	e6ffff04 	addi	sp,fp,-4
   13c20:	dfc00217 	ldw	ra,8(sp)
   13c24:	df000117 	ldw	fp,4(sp)
   13c28:	dc000017 	ldw	r16,0(sp)
   13c2c:	dec00304 	addi	sp,sp,12
   13c30:	f800283a 	ret

00013c34 <alt_log_printf_proc>:

/* Main logging printf function */
int alt_log_printf_proc(const char *fmt, ... )
{
   13c34:	defff904 	addi	sp,sp,-28
   13c38:	dfc00315 	stw	ra,12(sp)
   13c3c:	df000215 	stw	fp,8(sp)
   13c40:	df000204 	addi	fp,sp,8
   13c44:	e13fff15 	stw	r4,-4(fp)
   13c48:	e1400215 	stw	r5,8(fp)
   13c4c:	e1800315 	stw	r6,12(fp)
   13c50:	e1c00415 	stw	r7,16(fp)
    va_list args;

    va_start (args, fmt);
   13c54:	e0800204 	addi	r2,fp,8
   13c58:	e0bffe15 	stw	r2,-8(fp)
    alt_log_private_printf(fmt,ALT_LOG_PORT_BASE,args);
   13c5c:	e0bffe17 	ldw	r2,-8(fp)
   13c60:	100d883a 	mov	r6,r2
   13c64:	014000b4 	movhi	r5,2
   13c68:	29440404 	addi	r5,r5,4112
   13c6c:	e13fff17 	ldw	r4,-4(fp)
   13c70:	00136740 	call	13674 <alt_log_private_printf>
    return (0);
   13c74:	0005883a 	mov	r2,zero
}
   13c78:	e037883a 	mov	sp,fp
   13c7c:	dfc00117 	ldw	ra,4(sp)
   13c80:	df000017 	ldw	fp,0(sp)
   13c84:	dec00504 	addi	sp,sp,20
   13c88:	f800283a 	ret

00013c8c <altera_avalon_jtag_uart_report_log>:
 * This function, when turned on, prints out the status
 * of the JTAG UART Control register, every ALT_LOG_JTAG_UART_TICKS.
 * If the flag is off, the alarm should never be registered, and this
 * function should never run */
alt_u32 altera_avalon_jtag_uart_report_log(void * context)
{
   13c8c:	defffb04 	addi	sp,sp,-20
   13c90:	dfc00415 	stw	ra,16(sp)
   13c94:	df000315 	stw	fp,12(sp)
   13c98:	df000304 	addi	fp,sp,12
   13c9c:	e13fff15 	stw	r4,-4(fp)
    if (alt_log_jtag_uart_alarm_on_flag) {
   13ca0:	d0a01383 	ldbu	r2,-32690(gp)
   13ca4:	10803fcc 	andi	r2,r2,255
   13ca8:	10001026 	beq	r2,zero,13cec <altera_avalon_jtag_uart_report_log+0x60>
    altera_avalon_jtag_uart_state* dev = (altera_avalon_jtag_uart_state*) context;
   13cac:	e0bfff17 	ldw	r2,-4(fp)
   13cb0:	e0bffd15 	stw	r2,-12(fp)
        const char* header="JTAG Alarm:";
   13cb4:	008000b4 	movhi	r2,2
   13cb8:	10a00904 	addi	r2,r2,-32732
   13cbc:	e0bffe15 	stw	r2,-8(fp)
        alt_log_jtag_uart_print_control_reg(dev, dev->base, header);
   13cc0:	e0bffd17 	ldw	r2,-12(fp)
   13cc4:	10800017 	ldw	r2,0(r2)
   13cc8:	e1bffe17 	ldw	r6,-8(fp)
   13ccc:	100b883a 	mov	r5,r2
   13cd0:	e13ffd17 	ldw	r4,-12(fp)
   13cd4:	0013d040 	call	13d04 <alt_log_jtag_uart_print_control_reg>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13cd8:	d0a01a17 	ldw	r2,-32664(gp)
        return ALT_LOG_JTAG_UART_TICKS;
   13cdc:	01400284 	movi	r5,10
   13ce0:	1009883a 	mov	r4,r2
   13ce4:	00130a80 	call	130a8 <__udivsi3>
   13ce8:	00000106 	br	13cf0 <altera_avalon_jtag_uart_report_log+0x64>
    }
    else 
    {  
        /* If flag is not on, return 0 to disable future alarms.
        * Should never be here, alarm should not be enabled at all. */
        return 0;
   13cec:	0005883a 	mov	r2,zero
    }
}
   13cf0:	e037883a 	mov	sp,fp
   13cf4:	dfc00117 	ldw	ra,4(sp)
   13cf8:	df000017 	ldw	fp,0(sp)
   13cfc:	dec00204 	addi	sp,sp,8
   13d00:	f800283a 	ret

00013d04 <alt_log_jtag_uart_print_control_reg>:

void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)
{
   13d04:	deffef04 	addi	sp,sp,-68
   13d08:	dfc01015 	stw	ra,64(sp)
   13d0c:	df000f15 	stw	fp,60(sp)
   13d10:	df000f04 	addi	fp,sp,60
   13d14:	e13ffd15 	stw	r4,-12(fp)
   13d18:	e17ffe15 	stw	r5,-8(fp)
   13d1c:	e1bfff15 	stw	r6,-4(fp)
     unsigned int control, space, ac, wi, ri, we, re;
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13d20:	e0bffe17 	ldw	r2,-8(fp)
   13d24:	10800104 	addi	r2,r2,4
   13d28:	10800037 	ldwio	r2,0(r2)
   13d2c:	e0bff615 	stw	r2,-40(fp)
     space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >>
   13d30:	e0bff617 	ldw	r2,-40(fp)
   13d34:	1004d43a 	srli	r2,r2,16
   13d38:	e0bff715 	stw	r2,-36(fp)
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
   13d3c:	e0bff617 	ldw	r2,-40(fp)
   13d40:	1080008c 	andi	r2,r2,2
   13d44:	1004d07a 	srli	r2,r2,1
   13d48:	e0bff815 	stw	r2,-32(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
   13d4c:	e0bff617 	ldw	r2,-40(fp)
   13d50:	1080004c 	andi	r2,r2,1
   13d54:	e0bff915 	stw	r2,-28(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
   13d58:	e0bff617 	ldw	r2,-40(fp)
   13d5c:	1080400c 	andi	r2,r2,256
   13d60:	1004d23a 	srli	r2,r2,8
   13d64:	e0bffa15 	stw	r2,-24(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RI_OFST;
     wi= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK) >>
   13d68:	e0bff617 	ldw	r2,-40(fp)
   13d6c:	1080800c 	andi	r2,r2,512
   13d70:	1004d27a 	srli	r2,r2,9
   13d74:	e0bffb15 	stw	r2,-20(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WI_OFST;
     ac= (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK) >>
   13d78:	e0bff617 	ldw	r2,-40(fp)
   13d7c:	1081000c 	andi	r2,r2,1024
   13d80:	1004d2ba 	srli	r2,r2,10
   13d84:	e0bffc15 	stw	r2,-16(fp)
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
   13d88:	e0bffd17 	ldw	r2,-12(fp)
   13d8c:	10c00d17 	ldw	r3,52(r2)
   13d90:	e0bffd17 	ldw	r2,-12(fp)
   13d94:	10800c17 	ldw	r2,48(r2)
   13d98:	1887c83a 	sub	r3,r3,r2
   13d9c:	e0bff917 	ldw	r2,-28(fp)
   13da0:	d8800415 	stw	r2,16(sp)
   13da4:	e0bff817 	ldw	r2,-32(fp)
   13da8:	d8800315 	stw	r2,12(sp)
   13dac:	e0bffa17 	ldw	r2,-24(fp)
   13db0:	d8800215 	stw	r2,8(sp)
   13db4:	e0bffb17 	ldw	r2,-20(fp)
   13db8:	d8800115 	stw	r2,4(sp)
   13dbc:	e0bffc17 	ldw	r2,-16(fp)
   13dc0:	d8800015 	stw	r2,0(sp)
   13dc4:	e1fff717 	ldw	r7,-36(fp)
   13dc8:	180d883a 	mov	r6,r3
   13dcc:	e17fff17 	ldw	r5,-4(fp)
   13dd0:	010000b4 	movhi	r4,2
   13dd4:	21200c04 	addi	r4,r4,-32720
   13dd8:	0013c340 	call	13c34 <alt_log_printf_proc>
     "%s SW CirBuf = %d, HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,(dev->tx_out-dev->tx_in),space,ac,wi,ri,we,re);
#endif   
         
     return;
   13ddc:	0001883a 	nop

}
   13de0:	e037883a 	mov	sp,fp
   13de4:	dfc00117 	ldw	ra,4(sp)
   13de8:	df000017 	ldw	fp,0(sp)
   13dec:	dec00204 	addi	sp,sp,8
   13df0:	f800283a 	ret

00013df4 <alt_log_jtag_uart_startup_info>:
/* In altera_avalon_jtag_uart.c
 * Same output as the alarm function above, but this is called in the driver
 * init function.  Hence, it gives the status of the JTAG UART control register
 * right at the initialization of the driver */ 
void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)
{
   13df4:	defffb04 	addi	sp,sp,-20
   13df8:	dfc00415 	stw	ra,16(sp)
   13dfc:	df000315 	stw	fp,12(sp)
   13e00:	df000304 	addi	fp,sp,12
   13e04:	e13ffe15 	stw	r4,-8(fp)
   13e08:	e17fff15 	stw	r5,-4(fp)
     const char* header="JTAG Startup Info:";
   13e0c:	008000b4 	movhi	r2,2
   13e10:	10a01e04 	addi	r2,r2,-32648
   13e14:	e0bffd15 	stw	r2,-12(fp)
     alt_log_jtag_uart_print_control_reg(dev, base, header);
   13e18:	e1bffd17 	ldw	r6,-12(fp)
   13e1c:	e17fff17 	ldw	r5,-4(fp)
   13e20:	e13ffe17 	ldw	r4,-8(fp)
   13e24:	0013d040 	call	13d04 <alt_log_jtag_uart_print_control_reg>
     return;
   13e28:	0001883a 	nop
}
   13e2c:	e037883a 	mov	sp,fp
   13e30:	dfc00117 	ldw	ra,4(sp)
   13e34:	df000017 	ldw	fp,0(sp)
   13e38:	dec00204 	addi	sp,sp,8
   13e3c:	f800283a 	ret

00013e40 <alt_log_jtag_uart_isr_proc>:

/* In altera_avalon_jtag_uart.c
 * When turned on, this function will print out the status of the jtag uart
 * control register every time there is a jtag uart "almost-empty" interrupt. */
void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) 
{
   13e40:	defffb04 	addi	sp,sp,-20
   13e44:	dfc00415 	stw	ra,16(sp)
   13e48:	df000315 	stw	fp,12(sp)
   13e4c:	df000304 	addi	fp,sp,12
   13e50:	e13ffe15 	stw	r4,-8(fp)
   13e54:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_jtag_uart_isr_on_flag) {
   13e58:	d0a013c3 	ldbu	r2,-32689(gp)
   13e5c:	10803fcc 	andi	r2,r2,255
   13e60:	10000826 	beq	r2,zero,13e84 <alt_log_jtag_uart_isr_proc+0x44>
        const char* header="JTAG IRQ:";
   13e64:	008000b4 	movhi	r2,2
   13e68:	10a02304 	addi	r2,r2,-32628
   13e6c:	e0bffd15 	stw	r2,-12(fp)
        alt_log_jtag_uart_print_control_reg(dev, base, header);
   13e70:	e1bffd17 	ldw	r6,-12(fp)
   13e74:	e17ffe17 	ldw	r5,-8(fp)
   13e78:	e13fff17 	ldw	r4,-4(fp)
   13e7c:	0013d040 	call	13d04 <alt_log_jtag_uart_print_control_reg>
    }
    return;
   13e80:	0001883a 	nop
   13e84:	0001883a 	nop
}
   13e88:	e037883a 	mov	sp,fp
   13e8c:	dfc00117 	ldw	ra,4(sp)
   13e90:	df000017 	ldw	fp,0(sp)
   13e94:	dec00204 	addi	sp,sp,8
   13e98:	f800283a 	ret

00013e9c <alt_log_write>:
 * When the alt_log_write_on_flag is turned on, this function gets called
 * every time alt_write gets called.  The first 
 * ALT_LOG_WRITE_ECHO_LEN characters of every printf command (or any command
 * that eventually calls write()) gets echoed to the alt_log output. */
void alt_log_write(const void *ptr, size_t len)
{
   13e9c:	defffa04 	addi	sp,sp,-24
   13ea0:	dfc00515 	stw	ra,20(sp)
   13ea4:	df000415 	stw	fp,16(sp)
   13ea8:	df000404 	addi	fp,sp,16
   13eac:	e13ffe15 	stw	r4,-8(fp)
   13eb0:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_write_on_flag) {
   13eb4:	d0a01303 	ldbu	r2,-32692(gp)
   13eb8:	10803fcc 	andi	r2,r2,255
   13ebc:	10004026 	beq	r2,zero,13fc0 <alt_log_write+0x124>
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;
   13ec0:	e0bfff17 	ldw	r2,-4(fp)
   13ec4:	10c00430 	cmpltui	r3,r2,16
   13ec8:	1800011e 	bne	r3,zero,13ed0 <alt_log_write+0x34>
   13ecc:	008003c4 	movi	r2,15
   13ed0:	e0bffd15 	stw	r2,-12(fp)

        if (length < 2) return;
   13ed4:	e0bffd17 	ldw	r2,-12(fp)
   13ed8:	10800088 	cmpgei	r2,r2,2
   13edc:	10003726 	beq	r2,zero,13fbc <alt_log_write+0x120>

        strncpy (alt_log_write_buf,ptr,length);
   13ee0:	e0bffd17 	ldw	r2,-12(fp)
   13ee4:	100d883a 	mov	r6,r2
   13ee8:	e17ffe17 	ldw	r5,-8(fp)
   13eec:	010000b4 	movhi	r4,2
   13ef0:	2127a904 	addi	r4,r4,-24924
   13ef4:	001615c0 	call	1615c <strncpy>
    alt_log_write_buf[length-1]='\n';
   13ef8:	e0bffd17 	ldw	r2,-12(fp)
   13efc:	10ffffc4 	addi	r3,r2,-1
   13f00:	008000b4 	movhi	r2,2
   13f04:	10a7a904 	addi	r2,r2,-24924
   13f08:	10c5883a 	add	r2,r2,r3
   13f0c:	00c00284 	movi	r3,10
   13f10:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
   13f14:	008000b4 	movhi	r2,2
   13f18:	10a7a904 	addi	r2,r2,-24924
   13f1c:	e0fffd17 	ldw	r3,-12(fp)
   13f20:	10c5883a 	add	r2,r2,r3
   13f24:	00c00344 	movi	r3,13
   13f28:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length+1]='\0';
   13f2c:	e0bffd17 	ldw	r2,-12(fp)
   13f30:	10c00044 	addi	r3,r2,1
   13f34:	008000b4 	movhi	r2,2
   13f38:	10a7a904 	addi	r2,r2,-24924
   13f3c:	10c5883a 	add	r2,r2,r3
   13f40:	10000005 	stb	zero,0(r2)

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
   13f44:	e03ffc15 	stw	zero,-16(fp)
   13f48:	00001306 	br	13f98 <alt_log_write+0xfc>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
   13f4c:	008000b4 	movhi	r2,2
   13f50:	10a7a904 	addi	r2,r2,-24924
   13f54:	e0fffc17 	ldw	r3,-16(fp)
   13f58:	10c5883a 	add	r2,r2,r3
   13f5c:	10800003 	ldbu	r2,0(r2)
   13f60:	10803fcc 	andi	r2,r2,255
   13f64:	1080201c 	xori	r2,r2,128
   13f68:	10bfe004 	addi	r2,r2,-128
   13f6c:	10800118 	cmpnei	r2,r2,4
   13f70:	1000061e 	bne	r2,zero,13f8c <alt_log_write+0xf0>
            alt_log_write_buf[temp_cnt]='D';
   13f74:	008000b4 	movhi	r2,2
   13f78:	10a7a904 	addi	r2,r2,-24924
   13f7c:	e0fffc17 	ldw	r3,-16(fp)
   13f80:	10c5883a 	add	r2,r2,r3
   13f84:	00c01104 	movi	r3,68
   13f88:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
    alt_log_write_buf[length+1]='\0';

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
   13f8c:	e0bffc17 	ldw	r2,-16(fp)
   13f90:	10800044 	addi	r2,r2,1
   13f94:	e0bffc15 	stw	r2,-16(fp)
   13f98:	e0fffc17 	ldw	r3,-16(fp)
   13f9c:	e0bffd17 	ldw	r2,-12(fp)
   13fa0:	18bfea16 	blt	r3,r2,13f4c <alt_log_write+0xb0>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
   13fa4:	014000b4 	movhi	r5,2
   13fa8:	2967a904 	addi	r5,r5,-24924
   13fac:	010000b4 	movhi	r4,2
   13fb0:	21202604 	addi	r4,r4,-32616
   13fb4:	0013c340 	call	13c34 <alt_log_printf_proc>
   13fb8:	00000106 	br	13fc0 <alt_log_write+0x124>
{
    if (alt_log_write_on_flag) {
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;

        if (length < 2) return;
   13fbc:	0001883a 	nop
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
    }
}
   13fc0:	e037883a 	mov	sp,fp
   13fc4:	dfc00117 	ldw	ra,4(sp)
   13fc8:	df000017 	ldw	fp,0(sp)
   13fcc:	dec00204 	addi	sp,sp,8
   13fd0:	f800283a 	ret

00013fd4 <alt_log_system_clock>:

/* In altera_avalon_timer_sc
 * This function prints out a system clock is alive message
 * every ALT_LOG_SYS_CLK_INTERVAL (in ticks).  */
void alt_log_system_clock()
{
   13fd4:	defffe04 	addi	sp,sp,-8
   13fd8:	dfc00115 	stw	ra,4(sp)
   13fdc:	df000015 	stw	fp,0(sp)
   13fe0:	d839883a 	mov	fp,sp
    if (alt_log_sys_clk_on_flag) {
   13fe4:	d0a01343 	ldbu	r2,-32691(gp)
   13fe8:	10803fcc 	andi	r2,r2,255
   13fec:	10000e26 	beq	r2,zero,14028 <alt_log_system_clock+0x54>
    alt_log_sys_clk_count++;
   13ff0:	d0a01617 	ldw	r2,-32680(gp)
   13ff4:	10800044 	addi	r2,r2,1
   13ff8:	d0a01615 	stw	r2,-32680(gp)
   13ffc:	d0a01a17 	ldw	r2,-32664(gp)
        if (alt_log_sys_clk_count > ALT_LOG_SYS_CLK_INTERVAL) {
   14000:	d0e01617 	ldw	r3,-32680(gp)
   14004:	10c0082e 	bgeu	r2,r3,14028 <alt_log_system_clock+0x54>
            alt_log_sys_clk_count = 0;
   14008:	d0201615 	stw	zero,-32680(gp)
            ALT_LOG_PRINTF("System Clock On %u\r\n",alt_system_clock_in_sec++);
   1400c:	d0a01517 	ldw	r2,-32684(gp)
   14010:	10c00044 	addi	r3,r2,1
   14014:	d0e01515 	stw	r3,-32684(gp)
   14018:	100b883a 	mov	r5,r2
   1401c:	010000b4 	movhi	r4,2
   14020:	21202a04 	addi	r4,r4,-32600
   14024:	0013c340 	call	13c34 <alt_log_printf_proc>
        }
    }
}
   14028:	0001883a 	nop
   1402c:	e037883a 	mov	sp,fp
   14030:	dfc00117 	ldw	ra,4(sp)
   14034:	df000017 	ldw	fp,0(sp)
   14038:	dec00204 	addi	sp,sp,8
   1403c:	f800283a 	ret

00014040 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14040:	defffe04 	addi	sp,sp,-8
   14044:	dfc00115 	stw	ra,4(sp)
   14048:	df000015 	stw	fp,0(sp)
   1404c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14050:	d0a00917 	ldw	r2,-32732(gp)
   14054:	10000326 	beq	r2,zero,14064 <alt_get_errno+0x24>
   14058:	d0a00917 	ldw	r2,-32732(gp)
   1405c:	103ee83a 	callr	r2
   14060:	00000106 	br	14068 <alt_get_errno+0x28>
   14064:	d0a01204 	addi	r2,gp,-32696
}
   14068:	e037883a 	mov	sp,fp
   1406c:	dfc00117 	ldw	ra,4(sp)
   14070:	df000017 	ldw	fp,0(sp)
   14074:	dec00204 	addi	sp,sp,8
   14078:	f800283a 	ret

0001407c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1407c:	defff904 	addi	sp,sp,-28
   14080:	dfc00615 	stw	ra,24(sp)
   14084:	df000515 	stw	fp,20(sp)
   14088:	df000504 	addi	fp,sp,20
   1408c:	e13ffd15 	stw	r4,-12(fp)
   14090:	e17ffe15 	stw	r5,-8(fp)
   14094:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   14098:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1409c:	e0bffd17 	ldw	r2,-12(fp)
   140a0:	10000816 	blt	r2,zero,140c4 <lseek+0x48>
   140a4:	01400304 	movi	r5,12
   140a8:	e13ffd17 	ldw	r4,-12(fp)
   140ac:	00131640 	call	13164 <__mulsi3>
   140b0:	1007883a 	mov	r3,r2
   140b4:	008000b4 	movhi	r2,2
   140b8:	10a2e204 	addi	r2,r2,-29816
   140bc:	1885883a 	add	r2,r3,r2
   140c0:	00000106 	br	140c8 <lseek+0x4c>
   140c4:	0005883a 	mov	r2,zero
   140c8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   140cc:	e0bffc17 	ldw	r2,-16(fp)
   140d0:	10001026 	beq	r2,zero,14114 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   140d4:	e0bffc17 	ldw	r2,-16(fp)
   140d8:	10800017 	ldw	r2,0(r2)
   140dc:	10800717 	ldw	r2,28(r2)
   140e0:	10000926 	beq	r2,zero,14108 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   140e4:	e0bffc17 	ldw	r2,-16(fp)
   140e8:	10800017 	ldw	r2,0(r2)
   140ec:	10800717 	ldw	r2,28(r2)
   140f0:	e1bfff17 	ldw	r6,-4(fp)
   140f4:	e17ffe17 	ldw	r5,-8(fp)
   140f8:	e13ffc17 	ldw	r4,-16(fp)
   140fc:	103ee83a 	callr	r2
   14100:	e0bffb15 	stw	r2,-20(fp)
   14104:	00000506 	br	1411c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   14108:	00bfde84 	movi	r2,-134
   1410c:	e0bffb15 	stw	r2,-20(fp)
   14110:	00000206 	br	1411c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   14114:	00bfebc4 	movi	r2,-81
   14118:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1411c:	e0bffb17 	ldw	r2,-20(fp)
   14120:	1000070e 	bge	r2,zero,14140 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   14124:	00140400 	call	14040 <alt_get_errno>
   14128:	1007883a 	mov	r3,r2
   1412c:	e0bffb17 	ldw	r2,-20(fp)
   14130:	0085c83a 	sub	r2,zero,r2
   14134:	18800015 	stw	r2,0(r3)
    rc = -1;
   14138:	00bfffc4 	movi	r2,-1
   1413c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   14140:	e0bffb17 	ldw	r2,-20(fp)
}
   14144:	e037883a 	mov	sp,fp
   14148:	dfc00117 	ldw	ra,4(sp)
   1414c:	df000017 	ldw	fp,0(sp)
   14150:	dec00204 	addi	sp,sp,8
   14154:	f800283a 	ret

00014158 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14158:	defffd04 	addi	sp,sp,-12
   1415c:	dfc00215 	stw	ra,8(sp)
   14160:	df000115 	stw	fp,4(sp)
   14164:	df000104 	addi	fp,sp,4
#ifndef ALT_NO_EXIT    
  int result;
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
   14168:	d0a00a17 	ldw	r2,-32728(gp)
   1416c:	10800058 	cmpnei	r2,r2,1
   14170:	1000031e 	bne	r2,zero,14180 <alt_main+0x28>
   14174:	010000b4 	movhi	r4,2
   14178:	21203004 	addi	r4,r4,-32576
   1417c:	0013c340 	call	13c34 <alt_log_printf_proc>
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14180:	0009883a 	mov	r4,zero
   14184:	00148880 	call	14888 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
   14188:	d0a00a17 	ldw	r2,-32728(gp)
   1418c:	10800058 	cmpnei	r2,r2,1
   14190:	1000031e 	bne	r2,zero,141a0 <alt_main+0x48>
   14194:	010000b4 	movhi	r4,2
   14198:	21203e04 	addi	r4,r4,-32520
   1419c:	0013c340 	call	13c34 <alt_log_printf_proc>
  ALT_OS_INIT();
   141a0:	0001883a 	nop
  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
   141a4:	d0a00a17 	ldw	r2,-32728(gp)
   141a8:	10800058 	cmpnei	r2,r2,1
   141ac:	1000031e 	bne	r2,zero,141bc <alt_main+0x64>
   141b0:	010000b4 	movhi	r4,2
   141b4:	21204c04 	addi	r4,r4,-32464
   141b8:	0013c340 	call	13c34 <alt_log_printf_proc>
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
   141bc:	d0a00a17 	ldw	r2,-32728(gp)
   141c0:	10800058 	cmpnei	r2,r2,1
   141c4:	1000031e 	bne	r2,zero,141d4 <alt_main+0x7c>
   141c8:	010000b4 	movhi	r4,2
   141cc:	21205a04 	addi	r4,r4,-32408
   141d0:	0013c340 	call	13c34 <alt_log_printf_proc>
  alt_sys_init();
   141d4:	00148c00 	call	148c0 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");
   141d8:	d0a00a17 	ldw	r2,-32728(gp)
   141dc:	10800058 	cmpnei	r2,r2,1
   141e0:	1000031e 	bne	r2,zero,141f0 <alt_main+0x98>
   141e4:	010000b4 	movhi	r4,2
   141e8:	21206404 	addi	r4,r4,-32368
   141ec:	0013c340 	call	13c34 <alt_log_printf_proc>
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
   141f0:	d0a00a17 	ldw	r2,-32728(gp)
   141f4:	10800058 	cmpnei	r2,r2,1
   141f8:	1000031e 	bne	r2,zero,14208 <alt_main+0xb0>
   141fc:	010000b4 	movhi	r4,2
   14200:	21206d04 	addi	r4,r4,-32332
   14204:	0013c340 	call	13c34 <alt_log_printf_proc>
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14208:	018000b4 	movhi	r6,2
   1420c:	31a07504 	addi	r6,r6,-32300
   14210:	014000b4 	movhi	r5,2
   14214:	29607504 	addi	r5,r5,-32300
   14218:	010000b4 	movhi	r4,2
   1421c:	21207504 	addi	r4,r4,-32300
   14220:	0015a780 	call	15a78 <alt_io_redirect>
#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
   14224:	d0a00a17 	ldw	r2,-32728(gp)
   14228:	10800058 	cmpnei	r2,r2,1
   1422c:	1000031e 	bne	r2,zero,1423c <alt_main+0xe4>
   14230:	010000b4 	movhi	r4,2
   14234:	21207a04 	addi	r4,r4,-32280
   14238:	0013c340 	call	13c34 <alt_log_printf_proc>
  _do_ctors ();
   1423c:	00156140 	call	15614 <_do_ctors>
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
   14240:	d0a00a17 	ldw	r2,-32728(gp)
   14244:	10800058 	cmpnei	r2,r2,1
   14248:	1000031e 	bne	r2,zero,14258 <alt_main+0x100>
   1424c:	010000b4 	movhi	r4,2
   14250:	21208504 	addi	r4,r4,-32236
   14254:	0013c340 	call	13c34 <alt_log_printf_proc>
  atexit (_do_dtors);
   14258:	01000074 	movhi	r4,1
   1425c:	21159d04 	addi	r4,r4,22132
   14260:	00160940 	call	16094 <atexit>
  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");
   14264:	d0a00a17 	ldw	r2,-32728(gp)
   14268:	10800058 	cmpnei	r2,r2,1
   1426c:	1000031e 	bne	r2,zero,1427c <alt_main+0x124>
   14270:	010000b4 	movhi	r4,2
   14274:	21208d04 	addi	r4,r4,-32204
   14278:	0013c340 	call	13c34 <alt_log_printf_proc>

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1427c:	d0a01717 	ldw	r2,-32676(gp)
   14280:	d0e01817 	ldw	r3,-32672(gp)
   14284:	d1201917 	ldw	r4,-32668(gp)
   14288:	200d883a 	mov	r6,r4
   1428c:	180b883a 	mov	r5,r3
   14290:	1009883a 	mov	r4,r2
   14294:	00103200 	call	10320 <main>
   14298:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1429c:	01000044 	movi	r4,1
   142a0:	00131c80 	call	131c8 <close>
  exit (result);
   142a4:	e13fff17 	ldw	r4,-4(fp)
   142a8:	00160a80 	call	160a8 <exit>

000142ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   142ac:	defffe04 	addi	sp,sp,-8
   142b0:	df000115 	stw	fp,4(sp)
   142b4:	df000104 	addi	fp,sp,4
   142b8:	e13fff15 	stw	r4,-4(fp)
}
   142bc:	0001883a 	nop
   142c0:	e037883a 	mov	sp,fp
   142c4:	df000017 	ldw	fp,0(sp)
   142c8:	dec00104 	addi	sp,sp,4
   142cc:	f800283a 	ret

000142d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   142d0:	defffe04 	addi	sp,sp,-8
   142d4:	df000115 	stw	fp,4(sp)
   142d8:	df000104 	addi	fp,sp,4
   142dc:	e13fff15 	stw	r4,-4(fp)
}
   142e0:	0001883a 	nop
   142e4:	e037883a 	mov	sp,fp
   142e8:	df000017 	ldw	fp,0(sp)
   142ec:	dec00104 	addi	sp,sp,4
   142f0:	f800283a 	ret

000142f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   142f4:	defffe04 	addi	sp,sp,-8
   142f8:	dfc00115 	stw	ra,4(sp)
   142fc:	df000015 	stw	fp,0(sp)
   14300:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14304:	d0a00917 	ldw	r2,-32732(gp)
   14308:	10000326 	beq	r2,zero,14318 <alt_get_errno+0x24>
   1430c:	d0a00917 	ldw	r2,-32732(gp)
   14310:	103ee83a 	callr	r2
   14314:	00000106 	br	1431c <alt_get_errno+0x28>
   14318:	d0a01204 	addi	r2,gp,-32696
}
   1431c:	e037883a 	mov	sp,fp
   14320:	dfc00117 	ldw	ra,4(sp)
   14324:	df000017 	ldw	fp,0(sp)
   14328:	dec00204 	addi	sp,sp,8
   1432c:	f800283a 	ret

00014330 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   14330:	defff904 	addi	sp,sp,-28
   14334:	dfc00615 	stw	ra,24(sp)
   14338:	df000515 	stw	fp,20(sp)
   1433c:	df000504 	addi	fp,sp,20
   14340:	e13ffd15 	stw	r4,-12(fp)
   14344:	e17ffe15 	stw	r5,-8(fp)
   14348:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1434c:	e0bffd17 	ldw	r2,-12(fp)
   14350:	10000816 	blt	r2,zero,14374 <read+0x44>
   14354:	01400304 	movi	r5,12
   14358:	e13ffd17 	ldw	r4,-12(fp)
   1435c:	00131640 	call	13164 <__mulsi3>
   14360:	1007883a 	mov	r3,r2
   14364:	008000b4 	movhi	r2,2
   14368:	10a2e204 	addi	r2,r2,-29816
   1436c:	1885883a 	add	r2,r3,r2
   14370:	00000106 	br	14378 <read+0x48>
   14374:	0005883a 	mov	r2,zero
   14378:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1437c:	e0bffb17 	ldw	r2,-20(fp)
   14380:	10002226 	beq	r2,zero,1440c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14384:	e0bffb17 	ldw	r2,-20(fp)
   14388:	10800217 	ldw	r2,8(r2)
   1438c:	108000cc 	andi	r2,r2,3
   14390:	10800060 	cmpeqi	r2,r2,1
   14394:	1000181e 	bne	r2,zero,143f8 <read+0xc8>
        (fd->dev->read))
   14398:	e0bffb17 	ldw	r2,-20(fp)
   1439c:	10800017 	ldw	r2,0(r2)
   143a0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   143a4:	10001426 	beq	r2,zero,143f8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   143a8:	e0bffb17 	ldw	r2,-20(fp)
   143ac:	10800017 	ldw	r2,0(r2)
   143b0:	10800517 	ldw	r2,20(r2)
   143b4:	e0ffff17 	ldw	r3,-4(fp)
   143b8:	180d883a 	mov	r6,r3
   143bc:	e17ffe17 	ldw	r5,-8(fp)
   143c0:	e13ffb17 	ldw	r4,-20(fp)
   143c4:	103ee83a 	callr	r2
   143c8:	e0bffc15 	stw	r2,-16(fp)
   143cc:	e0bffc17 	ldw	r2,-16(fp)
   143d0:	1000070e 	bge	r2,zero,143f0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   143d4:	00142f40 	call	142f4 <alt_get_errno>
   143d8:	1007883a 	mov	r3,r2
   143dc:	e0bffc17 	ldw	r2,-16(fp)
   143e0:	0085c83a 	sub	r2,zero,r2
   143e4:	18800015 	stw	r2,0(r3)
          return -1;
   143e8:	00bfffc4 	movi	r2,-1
   143ec:	00000c06 	br	14420 <read+0xf0>
        }
        return rval;
   143f0:	e0bffc17 	ldw	r2,-16(fp)
   143f4:	00000a06 	br	14420 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   143f8:	00142f40 	call	142f4 <alt_get_errno>
   143fc:	1007883a 	mov	r3,r2
   14400:	00800344 	movi	r2,13
   14404:	18800015 	stw	r2,0(r3)
   14408:	00000406 	br	1441c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1440c:	00142f40 	call	142f4 <alt_get_errno>
   14410:	1007883a 	mov	r3,r2
   14414:	00801444 	movi	r2,81
   14418:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1441c:	00bfffc4 	movi	r2,-1
}
   14420:	e037883a 	mov	sp,fp
   14424:	dfc00117 	ldw	ra,4(sp)
   14428:	df000017 	ldw	fp,0(sp)
   1442c:	dec00204 	addi	sp,sp,8
   14430:	f800283a 	ret

00014434 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   14434:	defffc04 	addi	sp,sp,-16
   14438:	dfc00315 	stw	ra,12(sp)
   1443c:	df000215 	stw	fp,8(sp)
   14440:	dc000115 	stw	r16,4(sp)
   14444:	df000204 	addi	fp,sp,8
   14448:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1444c:	e0bffe17 	ldw	r2,-8(fp)
   14450:	108000d0 	cmplti	r2,r2,3
   14454:	1000111e 	bne	r2,zero,1449c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   14458:	040000b4 	movhi	r16,2
   1445c:	8422e204 	addi	r16,r16,-29816
   14460:	e0bffe17 	ldw	r2,-8(fp)
   14464:	01400304 	movi	r5,12
   14468:	1009883a 	mov	r4,r2
   1446c:	00131640 	call	13164 <__mulsi3>
   14470:	8085883a 	add	r2,r16,r2
   14474:	10800204 	addi	r2,r2,8
   14478:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1447c:	040000b4 	movhi	r16,2
   14480:	8422e204 	addi	r16,r16,-29816
   14484:	e0bffe17 	ldw	r2,-8(fp)
   14488:	01400304 	movi	r5,12
   1448c:	1009883a 	mov	r4,r2
   14490:	00131640 	call	13164 <__mulsi3>
   14494:	8085883a 	add	r2,r16,r2
   14498:	10000015 	stw	zero,0(r2)
  }
}
   1449c:	0001883a 	nop
   144a0:	e6ffff04 	addi	sp,fp,-4
   144a4:	dfc00217 	ldw	ra,8(sp)
   144a8:	df000117 	ldw	fp,4(sp)
   144ac:	dc000017 	ldw	r16,0(sp)
   144b0:	dec00304 	addi	sp,sp,12
   144b4:	f800283a 	ret

000144b8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   144b8:	defff904 	addi	sp,sp,-28
   144bc:	df000615 	stw	fp,24(sp)
   144c0:	df000604 	addi	fp,sp,24
   144c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   144c8:	0005303a 	rdctl	r2,status
   144cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144d0:	e0fffe17 	ldw	r3,-8(fp)
   144d4:	00bfff84 	movi	r2,-2
   144d8:	1884703a 	and	r2,r3,r2
   144dc:	1001703a 	wrctl	status,r2
  
  return context;
   144e0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   144e4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   144e8:	d0a00b17 	ldw	r2,-32724(gp)
   144ec:	10c000c4 	addi	r3,r2,3
   144f0:	00bfff04 	movi	r2,-4
   144f4:	1884703a 	and	r2,r3,r2
   144f8:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   144fc:	d0e00b17 	ldw	r3,-32724(gp)
   14500:	e0bfff17 	ldw	r2,-4(fp)
   14504:	1887883a 	add	r3,r3,r2
   14508:	008000b4 	movhi	r2,2
   1450c:	10800004 	addi	r2,r2,0
   14510:	10c0062e 	bgeu	r2,r3,1452c <sbrk+0x74>
   14514:	e0bffb17 	ldw	r2,-20(fp)
   14518:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1451c:	e0bffa17 	ldw	r2,-24(fp)
   14520:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14524:	00bfffc4 	movi	r2,-1
   14528:	00000b06 	br	14558 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1452c:	d0a00b17 	ldw	r2,-32724(gp)
   14530:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   14534:	d0e00b17 	ldw	r3,-32724(gp)
   14538:	e0bfff17 	ldw	r2,-4(fp)
   1453c:	1885883a 	add	r2,r3,r2
   14540:	d0a00b15 	stw	r2,-32724(gp)
   14544:	e0bffb17 	ldw	r2,-20(fp)
   14548:	e0bffc15 	stw	r2,-16(fp)
   1454c:	e0bffc17 	ldw	r2,-16(fp)
   14550:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   14554:	e0bffd17 	ldw	r2,-12(fp)
} 
   14558:	e037883a 	mov	sp,fp
   1455c:	df000017 	ldw	fp,0(sp)
   14560:	dec00104 	addi	sp,sp,4
   14564:	f800283a 	ret

00014568 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14568:	defffa04 	addi	sp,sp,-24
   1456c:	df000515 	stw	fp,20(sp)
   14570:	df000504 	addi	fp,sp,20
   14574:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14578:	0005303a 	rdctl	r2,status
   1457c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14580:	e0fffc17 	ldw	r3,-16(fp)
   14584:	00bfff84 	movi	r2,-2
   14588:	1884703a 	and	r2,r3,r2
   1458c:	1001703a 	wrctl	status,r2
  
  return context;
   14590:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14594:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   14598:	e0bfff17 	ldw	r2,-4(fp)
   1459c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   145a0:	e0bffd17 	ldw	r2,-12(fp)
   145a4:	10800017 	ldw	r2,0(r2)
   145a8:	e0fffd17 	ldw	r3,-12(fp)
   145ac:	18c00117 	ldw	r3,4(r3)
   145b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   145b4:	e0bffd17 	ldw	r2,-12(fp)
   145b8:	10800117 	ldw	r2,4(r2)
   145bc:	e0fffd17 	ldw	r3,-12(fp)
   145c0:	18c00017 	ldw	r3,0(r3)
   145c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   145c8:	e0bffd17 	ldw	r2,-12(fp)
   145cc:	e0fffd17 	ldw	r3,-12(fp)
   145d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   145d4:	e0bffd17 	ldw	r2,-12(fp)
   145d8:	e0fffd17 	ldw	r3,-12(fp)
   145dc:	10c00015 	stw	r3,0(r2)
   145e0:	e0bffb17 	ldw	r2,-20(fp)
   145e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145e8:	e0bffe17 	ldw	r2,-8(fp)
   145ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   145f0:	0001883a 	nop
   145f4:	e037883a 	mov	sp,fp
   145f8:	df000017 	ldw	fp,0(sp)
   145fc:	dec00104 	addi	sp,sp,4
   14600:	f800283a 	ret

00014604 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14604:	defffb04 	addi	sp,sp,-20
   14608:	dfc00415 	stw	ra,16(sp)
   1460c:	df000315 	stw	fp,12(sp)
   14610:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14614:	d0a00c17 	ldw	r2,-32720(gp)
   14618:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1461c:	d0a01b17 	ldw	r2,-32660(gp)
   14620:	10800044 	addi	r2,r2,1
   14624:	d0a01b15 	stw	r2,-32660(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14628:	00002e06 	br	146e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1462c:	e0bffd17 	ldw	r2,-12(fp)
   14630:	10800017 	ldw	r2,0(r2)
   14634:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14638:	e0bffd17 	ldw	r2,-12(fp)
   1463c:	10800403 	ldbu	r2,16(r2)
   14640:	10803fcc 	andi	r2,r2,255
   14644:	10000426 	beq	r2,zero,14658 <alt_tick+0x54>
   14648:	d0a01b17 	ldw	r2,-32660(gp)
   1464c:	1000021e 	bne	r2,zero,14658 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   14650:	e0bffd17 	ldw	r2,-12(fp)
   14654:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14658:	e0bffd17 	ldw	r2,-12(fp)
   1465c:	10800217 	ldw	r2,8(r2)
   14660:	d0e01b17 	ldw	r3,-32660(gp)
   14664:	18801d36 	bltu	r3,r2,146dc <alt_tick+0xd8>
   14668:	e0bffd17 	ldw	r2,-12(fp)
   1466c:	10800403 	ldbu	r2,16(r2)
   14670:	10803fcc 	andi	r2,r2,255
   14674:	1000191e 	bne	r2,zero,146dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   14678:	e0bffd17 	ldw	r2,-12(fp)
   1467c:	10800317 	ldw	r2,12(r2)
   14680:	e0fffd17 	ldw	r3,-12(fp)
   14684:	18c00517 	ldw	r3,20(r3)
   14688:	1809883a 	mov	r4,r3
   1468c:	103ee83a 	callr	r2
   14690:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14694:	e0bfff17 	ldw	r2,-4(fp)
   14698:	1000031e 	bne	r2,zero,146a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1469c:	e13ffd17 	ldw	r4,-12(fp)
   146a0:	00145680 	call	14568 <alt_alarm_stop>
   146a4:	00000d06 	br	146dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   146a8:	e0bffd17 	ldw	r2,-12(fp)
   146ac:	10c00217 	ldw	r3,8(r2)
   146b0:	e0bfff17 	ldw	r2,-4(fp)
   146b4:	1887883a 	add	r3,r3,r2
   146b8:	e0bffd17 	ldw	r2,-12(fp)
   146bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   146c0:	e0bffd17 	ldw	r2,-12(fp)
   146c4:	10c00217 	ldw	r3,8(r2)
   146c8:	d0a01b17 	ldw	r2,-32660(gp)
   146cc:	1880032e 	bgeu	r3,r2,146dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   146d0:	e0bffd17 	ldw	r2,-12(fp)
   146d4:	00c00044 	movi	r3,1
   146d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   146dc:	e0bffe17 	ldw	r2,-8(fp)
   146e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   146e4:	e0fffd17 	ldw	r3,-12(fp)
   146e8:	d0a00c04 	addi	r2,gp,-32720
   146ec:	18bfcf1e 	bne	r3,r2,1462c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   146f0:	0001883a 	nop
}
   146f4:	0001883a 	nop
   146f8:	e037883a 	mov	sp,fp
   146fc:	dfc00117 	ldw	ra,4(sp)
   14700:	df000017 	ldw	fp,0(sp)
   14704:	dec00204 	addi	sp,sp,8
   14708:	f800283a 	ret

0001470c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1470c:	defffe04 	addi	sp,sp,-8
   14710:	dfc00115 	stw	ra,4(sp)
   14714:	df000015 	stw	fp,0(sp)
   14718:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1471c:	d0a00917 	ldw	r2,-32732(gp)
   14720:	10000326 	beq	r2,zero,14730 <alt_get_errno+0x24>
   14724:	d0a00917 	ldw	r2,-32732(gp)
   14728:	103ee83a 	callr	r2
   1472c:	00000106 	br	14734 <alt_get_errno+0x28>
   14730:	d0a01204 	addi	r2,gp,-32696
}
   14734:	e037883a 	mov	sp,fp
   14738:	dfc00117 	ldw	ra,4(sp)
   1473c:	df000017 	ldw	fp,0(sp)
   14740:	dec00204 	addi	sp,sp,8
   14744:	f800283a 	ret

00014748 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14748:	defff904 	addi	sp,sp,-28
   1474c:	dfc00615 	stw	ra,24(sp)
   14750:	df000515 	stw	fp,20(sp)
   14754:	df000504 	addi	fp,sp,20
   14758:	e13ffd15 	stw	r4,-12(fp)
   1475c:	e17ffe15 	stw	r5,-8(fp)
   14760:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14764:	e0bffd17 	ldw	r2,-12(fp)
   14768:	10000816 	blt	r2,zero,1478c <write+0x44>
   1476c:	01400304 	movi	r5,12
   14770:	e13ffd17 	ldw	r4,-12(fp)
   14774:	00131640 	call	13164 <__mulsi3>
   14778:	1007883a 	mov	r3,r2
   1477c:	008000b4 	movhi	r2,2
   14780:	10a2e204 	addi	r2,r2,-29816
   14784:	1885883a 	add	r2,r3,r2
   14788:	00000106 	br	14790 <write+0x48>
   1478c:	0005883a 	mov	r2,zero
   14790:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14794:	e0bffb17 	ldw	r2,-20(fp)
   14798:	10002426 	beq	r2,zero,1482c <write+0xe4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1479c:	e0bffb17 	ldw	r2,-20(fp)
   147a0:	10800217 	ldw	r2,8(r2)
   147a4:	108000cc 	andi	r2,r2,3
   147a8:	10001b26 	beq	r2,zero,14818 <write+0xd0>
   147ac:	e0bffb17 	ldw	r2,-20(fp)
   147b0:	10800017 	ldw	r2,0(r2)
   147b4:	10800617 	ldw	r2,24(r2)
   147b8:	10001726 	beq	r2,zero,14818 <write+0xd0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);
   147bc:	e17fff17 	ldw	r5,-4(fp)
   147c0:	e13ffe17 	ldw	r4,-8(fp)
   147c4:	0013e9c0 	call	13e9c <alt_log_write>

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   147c8:	e0bffb17 	ldw	r2,-20(fp)
   147cc:	10800017 	ldw	r2,0(r2)
   147d0:	10800617 	ldw	r2,24(r2)
   147d4:	e0ffff17 	ldw	r3,-4(fp)
   147d8:	180d883a 	mov	r6,r3
   147dc:	e17ffe17 	ldw	r5,-8(fp)
   147e0:	e13ffb17 	ldw	r4,-20(fp)
   147e4:	103ee83a 	callr	r2
   147e8:	e0bffc15 	stw	r2,-16(fp)
   147ec:	e0bffc17 	ldw	r2,-16(fp)
   147f0:	1000070e 	bge	r2,zero,14810 <write+0xc8>
      {
        ALT_ERRNO = -rval;
   147f4:	001470c0 	call	1470c <alt_get_errno>
   147f8:	1007883a 	mov	r3,r2
   147fc:	e0bffc17 	ldw	r2,-16(fp)
   14800:	0085c83a 	sub	r2,zero,r2
   14804:	18800015 	stw	r2,0(r3)
        return -1;
   14808:	00bfffc4 	movi	r2,-1
   1480c:	00000c06 	br	14840 <write+0xf8>
      }
      return rval;
   14810:	e0bffc17 	ldw	r2,-16(fp)
   14814:	00000a06 	br	14840 <write+0xf8>
    }
    else
    {
      ALT_ERRNO = EACCES;
   14818:	001470c0 	call	1470c <alt_get_errno>
   1481c:	1007883a 	mov	r3,r2
   14820:	00800344 	movi	r2,13
   14824:	18800015 	stw	r2,0(r3)
   14828:	00000406 	br	1483c <write+0xf4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1482c:	001470c0 	call	1470c <alt_get_errno>
   14830:	1007883a 	mov	r3,r2
   14834:	00801444 	movi	r2,81
   14838:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1483c:	00bfffc4 	movi	r2,-1
}
   14840:	e037883a 	mov	sp,fp
   14844:	dfc00117 	ldw	ra,4(sp)
   14848:	df000017 	ldw	fp,0(sp)
   1484c:	dec00204 	addi	sp,sp,8
   14850:	f800283a 	ret

00014854 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14854:	defffd04 	addi	sp,sp,-12
   14858:	dfc00215 	stw	ra,8(sp)
   1485c:	df000115 	stw	fp,4(sp)
   14860:	df000104 	addi	fp,sp,4
   14864:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14868:	d1600604 	addi	r5,gp,-32744
   1486c:	e13fff17 	ldw	r4,-4(fp)
   14870:	00155700 	call	15570 <alt_dev_llist_insert>
}
   14874:	e037883a 	mov	sp,fp
   14878:	dfc00117 	ldw	ra,4(sp)
   1487c:	df000017 	ldw	fp,0(sp)
   14880:	dec00204 	addi	sp,sp,8
   14884:	f800283a 	ret

00014888 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14888:	defffd04 	addi	sp,sp,-12
   1488c:	dfc00215 	stw	ra,8(sp)
   14890:	df000115 	stw	fp,4(sp)
   14894:	df000104 	addi	fp,sp,4
   14898:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   1489c:	0015d780 	call	15d78 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   148a0:	00800044 	movi	r2,1
   148a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   148a8:	0001883a 	nop
   148ac:	e037883a 	mov	sp,fp
   148b0:	dfc00117 	ldw	ra,4(sp)
   148b4:	df000017 	ldw	fp,0(sp)
   148b8:	dec00204 	addi	sp,sp,8
   148bc:	f800283a 	ret

000148c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   148c0:	defffe04 	addi	sp,sp,-8
   148c4:	dfc00115 	stw	ra,4(sp)
   148c8:	df000015 	stw	fp,0(sp)
   148cc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   148d0:	018003c4 	movi	r6,15
   148d4:	000b883a 	mov	r5,zero
   148d8:	010000b4 	movhi	r4,2
   148dc:	21237304 	addi	r4,r4,-29236
   148e0:	0014a6c0 	call	14a6c <altera_avalon_jtag_uart_init>
   148e4:	010000b4 	movhi	r4,2
   148e8:	21236904 	addi	r4,r4,-29276
   148ec:	00148540 	call	14854 <alt_dev_reg>
}
   148f0:	0001883a 	nop
   148f4:	e037883a 	mov	sp,fp
   148f8:	dfc00117 	ldw	ra,4(sp)
   148fc:	df000017 	ldw	fp,0(sp)
   14900:	dec00204 	addi	sp,sp,8
   14904:	f800283a 	ret

00014908 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14908:	defffa04 	addi	sp,sp,-24
   1490c:	dfc00515 	stw	ra,20(sp)
   14910:	df000415 	stw	fp,16(sp)
   14914:	df000404 	addi	fp,sp,16
   14918:	e13ffd15 	stw	r4,-12(fp)
   1491c:	e17ffe15 	stw	r5,-8(fp)
   14920:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14924:	e0bffd17 	ldw	r2,-12(fp)
   14928:	10800017 	ldw	r2,0(r2)
   1492c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14930:	e0bffc17 	ldw	r2,-16(fp)
   14934:	10c00a04 	addi	r3,r2,40
   14938:	e0bffd17 	ldw	r2,-12(fp)
   1493c:	10800217 	ldw	r2,8(r2)
   14940:	100f883a 	mov	r7,r2
   14944:	e1bfff17 	ldw	r6,-4(fp)
   14948:	e17ffe17 	ldw	r5,-8(fp)
   1494c:	1809883a 	mov	r4,r3
   14950:	0014fa80 	call	14fa8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14954:	e037883a 	mov	sp,fp
   14958:	dfc00117 	ldw	ra,4(sp)
   1495c:	df000017 	ldw	fp,0(sp)
   14960:	dec00204 	addi	sp,sp,8
   14964:	f800283a 	ret

00014968 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14968:	defffa04 	addi	sp,sp,-24
   1496c:	dfc00515 	stw	ra,20(sp)
   14970:	df000415 	stw	fp,16(sp)
   14974:	df000404 	addi	fp,sp,16
   14978:	e13ffd15 	stw	r4,-12(fp)
   1497c:	e17ffe15 	stw	r5,-8(fp)
   14980:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14984:	e0bffd17 	ldw	r2,-12(fp)
   14988:	10800017 	ldw	r2,0(r2)
   1498c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14990:	e0bffc17 	ldw	r2,-16(fp)
   14994:	10c00a04 	addi	r3,r2,40
   14998:	e0bffd17 	ldw	r2,-12(fp)
   1499c:	10800217 	ldw	r2,8(r2)
   149a0:	100f883a 	mov	r7,r2
   149a4:	e1bfff17 	ldw	r6,-4(fp)
   149a8:	e17ffe17 	ldw	r5,-8(fp)
   149ac:	1809883a 	mov	r4,r3
   149b0:	00151c40 	call	151c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   149b4:	e037883a 	mov	sp,fp
   149b8:	dfc00117 	ldw	ra,4(sp)
   149bc:	df000017 	ldw	fp,0(sp)
   149c0:	dec00204 	addi	sp,sp,8
   149c4:	f800283a 	ret

000149c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   149c8:	defffc04 	addi	sp,sp,-16
   149cc:	dfc00315 	stw	ra,12(sp)
   149d0:	df000215 	stw	fp,8(sp)
   149d4:	df000204 	addi	fp,sp,8
   149d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   149dc:	e0bfff17 	ldw	r2,-4(fp)
   149e0:	10800017 	ldw	r2,0(r2)
   149e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   149e8:	e0bffe17 	ldw	r2,-8(fp)
   149ec:	10c00a04 	addi	r3,r2,40
   149f0:	e0bfff17 	ldw	r2,-4(fp)
   149f4:	10800217 	ldw	r2,8(r2)
   149f8:	100b883a 	mov	r5,r2
   149fc:	1809883a 	mov	r4,r3
   14a00:	0014e500 	call	14e50 <altera_avalon_jtag_uart_close>
}
   14a04:	e037883a 	mov	sp,fp
   14a08:	dfc00117 	ldw	ra,4(sp)
   14a0c:	df000017 	ldw	fp,0(sp)
   14a10:	dec00204 	addi	sp,sp,8
   14a14:	f800283a 	ret

00014a18 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   14a18:	defffa04 	addi	sp,sp,-24
   14a1c:	dfc00515 	stw	ra,20(sp)
   14a20:	df000415 	stw	fp,16(sp)
   14a24:	df000404 	addi	fp,sp,16
   14a28:	e13ffd15 	stw	r4,-12(fp)
   14a2c:	e17ffe15 	stw	r5,-8(fp)
   14a30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14a34:	e0bffd17 	ldw	r2,-12(fp)
   14a38:	10800017 	ldw	r2,0(r2)
   14a3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   14a40:	e0bffc17 	ldw	r2,-16(fp)
   14a44:	10800a04 	addi	r2,r2,40
   14a48:	e1bfff17 	ldw	r6,-4(fp)
   14a4c:	e17ffe17 	ldw	r5,-8(fp)
   14a50:	1009883a 	mov	r4,r2
   14a54:	0014eb80 	call	14eb8 <altera_avalon_jtag_uart_ioctl>
}
   14a58:	e037883a 	mov	sp,fp
   14a5c:	dfc00117 	ldw	ra,4(sp)
   14a60:	df000017 	ldw	fp,0(sp)
   14a64:	dec00204 	addi	sp,sp,8
   14a68:	f800283a 	ret

00014a6c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14a6c:	defffa04 	addi	sp,sp,-24
   14a70:	dfc00515 	stw	ra,20(sp)
   14a74:	df000415 	stw	fp,16(sp)
   14a78:	df000404 	addi	fp,sp,16
   14a7c:	e13ffd15 	stw	r4,-12(fp)
   14a80:	e17ffe15 	stw	r5,-8(fp)
   14a84:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14a88:	e0bffd17 	ldw	r2,-12(fp)
   14a8c:	00c00044 	movi	r3,1
   14a90:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   14a94:	e0bffd17 	ldw	r2,-12(fp)
   14a98:	10800017 	ldw	r2,0(r2)
   14a9c:	10800104 	addi	r2,r2,4
   14aa0:	1007883a 	mov	r3,r2
   14aa4:	e0bffd17 	ldw	r2,-12(fp)
   14aa8:	10800817 	ldw	r2,32(r2)
   14aac:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   14ab0:	e0bffe17 	ldw	r2,-8(fp)
   14ab4:	e0ffff17 	ldw	r3,-4(fp)
   14ab8:	d8000015 	stw	zero,0(sp)
   14abc:	e1fffd17 	ldw	r7,-12(fp)
   14ac0:	01800074 	movhi	r6,1
   14ac4:	3192e304 	addi	r6,r6,19340
   14ac8:	180b883a 	mov	r5,r3
   14acc:	1009883a 	mov	r4,r2
   14ad0:	00156f40 	call	156f4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14ad4:	e0bffd17 	ldw	r2,-12(fp)
   14ad8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14adc:	e0bffd17 	ldw	r2,-12(fp)
   14ae0:	10800204 	addi	r2,r2,8
   14ae4:	d0e01a17 	ldw	r3,-32664(gp)
   14ae8:	e1fffd17 	ldw	r7,-12(fp)
   14aec:	01800074 	movhi	r6,1
   14af0:	31936c04 	addi	r6,r6,19888
   14af4:	180b883a 	mov	r5,r3
   14af8:	1009883a 	mov	r4,r2
   14afc:	00153e80 	call	153e8 <alt_alarm_start>
   14b00:	1000040e 	bge	r2,zero,14b14 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14b04:	e0fffd17 	ldw	r3,-12(fp)
   14b08:	00a00034 	movhi	r2,32768
   14b0c:	10bfffc4 	addi	r2,r2,-1
   14b10:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
   14b14:	d0a01383 	ldbu	r2,-32690(gp)
   14b18:	10803fcc 	andi	r2,r2,255
   14b1c:	10800058 	cmpnei	r2,r2,1
   14b20:	10000b1e 	bne	r2,zero,14b50 <altera_avalon_jtag_uart_init+0xe4>
   14b24:	d0a01a17 	ldw	r2,-32664(gp)
   14b28:	01400284 	movi	r5,10
   14b2c:	1009883a 	mov	r4,r2
   14b30:	00130a80 	call	130a8 <__udivsi3>
   14b34:	e1fffd17 	ldw	r7,-12(fp)
   14b38:	01800074 	movhi	r6,1
   14b3c:	318f2304 	addi	r6,r6,15500
   14b40:	100b883a 	mov	r5,r2
   14b44:	010000b4 	movhi	r4,2
   14b48:	2127ae04 	addi	r4,r4,-24904
   14b4c:	00153e80 	call	153e8 <alt_alarm_start>
   14b50:	d0a01403 	ldbu	r2,-32688(gp)
   14b54:	10803fcc 	andi	r2,r2,255
   14b58:	10800058 	cmpnei	r2,r2,1
   14b5c:	1000051e 	bne	r2,zero,14b74 <altera_avalon_jtag_uart_init+0x108>
   14b60:	e0bffd17 	ldw	r2,-12(fp)
   14b64:	10800017 	ldw	r2,0(r2)
   14b68:	100b883a 	mov	r5,r2
   14b6c:	e13ffd17 	ldw	r4,-12(fp)
   14b70:	0013df40 	call	13df4 <alt_log_jtag_uart_startup_info>
}
   14b74:	0001883a 	nop
   14b78:	e037883a 	mov	sp,fp
   14b7c:	dfc00117 	ldw	ra,4(sp)
   14b80:	df000017 	ldw	fp,0(sp)
   14b84:	dec00204 	addi	sp,sp,8
   14b88:	f800283a 	ret

00014b8c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14b8c:	defff704 	addi	sp,sp,-36
   14b90:	dfc00815 	stw	ra,32(sp)
   14b94:	df000715 	stw	fp,28(sp)
   14b98:	df000704 	addi	fp,sp,28
   14b9c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14ba0:	e0bfff17 	ldw	r2,-4(fp)
   14ba4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   14ba8:	e0bffb17 	ldw	r2,-20(fp)
   14bac:	10800017 	ldw	r2,0(r2)
   14bb0:	e0bffc15 	stw	r2,-16(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);
   14bb4:	e0bffc17 	ldw	r2,-16(fp)
   14bb8:	e17ffb17 	ldw	r5,-20(fp)
   14bbc:	1009883a 	mov	r4,r2
   14bc0:	0013e400 	call	13e40 <alt_log_jtag_uart_isr_proc>

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14bc4:	e0bffc17 	ldw	r2,-16(fp)
   14bc8:	10800104 	addi	r2,r2,4
   14bcc:	10800037 	ldwio	r2,0(r2)
   14bd0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   14bd4:	e0bffd17 	ldw	r2,-12(fp)
   14bd8:	1080c00c 	andi	r2,r2,768
   14bdc:	10006d26 	beq	r2,zero,14d94 <altera_avalon_jtag_uart_irq+0x208>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14be0:	e0bffd17 	ldw	r2,-12(fp)
   14be4:	1080400c 	andi	r2,r2,256
   14be8:	10003526 	beq	r2,zero,14cc0 <altera_avalon_jtag_uart_irq+0x134>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   14bec:	00800074 	movhi	r2,1
   14bf0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14bf4:	e0bffb17 	ldw	r2,-20(fp)
   14bf8:	10800a17 	ldw	r2,40(r2)
   14bfc:	10800044 	addi	r2,r2,1
   14c00:	1081ffcc 	andi	r2,r2,2047
   14c04:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   14c08:	e0bffb17 	ldw	r2,-20(fp)
   14c0c:	10c00b17 	ldw	r3,44(r2)
   14c10:	e0bffe17 	ldw	r2,-8(fp)
   14c14:	18801526 	beq	r3,r2,14c6c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14c18:	e0bffc17 	ldw	r2,-16(fp)
   14c1c:	10800037 	ldwio	r2,0(r2)
   14c20:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14c24:	e0bff917 	ldw	r2,-28(fp)
   14c28:	10a0000c 	andi	r2,r2,32768
   14c2c:	10001126 	beq	r2,zero,14c74 <altera_avalon_jtag_uart_irq+0xe8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14c30:	e0bffb17 	ldw	r2,-20(fp)
   14c34:	10800a17 	ldw	r2,40(r2)
   14c38:	e0fff917 	ldw	r3,-28(fp)
   14c3c:	1809883a 	mov	r4,r3
   14c40:	e0fffb17 	ldw	r3,-20(fp)
   14c44:	1885883a 	add	r2,r3,r2
   14c48:	10800e04 	addi	r2,r2,56
   14c4c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14c50:	e0bffb17 	ldw	r2,-20(fp)
   14c54:	10800a17 	ldw	r2,40(r2)
   14c58:	10800044 	addi	r2,r2,1
   14c5c:	10c1ffcc 	andi	r3,r2,2047
   14c60:	e0bffb17 	ldw	r2,-20(fp)
   14c64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   14c68:	003fe206 	br	14bf4 <altera_avalon_jtag_uart_irq+0x68>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   14c6c:	0001883a 	nop
   14c70:	00000106 	br	14c78 <altera_avalon_jtag_uart_irq+0xec>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   14c74:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14c78:	e0bff917 	ldw	r2,-28(fp)
   14c7c:	10bfffec 	andhi	r2,r2,65535
   14c80:	10000f26 	beq	r2,zero,14cc0 <altera_avalon_jtag_uart_irq+0x134>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14c84:	e0bffb17 	ldw	r2,-20(fp)
   14c88:	10c00817 	ldw	r3,32(r2)
   14c8c:	00bfff84 	movi	r2,-2
   14c90:	1886703a 	and	r3,r3,r2
   14c94:	e0bffb17 	ldw	r2,-20(fp)
   14c98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14c9c:	e0bffc17 	ldw	r2,-16(fp)
   14ca0:	10800104 	addi	r2,r2,4
   14ca4:	1007883a 	mov	r3,r2
   14ca8:	e0bffb17 	ldw	r2,-20(fp)
   14cac:	10800817 	ldw	r2,32(r2)
   14cb0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14cb4:	e0bffc17 	ldw	r2,-16(fp)
   14cb8:	10800104 	addi	r2,r2,4
   14cbc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   14cc0:	e0bffd17 	ldw	r2,-12(fp)
   14cc4:	1080800c 	andi	r2,r2,512
   14cc8:	103fbe26 	beq	r2,zero,14bc4 <altera_avalon_jtag_uart_irq+0x38>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14ccc:	e0bffd17 	ldw	r2,-12(fp)
   14cd0:	1004d43a 	srli	r2,r2,16
   14cd4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14cd8:	00001406 	br	14d2c <altera_avalon_jtag_uart_irq+0x1a0>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14cdc:	e0bffc17 	ldw	r2,-16(fp)
   14ce0:	e0fffb17 	ldw	r3,-20(fp)
   14ce4:	18c00d17 	ldw	r3,52(r3)
   14ce8:	e13ffb17 	ldw	r4,-20(fp)
   14cec:	20c7883a 	add	r3,r4,r3
   14cf0:	18c20e04 	addi	r3,r3,2104
   14cf4:	18c00003 	ldbu	r3,0(r3)
   14cf8:	18c03fcc 	andi	r3,r3,255
   14cfc:	18c0201c 	xori	r3,r3,128
   14d00:	18ffe004 	addi	r3,r3,-128
   14d04:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14d08:	e0bffb17 	ldw	r2,-20(fp)
   14d0c:	10800d17 	ldw	r2,52(r2)
   14d10:	10800044 	addi	r2,r2,1
   14d14:	10c1ffcc 	andi	r3,r2,2047
   14d18:	e0bffb17 	ldw	r2,-20(fp)
   14d1c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14d20:	e0bffa17 	ldw	r2,-24(fp)
   14d24:	10bfffc4 	addi	r2,r2,-1
   14d28:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14d2c:	e0bffa17 	ldw	r2,-24(fp)
   14d30:	10000526 	beq	r2,zero,14d48 <altera_avalon_jtag_uart_irq+0x1bc>
   14d34:	e0bffb17 	ldw	r2,-20(fp)
   14d38:	10c00d17 	ldw	r3,52(r2)
   14d3c:	e0bffb17 	ldw	r2,-20(fp)
   14d40:	10800c17 	ldw	r2,48(r2)
   14d44:	18bfe51e 	bne	r3,r2,14cdc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14d48:	e0bffa17 	ldw	r2,-24(fp)
   14d4c:	103f9d26 	beq	r2,zero,14bc4 <altera_avalon_jtag_uart_irq+0x38>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14d50:	e0bffb17 	ldw	r2,-20(fp)
   14d54:	10c00817 	ldw	r3,32(r2)
   14d58:	00bfff44 	movi	r2,-3
   14d5c:	1886703a 	and	r3,r3,r2
   14d60:	e0bffb17 	ldw	r2,-20(fp)
   14d64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14d68:	e0bffb17 	ldw	r2,-20(fp)
   14d6c:	10800017 	ldw	r2,0(r2)
   14d70:	10800104 	addi	r2,r2,4
   14d74:	1007883a 	mov	r3,r2
   14d78:	e0bffb17 	ldw	r2,-20(fp)
   14d7c:	10800817 	ldw	r2,32(r2)
   14d80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14d84:	e0bffc17 	ldw	r2,-16(fp)
   14d88:	10800104 	addi	r2,r2,4
   14d8c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14d90:	003f8c06 	br	14bc4 <altera_avalon_jtag_uart_irq+0x38>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   14d94:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14d98:	0001883a 	nop
   14d9c:	e037883a 	mov	sp,fp
   14da0:	dfc00117 	ldw	ra,4(sp)
   14da4:	df000017 	ldw	fp,0(sp)
   14da8:	dec00204 	addi	sp,sp,8
   14dac:	f800283a 	ret

00014db0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14db0:	defff804 	addi	sp,sp,-32
   14db4:	df000715 	stw	fp,28(sp)
   14db8:	df000704 	addi	fp,sp,28
   14dbc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14dc0:	e0bffb17 	ldw	r2,-20(fp)
   14dc4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14dc8:	e0bff917 	ldw	r2,-28(fp)
   14dcc:	10800017 	ldw	r2,0(r2)
   14dd0:	10800104 	addi	r2,r2,4
   14dd4:	10800037 	ldwio	r2,0(r2)
   14dd8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   14ddc:	e0bffa17 	ldw	r2,-24(fp)
   14de0:	1081000c 	andi	r2,r2,1024
   14de4:	10000b26 	beq	r2,zero,14e14 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14de8:	e0bff917 	ldw	r2,-28(fp)
   14dec:	10800017 	ldw	r2,0(r2)
   14df0:	10800104 	addi	r2,r2,4
   14df4:	1007883a 	mov	r3,r2
   14df8:	e0bff917 	ldw	r2,-28(fp)
   14dfc:	10800817 	ldw	r2,32(r2)
   14e00:	10810014 	ori	r2,r2,1024
   14e04:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   14e08:	e0bff917 	ldw	r2,-28(fp)
   14e0c:	10000915 	stw	zero,36(r2)
   14e10:	00000a06 	br	14e3c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14e14:	e0bff917 	ldw	r2,-28(fp)
   14e18:	10c00917 	ldw	r3,36(r2)
   14e1c:	00a00034 	movhi	r2,32768
   14e20:	10bfff04 	addi	r2,r2,-4
   14e24:	10c00536 	bltu	r2,r3,14e3c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   14e28:	e0bff917 	ldw	r2,-28(fp)
   14e2c:	10800917 	ldw	r2,36(r2)
   14e30:	10c00044 	addi	r3,r2,1
   14e34:	e0bff917 	ldw	r2,-28(fp)
   14e38:	10c00915 	stw	r3,36(r2)
   14e3c:	d0a01a17 	ldw	r2,-32664(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   14e40:	e037883a 	mov	sp,fp
   14e44:	df000017 	ldw	fp,0(sp)
   14e48:	dec00104 	addi	sp,sp,4
   14e4c:	f800283a 	ret

00014e50 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14e50:	defffd04 	addi	sp,sp,-12
   14e54:	df000215 	stw	fp,8(sp)
   14e58:	df000204 	addi	fp,sp,8
   14e5c:	e13ffe15 	stw	r4,-8(fp)
   14e60:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14e64:	00000506 	br	14e7c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14e68:	e0bfff17 	ldw	r2,-4(fp)
   14e6c:	1090000c 	andi	r2,r2,16384
   14e70:	10000226 	beq	r2,zero,14e7c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14e74:	00bffd44 	movi	r2,-11
   14e78:	00000b06 	br	14ea8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14e7c:	e0bffe17 	ldw	r2,-8(fp)
   14e80:	10c00d17 	ldw	r3,52(r2)
   14e84:	e0bffe17 	ldw	r2,-8(fp)
   14e88:	10800c17 	ldw	r2,48(r2)
   14e8c:	18800526 	beq	r3,r2,14ea4 <altera_avalon_jtag_uart_close+0x54>
   14e90:	e0bffe17 	ldw	r2,-8(fp)
   14e94:	10c00917 	ldw	r3,36(r2)
   14e98:	e0bffe17 	ldw	r2,-8(fp)
   14e9c:	10800117 	ldw	r2,4(r2)
   14ea0:	18bff136 	bltu	r3,r2,14e68 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14ea4:	0005883a 	mov	r2,zero
}
   14ea8:	e037883a 	mov	sp,fp
   14eac:	df000017 	ldw	fp,0(sp)
   14eb0:	dec00104 	addi	sp,sp,4
   14eb4:	f800283a 	ret

00014eb8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14eb8:	defffa04 	addi	sp,sp,-24
   14ebc:	df000515 	stw	fp,20(sp)
   14ec0:	df000504 	addi	fp,sp,20
   14ec4:	e13ffd15 	stw	r4,-12(fp)
   14ec8:	e17ffe15 	stw	r5,-8(fp)
   14ecc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14ed0:	00bff9c4 	movi	r2,-25
   14ed4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   14ed8:	e0bffe17 	ldw	r2,-8(fp)
   14edc:	10da8060 	cmpeqi	r3,r2,27137
   14ee0:	1800031e 	bne	r3,zero,14ef0 <altera_avalon_jtag_uart_ioctl+0x38>
   14ee4:	109a80a0 	cmpeqi	r2,r2,27138
   14ee8:	1000181e 	bne	r2,zero,14f4c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   14eec:	00002906 	br	14f94 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14ef0:	e0bffd17 	ldw	r2,-12(fp)
   14ef4:	10c00117 	ldw	r3,4(r2)
   14ef8:	00a00034 	movhi	r2,32768
   14efc:	10bfffc4 	addi	r2,r2,-1
   14f00:	18802126 	beq	r3,r2,14f88 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   14f04:	e0bfff17 	ldw	r2,-4(fp)
   14f08:	10800017 	ldw	r2,0(r2)
   14f0c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14f10:	e0bffc17 	ldw	r2,-16(fp)
   14f14:	10800090 	cmplti	r2,r2,2
   14f18:	1000061e 	bne	r2,zero,14f34 <altera_avalon_jtag_uart_ioctl+0x7c>
   14f1c:	e0fffc17 	ldw	r3,-16(fp)
   14f20:	00a00034 	movhi	r2,32768
   14f24:	10bfffc4 	addi	r2,r2,-1
   14f28:	18800226 	beq	r3,r2,14f34 <altera_avalon_jtag_uart_ioctl+0x7c>
   14f2c:	e0bffc17 	ldw	r2,-16(fp)
   14f30:	00000206 	br	14f3c <altera_avalon_jtag_uart_ioctl+0x84>
   14f34:	00a00034 	movhi	r2,32768
   14f38:	10bfff84 	addi	r2,r2,-2
   14f3c:	e0fffd17 	ldw	r3,-12(fp)
   14f40:	18800115 	stw	r2,4(r3)
      rc = 0;
   14f44:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14f48:	00000f06 	br	14f88 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   14f4c:	e0bffd17 	ldw	r2,-12(fp)
   14f50:	10c00117 	ldw	r3,4(r2)
   14f54:	00a00034 	movhi	r2,32768
   14f58:	10bfffc4 	addi	r2,r2,-1
   14f5c:	18800c26 	beq	r3,r2,14f90 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14f60:	e0bffd17 	ldw	r2,-12(fp)
   14f64:	10c00917 	ldw	r3,36(r2)
   14f68:	e0bffd17 	ldw	r2,-12(fp)
   14f6c:	10800117 	ldw	r2,4(r2)
   14f70:	1885803a 	cmpltu	r2,r3,r2
   14f74:	10c03fcc 	andi	r3,r2,255
   14f78:	e0bfff17 	ldw	r2,-4(fp)
   14f7c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14f80:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14f84:	00000206 	br	14f90 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   14f88:	0001883a 	nop
   14f8c:	00000106 	br	14f94 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   14f90:	0001883a 	nop

  default:
    break;
  }

  return rc;
   14f94:	e0bffb17 	ldw	r2,-20(fp)
}
   14f98:	e037883a 	mov	sp,fp
   14f9c:	df000017 	ldw	fp,0(sp)
   14fa0:	dec00104 	addi	sp,sp,4
   14fa4:	f800283a 	ret

00014fa8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14fa8:	defff304 	addi	sp,sp,-52
   14fac:	dfc00c15 	stw	ra,48(sp)
   14fb0:	df000b15 	stw	fp,44(sp)
   14fb4:	df000b04 	addi	fp,sp,44
   14fb8:	e13ffc15 	stw	r4,-16(fp)
   14fbc:	e17ffd15 	stw	r5,-12(fp)
   14fc0:	e1bffe15 	stw	r6,-8(fp)
   14fc4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   14fc8:	e0bffd17 	ldw	r2,-12(fp)
   14fcc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14fd0:	00004706 	br	150f0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14fd4:	e0bffc17 	ldw	r2,-16(fp)
   14fd8:	10800a17 	ldw	r2,40(r2)
   14fdc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14fe0:	e0bffc17 	ldw	r2,-16(fp)
   14fe4:	10800b17 	ldw	r2,44(r2)
   14fe8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   14fec:	e0fff717 	ldw	r3,-36(fp)
   14ff0:	e0bff817 	ldw	r2,-32(fp)
   14ff4:	18800536 	bltu	r3,r2,1500c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14ff8:	e0fff717 	ldw	r3,-36(fp)
   14ffc:	e0bff817 	ldw	r2,-32(fp)
   15000:	1885c83a 	sub	r2,r3,r2
   15004:	e0bff615 	stw	r2,-40(fp)
   15008:	00000406 	br	1501c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1500c:	00c20004 	movi	r3,2048
   15010:	e0bff817 	ldw	r2,-32(fp)
   15014:	1885c83a 	sub	r2,r3,r2
   15018:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1501c:	e0bff617 	ldw	r2,-40(fp)
   15020:	10001e26 	beq	r2,zero,1509c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   15024:	e0fffe17 	ldw	r3,-8(fp)
   15028:	e0bff617 	ldw	r2,-40(fp)
   1502c:	1880022e 	bgeu	r3,r2,15038 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   15030:	e0bffe17 	ldw	r2,-8(fp)
   15034:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15038:	e0bffc17 	ldw	r2,-16(fp)
   1503c:	10c00e04 	addi	r3,r2,56
   15040:	e0bff817 	ldw	r2,-32(fp)
   15044:	1885883a 	add	r2,r3,r2
   15048:	e1bff617 	ldw	r6,-40(fp)
   1504c:	100b883a 	mov	r5,r2
   15050:	e13ff517 	ldw	r4,-44(fp)
   15054:	00117dc0 	call	117dc <memcpy>
      ptr   += n;
   15058:	e0fff517 	ldw	r3,-44(fp)
   1505c:	e0bff617 	ldw	r2,-40(fp)
   15060:	1885883a 	add	r2,r3,r2
   15064:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   15068:	e0fffe17 	ldw	r3,-8(fp)
   1506c:	e0bff617 	ldw	r2,-40(fp)
   15070:	1885c83a 	sub	r2,r3,r2
   15074:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15078:	e0fff817 	ldw	r3,-32(fp)
   1507c:	e0bff617 	ldw	r2,-40(fp)
   15080:	1885883a 	add	r2,r3,r2
   15084:	10c1ffcc 	andi	r3,r2,2047
   15088:	e0bffc17 	ldw	r2,-16(fp)
   1508c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   15090:	e0bffe17 	ldw	r2,-8(fp)
   15094:	00bfcf16 	blt	zero,r2,14fd4 <altera_avalon_jtag_uart_read+0x2c>
   15098:	00000106 	br	150a0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1509c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   150a0:	e0fff517 	ldw	r3,-44(fp)
   150a4:	e0bffd17 	ldw	r2,-12(fp)
   150a8:	1880141e 	bne	r3,r2,150fc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   150ac:	e0bfff17 	ldw	r2,-4(fp)
   150b0:	1090000c 	andi	r2,r2,16384
   150b4:	1000131e 	bne	r2,zero,15104 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   150b8:	0001883a 	nop
   150bc:	e0bffc17 	ldw	r2,-16(fp)
   150c0:	10c00a17 	ldw	r3,40(r2)
   150c4:	e0bff717 	ldw	r2,-36(fp)
   150c8:	1880051e 	bne	r3,r2,150e0 <altera_avalon_jtag_uart_read+0x138>
   150cc:	e0bffc17 	ldw	r2,-16(fp)
   150d0:	10c00917 	ldw	r3,36(r2)
   150d4:	e0bffc17 	ldw	r2,-16(fp)
   150d8:	10800117 	ldw	r2,4(r2)
   150dc:	18bff736 	bltu	r3,r2,150bc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   150e0:	e0bffc17 	ldw	r2,-16(fp)
   150e4:	10c00a17 	ldw	r3,40(r2)
   150e8:	e0bff717 	ldw	r2,-36(fp)
   150ec:	18800726 	beq	r3,r2,1510c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   150f0:	e0bffe17 	ldw	r2,-8(fp)
   150f4:	00bfb716 	blt	zero,r2,14fd4 <altera_avalon_jtag_uart_read+0x2c>
   150f8:	00000506 	br	15110 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   150fc:	0001883a 	nop
   15100:	00000306 	br	15110 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   15104:	0001883a 	nop
   15108:	00000106 	br	15110 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1510c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   15110:	e0fff517 	ldw	r3,-44(fp)
   15114:	e0bffd17 	ldw	r2,-12(fp)
   15118:	18801826 	beq	r3,r2,1517c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1511c:	0005303a 	rdctl	r2,status
   15120:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15124:	e0fffb17 	ldw	r3,-20(fp)
   15128:	00bfff84 	movi	r2,-2
   1512c:	1884703a 	and	r2,r3,r2
   15130:	1001703a 	wrctl	status,r2
  
  return context;
   15134:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15138:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1513c:	e0bffc17 	ldw	r2,-16(fp)
   15140:	10800817 	ldw	r2,32(r2)
   15144:	10c00054 	ori	r3,r2,1
   15148:	e0bffc17 	ldw	r2,-16(fp)
   1514c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15150:	e0bffc17 	ldw	r2,-16(fp)
   15154:	10800017 	ldw	r2,0(r2)
   15158:	10800104 	addi	r2,r2,4
   1515c:	1007883a 	mov	r3,r2
   15160:	e0bffc17 	ldw	r2,-16(fp)
   15164:	10800817 	ldw	r2,32(r2)
   15168:	18800035 	stwio	r2,0(r3)
   1516c:	e0bffa17 	ldw	r2,-24(fp)
   15170:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15174:	e0bff917 	ldw	r2,-28(fp)
   15178:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1517c:	e0fff517 	ldw	r3,-44(fp)
   15180:	e0bffd17 	ldw	r2,-12(fp)
   15184:	18800426 	beq	r3,r2,15198 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   15188:	e0fff517 	ldw	r3,-44(fp)
   1518c:	e0bffd17 	ldw	r2,-12(fp)
   15190:	1885c83a 	sub	r2,r3,r2
   15194:	00000606 	br	151b0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   15198:	e0bfff17 	ldw	r2,-4(fp)
   1519c:	1090000c 	andi	r2,r2,16384
   151a0:	10000226 	beq	r2,zero,151ac <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   151a4:	00bffd44 	movi	r2,-11
   151a8:	00000106 	br	151b0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   151ac:	00bffec4 	movi	r2,-5
}
   151b0:	e037883a 	mov	sp,fp
   151b4:	dfc00117 	ldw	ra,4(sp)
   151b8:	df000017 	ldw	fp,0(sp)
   151bc:	dec00204 	addi	sp,sp,8
   151c0:	f800283a 	ret

000151c4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   151c4:	defff304 	addi	sp,sp,-52
   151c8:	dfc00c15 	stw	ra,48(sp)
   151cc:	df000b15 	stw	fp,44(sp)
   151d0:	df000b04 	addi	fp,sp,44
   151d4:	e13ffc15 	stw	r4,-16(fp)
   151d8:	e17ffd15 	stw	r5,-12(fp)
   151dc:	e1bffe15 	stw	r6,-8(fp)
   151e0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   151e4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   151e8:	e0bffd17 	ldw	r2,-12(fp)
   151ec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   151f0:	00003706 	br	152d0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   151f4:	e0bffc17 	ldw	r2,-16(fp)
   151f8:	10800c17 	ldw	r2,48(r2)
   151fc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   15200:	e0bffc17 	ldw	r2,-16(fp)
   15204:	10800d17 	ldw	r2,52(r2)
   15208:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1520c:	e0fff917 	ldw	r3,-28(fp)
   15210:	e0bff517 	ldw	r2,-44(fp)
   15214:	1880062e 	bgeu	r3,r2,15230 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   15218:	e0fff517 	ldw	r3,-44(fp)
   1521c:	e0bff917 	ldw	r2,-28(fp)
   15220:	1885c83a 	sub	r2,r3,r2
   15224:	10bfffc4 	addi	r2,r2,-1
   15228:	e0bff615 	stw	r2,-40(fp)
   1522c:	00000b06 	br	1525c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   15230:	e0bff517 	ldw	r2,-44(fp)
   15234:	10000526 	beq	r2,zero,1524c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   15238:	00c20004 	movi	r3,2048
   1523c:	e0bff917 	ldw	r2,-28(fp)
   15240:	1885c83a 	sub	r2,r3,r2
   15244:	e0bff615 	stw	r2,-40(fp)
   15248:	00000406 	br	1525c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1524c:	00c1ffc4 	movi	r3,2047
   15250:	e0bff917 	ldw	r2,-28(fp)
   15254:	1885c83a 	sub	r2,r3,r2
   15258:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1525c:	e0bff617 	ldw	r2,-40(fp)
   15260:	10001e26 	beq	r2,zero,152dc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   15264:	e0fffe17 	ldw	r3,-8(fp)
   15268:	e0bff617 	ldw	r2,-40(fp)
   1526c:	1880022e 	bgeu	r3,r2,15278 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   15270:	e0bffe17 	ldw	r2,-8(fp)
   15274:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   15278:	e0bffc17 	ldw	r2,-16(fp)
   1527c:	10c20e04 	addi	r3,r2,2104
   15280:	e0bff917 	ldw	r2,-28(fp)
   15284:	1885883a 	add	r2,r3,r2
   15288:	e1bff617 	ldw	r6,-40(fp)
   1528c:	e17ffd17 	ldw	r5,-12(fp)
   15290:	1009883a 	mov	r4,r2
   15294:	00117dc0 	call	117dc <memcpy>
      ptr   += n;
   15298:	e0fffd17 	ldw	r3,-12(fp)
   1529c:	e0bff617 	ldw	r2,-40(fp)
   152a0:	1885883a 	add	r2,r3,r2
   152a4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   152a8:	e0fffe17 	ldw	r3,-8(fp)
   152ac:	e0bff617 	ldw	r2,-40(fp)
   152b0:	1885c83a 	sub	r2,r3,r2
   152b4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   152b8:	e0fff917 	ldw	r3,-28(fp)
   152bc:	e0bff617 	ldw	r2,-40(fp)
   152c0:	1885883a 	add	r2,r3,r2
   152c4:	10c1ffcc 	andi	r3,r2,2047
   152c8:	e0bffc17 	ldw	r2,-16(fp)
   152cc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   152d0:	e0bffe17 	ldw	r2,-8(fp)
   152d4:	00bfc716 	blt	zero,r2,151f4 <altera_avalon_jtag_uart_write+0x30>
   152d8:	00000106 	br	152e0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   152dc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   152e0:	0005303a 	rdctl	r2,status
   152e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   152e8:	e0fffb17 	ldw	r3,-20(fp)
   152ec:	00bfff84 	movi	r2,-2
   152f0:	1884703a 	and	r2,r3,r2
   152f4:	1001703a 	wrctl	status,r2
  
  return context;
   152f8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   152fc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15300:	e0bffc17 	ldw	r2,-16(fp)
   15304:	10800817 	ldw	r2,32(r2)
   15308:	10c00094 	ori	r3,r2,2
   1530c:	e0bffc17 	ldw	r2,-16(fp)
   15310:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15314:	e0bffc17 	ldw	r2,-16(fp)
   15318:	10800017 	ldw	r2,0(r2)
   1531c:	10800104 	addi	r2,r2,4
   15320:	1007883a 	mov	r3,r2
   15324:	e0bffc17 	ldw	r2,-16(fp)
   15328:	10800817 	ldw	r2,32(r2)
   1532c:	18800035 	stwio	r2,0(r3)
   15330:	e0bffa17 	ldw	r2,-24(fp)
   15334:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15338:	e0bff817 	ldw	r2,-32(fp)
   1533c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   15340:	e0bffe17 	ldw	r2,-8(fp)
   15344:	0080100e 	bge	zero,r2,15388 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   15348:	e0bfff17 	ldw	r2,-4(fp)
   1534c:	1090000c 	andi	r2,r2,16384
   15350:	1000101e 	bne	r2,zero,15394 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   15354:	0001883a 	nop
   15358:	e0bffc17 	ldw	r2,-16(fp)
   1535c:	10c00d17 	ldw	r3,52(r2)
   15360:	e0bff517 	ldw	r2,-44(fp)
   15364:	1880051e 	bne	r3,r2,1537c <altera_avalon_jtag_uart_write+0x1b8>
   15368:	e0bffc17 	ldw	r2,-16(fp)
   1536c:	10c00917 	ldw	r3,36(r2)
   15370:	e0bffc17 	ldw	r2,-16(fp)
   15374:	10800117 	ldw	r2,4(r2)
   15378:	18bff736 	bltu	r3,r2,15358 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1537c:	e0bffc17 	ldw	r2,-16(fp)
   15380:	10800917 	ldw	r2,36(r2)
   15384:	1000051e 	bne	r2,zero,1539c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   15388:	e0bffe17 	ldw	r2,-8(fp)
   1538c:	00bfd016 	blt	zero,r2,152d0 <altera_avalon_jtag_uart_write+0x10c>
   15390:	00000306 	br	153a0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   15394:	0001883a 	nop
   15398:	00000106 	br	153a0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1539c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   153a0:	e0fffd17 	ldw	r3,-12(fp)
   153a4:	e0bff717 	ldw	r2,-36(fp)
   153a8:	18800426 	beq	r3,r2,153bc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   153ac:	e0fffd17 	ldw	r3,-12(fp)
   153b0:	e0bff717 	ldw	r2,-36(fp)
   153b4:	1885c83a 	sub	r2,r3,r2
   153b8:	00000606 	br	153d4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   153bc:	e0bfff17 	ldw	r2,-4(fp)
   153c0:	1090000c 	andi	r2,r2,16384
   153c4:	10000226 	beq	r2,zero,153d0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   153c8:	00bffd44 	movi	r2,-11
   153cc:	00000106 	br	153d4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   153d0:	00bffec4 	movi	r2,-5
}
   153d4:	e037883a 	mov	sp,fp
   153d8:	dfc00117 	ldw	ra,4(sp)
   153dc:	df000017 	ldw	fp,0(sp)
   153e0:	dec00204 	addi	sp,sp,8
   153e4:	f800283a 	ret

000153e8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   153e8:	defff504 	addi	sp,sp,-44
   153ec:	df000a15 	stw	fp,40(sp)
   153f0:	df000a04 	addi	fp,sp,40
   153f4:	e13ffc15 	stw	r4,-16(fp)
   153f8:	e17ffd15 	stw	r5,-12(fp)
   153fc:	e1bffe15 	stw	r6,-8(fp)
   15400:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   15404:	e03ff615 	stw	zero,-40(fp)
   15408:	d0a01a17 	ldw	r2,-32664(gp)
  
  if (alt_ticks_per_second ())
   1540c:	10003c26 	beq	r2,zero,15500 <alt_alarm_start+0x118>
  {
    if (alarm)
   15410:	e0bffc17 	ldw	r2,-16(fp)
   15414:	10003826 	beq	r2,zero,154f8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   15418:	e0bffc17 	ldw	r2,-16(fp)
   1541c:	e0fffe17 	ldw	r3,-8(fp)
   15420:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   15424:	e0bffc17 	ldw	r2,-16(fp)
   15428:	e0ffff17 	ldw	r3,-4(fp)
   1542c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15430:	0005303a 	rdctl	r2,status
   15434:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15438:	e0fff917 	ldw	r3,-28(fp)
   1543c:	00bfff84 	movi	r2,-2
   15440:	1884703a 	and	r2,r3,r2
   15444:	1001703a 	wrctl	status,r2
  
  return context;
   15448:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1544c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   15450:	d0a01b17 	ldw	r2,-32660(gp)
      
      current_nticks = alt_nticks();
   15454:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   15458:	e0fffd17 	ldw	r3,-12(fp)
   1545c:	e0bff617 	ldw	r2,-40(fp)
   15460:	1885883a 	add	r2,r3,r2
   15464:	10c00044 	addi	r3,r2,1
   15468:	e0bffc17 	ldw	r2,-16(fp)
   1546c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   15470:	e0bffc17 	ldw	r2,-16(fp)
   15474:	10c00217 	ldw	r3,8(r2)
   15478:	e0bff617 	ldw	r2,-40(fp)
   1547c:	1880042e 	bgeu	r3,r2,15490 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   15480:	e0bffc17 	ldw	r2,-16(fp)
   15484:	00c00044 	movi	r3,1
   15488:	10c00405 	stb	r3,16(r2)
   1548c:	00000206 	br	15498 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   15490:	e0bffc17 	ldw	r2,-16(fp)
   15494:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   15498:	e0bffc17 	ldw	r2,-16(fp)
   1549c:	d0e00c04 	addi	r3,gp,-32720
   154a0:	e0fffa15 	stw	r3,-24(fp)
   154a4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   154a8:	e0bffb17 	ldw	r2,-20(fp)
   154ac:	e0fffa17 	ldw	r3,-24(fp)
   154b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   154b4:	e0bffa17 	ldw	r2,-24(fp)
   154b8:	10c00017 	ldw	r3,0(r2)
   154bc:	e0bffb17 	ldw	r2,-20(fp)
   154c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   154c4:	e0bffa17 	ldw	r2,-24(fp)
   154c8:	10800017 	ldw	r2,0(r2)
   154cc:	e0fffb17 	ldw	r3,-20(fp)
   154d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   154d4:	e0bffa17 	ldw	r2,-24(fp)
   154d8:	e0fffb17 	ldw	r3,-20(fp)
   154dc:	10c00015 	stw	r3,0(r2)
   154e0:	e0bff817 	ldw	r2,-32(fp)
   154e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154e8:	e0bff717 	ldw	r2,-36(fp)
   154ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   154f0:	0005883a 	mov	r2,zero
   154f4:	00000306 	br	15504 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   154f8:	00bffa84 	movi	r2,-22
   154fc:	00000106 	br	15504 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   15500:	00bfde84 	movi	r2,-134
  }
}
   15504:	e037883a 	mov	sp,fp
   15508:	df000017 	ldw	fp,0(sp)
   1550c:	dec00104 	addi	sp,sp,4
   15510:	f800283a 	ret

00015514 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15514:	deffff04 	addi	sp,sp,-4
   15518:	df000015 	stw	fp,0(sp)
   1551c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15520:	0001883a 	nop
   15524:	e037883a 	mov	sp,fp
   15528:	df000017 	ldw	fp,0(sp)
   1552c:	dec00104 	addi	sp,sp,4
   15530:	f800283a 	ret

00015534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15534:	defffe04 	addi	sp,sp,-8
   15538:	dfc00115 	stw	ra,4(sp)
   1553c:	df000015 	stw	fp,0(sp)
   15540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15544:	d0a00917 	ldw	r2,-32732(gp)
   15548:	10000326 	beq	r2,zero,15558 <alt_get_errno+0x24>
   1554c:	d0a00917 	ldw	r2,-32732(gp)
   15550:	103ee83a 	callr	r2
   15554:	00000106 	br	1555c <alt_get_errno+0x28>
   15558:	d0a01204 	addi	r2,gp,-32696
}
   1555c:	e037883a 	mov	sp,fp
   15560:	dfc00117 	ldw	ra,4(sp)
   15564:	df000017 	ldw	fp,0(sp)
   15568:	dec00204 	addi	sp,sp,8
   1556c:	f800283a 	ret

00015570 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   15570:	defffa04 	addi	sp,sp,-24
   15574:	dfc00515 	stw	ra,20(sp)
   15578:	df000415 	stw	fp,16(sp)
   1557c:	df000404 	addi	fp,sp,16
   15580:	e13ffe15 	stw	r4,-8(fp)
   15584:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15588:	e0bffe17 	ldw	r2,-8(fp)
   1558c:	10000326 	beq	r2,zero,1559c <alt_dev_llist_insert+0x2c>
   15590:	e0bffe17 	ldw	r2,-8(fp)
   15594:	10800217 	ldw	r2,8(r2)
   15598:	1000061e 	bne	r2,zero,155b4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1559c:	00155340 	call	15534 <alt_get_errno>
   155a0:	1007883a 	mov	r3,r2
   155a4:	00800584 	movi	r2,22
   155a8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   155ac:	00bffa84 	movi	r2,-22
   155b0:	00001306 	br	15600 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   155b4:	e0bffe17 	ldw	r2,-8(fp)
   155b8:	e0ffff17 	ldw	r3,-4(fp)
   155bc:	e0fffc15 	stw	r3,-16(fp)
   155c0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   155c4:	e0bffd17 	ldw	r2,-12(fp)
   155c8:	e0fffc17 	ldw	r3,-16(fp)
   155cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   155d0:	e0bffc17 	ldw	r2,-16(fp)
   155d4:	10c00017 	ldw	r3,0(r2)
   155d8:	e0bffd17 	ldw	r2,-12(fp)
   155dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   155e0:	e0bffc17 	ldw	r2,-16(fp)
   155e4:	10800017 	ldw	r2,0(r2)
   155e8:	e0fffd17 	ldw	r3,-12(fp)
   155ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   155f0:	e0bffc17 	ldw	r2,-16(fp)
   155f4:	e0fffd17 	ldw	r3,-12(fp)
   155f8:	10c00015 	stw	r3,0(r2)

  return 0;  
   155fc:	0005883a 	mov	r2,zero
}
   15600:	e037883a 	mov	sp,fp
   15604:	dfc00117 	ldw	ra,4(sp)
   15608:	df000017 	ldw	fp,0(sp)
   1560c:	dec00204 	addi	sp,sp,8
   15610:	f800283a 	ret

00015614 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15614:	defffd04 	addi	sp,sp,-12
   15618:	dfc00215 	stw	ra,8(sp)
   1561c:	df000115 	stw	fp,4(sp)
   15620:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15624:	00800074 	movhi	r2,1
   15628:	10996404 	addi	r2,r2,26000
   1562c:	e0bfff15 	stw	r2,-4(fp)
   15630:	00000606 	br	1564c <_do_ctors+0x38>
        (*ctor) (); 
   15634:	e0bfff17 	ldw	r2,-4(fp)
   15638:	10800017 	ldw	r2,0(r2)
   1563c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15640:	e0bfff17 	ldw	r2,-4(fp)
   15644:	10bfff04 	addi	r2,r2,-4
   15648:	e0bfff15 	stw	r2,-4(fp)
   1564c:	e0ffff17 	ldw	r3,-4(fp)
   15650:	00800074 	movhi	r2,1
   15654:	10996504 	addi	r2,r2,26004
   15658:	18bff62e 	bgeu	r3,r2,15634 <_do_ctors+0x20>
        (*ctor) (); 
}
   1565c:	0001883a 	nop
   15660:	e037883a 	mov	sp,fp
   15664:	dfc00117 	ldw	ra,4(sp)
   15668:	df000017 	ldw	fp,0(sp)
   1566c:	dec00204 	addi	sp,sp,8
   15670:	f800283a 	ret

00015674 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15674:	defffd04 	addi	sp,sp,-12
   15678:	dfc00215 	stw	ra,8(sp)
   1567c:	df000115 	stw	fp,4(sp)
   15680:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15684:	00800074 	movhi	r2,1
   15688:	10996404 	addi	r2,r2,26000
   1568c:	e0bfff15 	stw	r2,-4(fp)
   15690:	00000606 	br	156ac <_do_dtors+0x38>
        (*dtor) (); 
   15694:	e0bfff17 	ldw	r2,-4(fp)
   15698:	10800017 	ldw	r2,0(r2)
   1569c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   156a0:	e0bfff17 	ldw	r2,-4(fp)
   156a4:	10bfff04 	addi	r2,r2,-4
   156a8:	e0bfff15 	stw	r2,-4(fp)
   156ac:	e0ffff17 	ldw	r3,-4(fp)
   156b0:	00800074 	movhi	r2,1
   156b4:	10996504 	addi	r2,r2,26004
   156b8:	18bff62e 	bgeu	r3,r2,15694 <_do_dtors+0x20>
        (*dtor) (); 
}
   156bc:	0001883a 	nop
   156c0:	e037883a 	mov	sp,fp
   156c4:	dfc00117 	ldw	ra,4(sp)
   156c8:	df000017 	ldw	fp,0(sp)
   156cc:	dec00204 	addi	sp,sp,8
   156d0:	f800283a 	ret

000156d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   156d4:	deffff04 	addi	sp,sp,-4
   156d8:	df000015 	stw	fp,0(sp)
   156dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   156e0:	0001883a 	nop
   156e4:	e037883a 	mov	sp,fp
   156e8:	df000017 	ldw	fp,0(sp)
   156ec:	dec00104 	addi	sp,sp,4
   156f0:	f800283a 	ret

000156f4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   156f4:	defff904 	addi	sp,sp,-28
   156f8:	dfc00615 	stw	ra,24(sp)
   156fc:	df000515 	stw	fp,20(sp)
   15700:	df000504 	addi	fp,sp,20
   15704:	e13ffc15 	stw	r4,-16(fp)
   15708:	e17ffd15 	stw	r5,-12(fp)
   1570c:	e1bffe15 	stw	r6,-8(fp)
   15710:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   15714:	e0800217 	ldw	r2,8(fp)
   15718:	d8800015 	stw	r2,0(sp)
   1571c:	e1ffff17 	ldw	r7,-4(fp)
   15720:	e1bffe17 	ldw	r6,-8(fp)
   15724:	e17ffd17 	ldw	r5,-12(fp)
   15728:	e13ffc17 	ldw	r4,-16(fp)
   1572c:	00158a40 	call	158a4 <alt_iic_isr_register>
}  
   15730:	e037883a 	mov	sp,fp
   15734:	dfc00117 	ldw	ra,4(sp)
   15738:	df000017 	ldw	fp,0(sp)
   1573c:	dec00204 	addi	sp,sp,8
   15740:	f800283a 	ret

00015744 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   15744:	defff904 	addi	sp,sp,-28
   15748:	df000615 	stw	fp,24(sp)
   1574c:	df000604 	addi	fp,sp,24
   15750:	e13ffe15 	stw	r4,-8(fp)
   15754:	e17fff15 	stw	r5,-4(fp)
   15758:	e0bfff17 	ldw	r2,-4(fp)
   1575c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15760:	0005303a 	rdctl	r2,status
   15764:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15768:	e0fffb17 	ldw	r3,-20(fp)
   1576c:	00bfff84 	movi	r2,-2
   15770:	1884703a 	and	r2,r3,r2
   15774:	1001703a 	wrctl	status,r2
  
  return context;
   15778:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1577c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   15780:	00c00044 	movi	r3,1
   15784:	e0bffa17 	ldw	r2,-24(fp)
   15788:	1884983a 	sll	r2,r3,r2
   1578c:	1007883a 	mov	r3,r2
   15790:	d0a01c17 	ldw	r2,-32656(gp)
   15794:	1884b03a 	or	r2,r3,r2
   15798:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1579c:	d0a01c17 	ldw	r2,-32656(gp)
   157a0:	100170fa 	wrctl	ienable,r2
   157a4:	e0bffc17 	ldw	r2,-16(fp)
   157a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157ac:	e0bffd17 	ldw	r2,-12(fp)
   157b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   157b4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   157b8:	0001883a 	nop
}
   157bc:	e037883a 	mov	sp,fp
   157c0:	df000017 	ldw	fp,0(sp)
   157c4:	dec00104 	addi	sp,sp,4
   157c8:	f800283a 	ret

000157cc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   157cc:	defff904 	addi	sp,sp,-28
   157d0:	df000615 	stw	fp,24(sp)
   157d4:	df000604 	addi	fp,sp,24
   157d8:	e13ffe15 	stw	r4,-8(fp)
   157dc:	e17fff15 	stw	r5,-4(fp)
   157e0:	e0bfff17 	ldw	r2,-4(fp)
   157e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157e8:	0005303a 	rdctl	r2,status
   157ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157f0:	e0fffb17 	ldw	r3,-20(fp)
   157f4:	00bfff84 	movi	r2,-2
   157f8:	1884703a 	and	r2,r3,r2
   157fc:	1001703a 	wrctl	status,r2
  
  return context;
   15800:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15804:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   15808:	00c00044 	movi	r3,1
   1580c:	e0bffa17 	ldw	r2,-24(fp)
   15810:	1884983a 	sll	r2,r3,r2
   15814:	0084303a 	nor	r2,zero,r2
   15818:	1007883a 	mov	r3,r2
   1581c:	d0a01c17 	ldw	r2,-32656(gp)
   15820:	1884703a 	and	r2,r3,r2
   15824:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15828:	d0a01c17 	ldw	r2,-32656(gp)
   1582c:	100170fa 	wrctl	ienable,r2
   15830:	e0bffc17 	ldw	r2,-16(fp)
   15834:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15838:	e0bffd17 	ldw	r2,-12(fp)
   1583c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15840:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   15844:	0001883a 	nop
}
   15848:	e037883a 	mov	sp,fp
   1584c:	df000017 	ldw	fp,0(sp)
   15850:	dec00104 	addi	sp,sp,4
   15854:	f800283a 	ret

00015858 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   15858:	defffc04 	addi	sp,sp,-16
   1585c:	df000315 	stw	fp,12(sp)
   15860:	df000304 	addi	fp,sp,12
   15864:	e13ffe15 	stw	r4,-8(fp)
   15868:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1586c:	000530fa 	rdctl	r2,ienable
   15870:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   15874:	00c00044 	movi	r3,1
   15878:	e0bfff17 	ldw	r2,-4(fp)
   1587c:	1884983a 	sll	r2,r3,r2
   15880:	1007883a 	mov	r3,r2
   15884:	e0bffd17 	ldw	r2,-12(fp)
   15888:	1884703a 	and	r2,r3,r2
   1588c:	1004c03a 	cmpne	r2,r2,zero
   15890:	10803fcc 	andi	r2,r2,255
}
   15894:	e037883a 	mov	sp,fp
   15898:	df000017 	ldw	fp,0(sp)
   1589c:	dec00104 	addi	sp,sp,4
   158a0:	f800283a 	ret

000158a4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   158a4:	defff504 	addi	sp,sp,-44
   158a8:	dfc00a15 	stw	ra,40(sp)
   158ac:	df000915 	stw	fp,36(sp)
   158b0:	df000904 	addi	fp,sp,36
   158b4:	e13ffc15 	stw	r4,-16(fp)
   158b8:	e17ffd15 	stw	r5,-12(fp)
   158bc:	e1bffe15 	stw	r6,-8(fp)
   158c0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   158c4:	00bffa84 	movi	r2,-22
   158c8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   158cc:	e0bffd17 	ldw	r2,-12(fp)
   158d0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   158d4:	e0bff817 	ldw	r2,-32(fp)
   158d8:	10800808 	cmpgei	r2,r2,32
   158dc:	1000271e 	bne	r2,zero,1597c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158e0:	0005303a 	rdctl	r2,status
   158e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158e8:	e0fffb17 	ldw	r3,-20(fp)
   158ec:	00bfff84 	movi	r2,-2
   158f0:	1884703a 	and	r2,r3,r2
   158f4:	1001703a 	wrctl	status,r2
  
  return context;
   158f8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   158fc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   15900:	008000b4 	movhi	r2,2
   15904:	10a7b404 	addi	r2,r2,-24880
   15908:	e0fff817 	ldw	r3,-32(fp)
   1590c:	180690fa 	slli	r3,r3,3
   15910:	10c5883a 	add	r2,r2,r3
   15914:	e0fffe17 	ldw	r3,-8(fp)
   15918:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1591c:	008000b4 	movhi	r2,2
   15920:	10a7b404 	addi	r2,r2,-24880
   15924:	e0fff817 	ldw	r3,-32(fp)
   15928:	180690fa 	slli	r3,r3,3
   1592c:	10c5883a 	add	r2,r2,r3
   15930:	10800104 	addi	r2,r2,4
   15934:	e0ffff17 	ldw	r3,-4(fp)
   15938:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1593c:	e0bffe17 	ldw	r2,-8(fp)
   15940:	10000526 	beq	r2,zero,15958 <alt_iic_isr_register+0xb4>
   15944:	e0bff817 	ldw	r2,-32(fp)
   15948:	100b883a 	mov	r5,r2
   1594c:	e13ffc17 	ldw	r4,-16(fp)
   15950:	00157440 	call	15744 <alt_ic_irq_enable>
   15954:	00000406 	br	15968 <alt_iic_isr_register+0xc4>
   15958:	e0bff817 	ldw	r2,-32(fp)
   1595c:	100b883a 	mov	r5,r2
   15960:	e13ffc17 	ldw	r4,-16(fp)
   15964:	00157cc0 	call	157cc <alt_ic_irq_disable>
   15968:	e0bff715 	stw	r2,-36(fp)
   1596c:	e0bffa17 	ldw	r2,-24(fp)
   15970:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15974:	e0bff917 	ldw	r2,-28(fp)
   15978:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1597c:	e0bff717 	ldw	r2,-36(fp)
}
   15980:	e037883a 	mov	sp,fp
   15984:	dfc00117 	ldw	ra,4(sp)
   15988:	df000017 	ldw	fp,0(sp)
   1598c:	dec00204 	addi	sp,sp,8
   15990:	f800283a 	ret

00015994 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15994:	defff804 	addi	sp,sp,-32
   15998:	dfc00715 	stw	ra,28(sp)
   1599c:	df000615 	stw	fp,24(sp)
   159a0:	dc000515 	stw	r16,20(sp)
   159a4:	df000604 	addi	fp,sp,24
   159a8:	e13ffb15 	stw	r4,-20(fp)
   159ac:	e17ffc15 	stw	r5,-16(fp)
   159b0:	e1bffd15 	stw	r6,-12(fp)
   159b4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   159b8:	e1bffe17 	ldw	r6,-8(fp)
   159bc:	e17ffd17 	ldw	r5,-12(fp)
   159c0:	e13ffc17 	ldw	r4,-16(fp)
   159c4:	0015c1c0 	call	15c1c <open>
   159c8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   159cc:	e0bffa17 	ldw	r2,-24(fp)
   159d0:	10002216 	blt	r2,zero,15a5c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   159d4:	040000b4 	movhi	r16,2
   159d8:	8422e204 	addi	r16,r16,-29816
   159dc:	e0bffa17 	ldw	r2,-24(fp)
   159e0:	01400304 	movi	r5,12
   159e4:	1009883a 	mov	r4,r2
   159e8:	00131640 	call	13164 <__mulsi3>
   159ec:	8085883a 	add	r2,r16,r2
   159f0:	10c00017 	ldw	r3,0(r2)
   159f4:	e0bffb17 	ldw	r2,-20(fp)
   159f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   159fc:	040000b4 	movhi	r16,2
   15a00:	8422e204 	addi	r16,r16,-29816
   15a04:	e0bffa17 	ldw	r2,-24(fp)
   15a08:	01400304 	movi	r5,12
   15a0c:	1009883a 	mov	r4,r2
   15a10:	00131640 	call	13164 <__mulsi3>
   15a14:	8085883a 	add	r2,r16,r2
   15a18:	10800104 	addi	r2,r2,4
   15a1c:	10c00017 	ldw	r3,0(r2)
   15a20:	e0bffb17 	ldw	r2,-20(fp)
   15a24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   15a28:	040000b4 	movhi	r16,2
   15a2c:	8422e204 	addi	r16,r16,-29816
   15a30:	e0bffa17 	ldw	r2,-24(fp)
   15a34:	01400304 	movi	r5,12
   15a38:	1009883a 	mov	r4,r2
   15a3c:	00131640 	call	13164 <__mulsi3>
   15a40:	8085883a 	add	r2,r16,r2
   15a44:	10800204 	addi	r2,r2,8
   15a48:	10c00017 	ldw	r3,0(r2)
   15a4c:	e0bffb17 	ldw	r2,-20(fp)
   15a50:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   15a54:	e13ffa17 	ldw	r4,-24(fp)
   15a58:	00144340 	call	14434 <alt_release_fd>
  }
} 
   15a5c:	0001883a 	nop
   15a60:	e6ffff04 	addi	sp,fp,-4
   15a64:	dfc00217 	ldw	ra,8(sp)
   15a68:	df000117 	ldw	fp,4(sp)
   15a6c:	dc000017 	ldw	r16,0(sp)
   15a70:	dec00304 	addi	sp,sp,12
   15a74:	f800283a 	ret

00015a78 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   15a78:	defffb04 	addi	sp,sp,-20
   15a7c:	dfc00415 	stw	ra,16(sp)
   15a80:	df000315 	stw	fp,12(sp)
   15a84:	df000304 	addi	fp,sp,12
   15a88:	e13ffd15 	stw	r4,-12(fp)
   15a8c:	e17ffe15 	stw	r5,-8(fp)
   15a90:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15a94:	01c07fc4 	movi	r7,511
   15a98:	01800044 	movi	r6,1
   15a9c:	e17ffd17 	ldw	r5,-12(fp)
   15aa0:	010000b4 	movhi	r4,2
   15aa4:	2122e504 	addi	r4,r4,-29804
   15aa8:	00159940 	call	15994 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15aac:	01c07fc4 	movi	r7,511
   15ab0:	000d883a 	mov	r6,zero
   15ab4:	e17ffe17 	ldw	r5,-8(fp)
   15ab8:	010000b4 	movhi	r4,2
   15abc:	2122e204 	addi	r4,r4,-29816
   15ac0:	00159940 	call	15994 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15ac4:	01c07fc4 	movi	r7,511
   15ac8:	01800044 	movi	r6,1
   15acc:	e17fff17 	ldw	r5,-4(fp)
   15ad0:	010000b4 	movhi	r4,2
   15ad4:	2122e804 	addi	r4,r4,-29792
   15ad8:	00159940 	call	15994 <alt_open_fd>
}  
   15adc:	0001883a 	nop
   15ae0:	e037883a 	mov	sp,fp
   15ae4:	dfc00117 	ldw	ra,4(sp)
   15ae8:	df000017 	ldw	fp,0(sp)
   15aec:	dec00204 	addi	sp,sp,8
   15af0:	f800283a 	ret

00015af4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15af4:	defffe04 	addi	sp,sp,-8
   15af8:	dfc00115 	stw	ra,4(sp)
   15afc:	df000015 	stw	fp,0(sp)
   15b00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15b04:	d0a00917 	ldw	r2,-32732(gp)
   15b08:	10000326 	beq	r2,zero,15b18 <alt_get_errno+0x24>
   15b0c:	d0a00917 	ldw	r2,-32732(gp)
   15b10:	103ee83a 	callr	r2
   15b14:	00000106 	br	15b1c <alt_get_errno+0x28>
   15b18:	d0a01204 	addi	r2,gp,-32696
}
   15b1c:	e037883a 	mov	sp,fp
   15b20:	dfc00117 	ldw	ra,4(sp)
   15b24:	df000017 	ldw	fp,0(sp)
   15b28:	dec00204 	addi	sp,sp,8
   15b2c:	f800283a 	ret

00015b30 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15b30:	defffb04 	addi	sp,sp,-20
   15b34:	dfc00415 	stw	ra,16(sp)
   15b38:	df000315 	stw	fp,12(sp)
   15b3c:	dc000215 	stw	r16,8(sp)
   15b40:	df000304 	addi	fp,sp,12
   15b44:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15b48:	e0bffe17 	ldw	r2,-8(fp)
   15b4c:	10800217 	ldw	r2,8(r2)
   15b50:	10d00034 	orhi	r3,r2,16384
   15b54:	e0bffe17 	ldw	r2,-8(fp)
   15b58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15b5c:	e03ffd15 	stw	zero,-12(fp)
   15b60:	00002306 	br	15bf0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15b64:	040000b4 	movhi	r16,2
   15b68:	8422e204 	addi	r16,r16,-29816
   15b6c:	e0bffd17 	ldw	r2,-12(fp)
   15b70:	01400304 	movi	r5,12
   15b74:	1009883a 	mov	r4,r2
   15b78:	00131640 	call	13164 <__mulsi3>
   15b7c:	8085883a 	add	r2,r16,r2
   15b80:	10c00017 	ldw	r3,0(r2)
   15b84:	e0bffe17 	ldw	r2,-8(fp)
   15b88:	10800017 	ldw	r2,0(r2)
   15b8c:	1880151e 	bne	r3,r2,15be4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15b90:	040000b4 	movhi	r16,2
   15b94:	8422e204 	addi	r16,r16,-29816
   15b98:	e0bffd17 	ldw	r2,-12(fp)
   15b9c:	01400304 	movi	r5,12
   15ba0:	1009883a 	mov	r4,r2
   15ba4:	00131640 	call	13164 <__mulsi3>
   15ba8:	8085883a 	add	r2,r16,r2
   15bac:	10800204 	addi	r2,r2,8
   15bb0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15bb4:	10000b0e 	bge	r2,zero,15be4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   15bb8:	01400304 	movi	r5,12
   15bbc:	e13ffd17 	ldw	r4,-12(fp)
   15bc0:	00131640 	call	13164 <__mulsi3>
   15bc4:	1007883a 	mov	r3,r2
   15bc8:	008000b4 	movhi	r2,2
   15bcc:	10a2e204 	addi	r2,r2,-29816
   15bd0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15bd4:	e0bffe17 	ldw	r2,-8(fp)
   15bd8:	18800226 	beq	r3,r2,15be4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15bdc:	00bffcc4 	movi	r2,-13
   15be0:	00000806 	br	15c04 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15be4:	e0bffd17 	ldw	r2,-12(fp)
   15be8:	10800044 	addi	r2,r2,1
   15bec:	e0bffd15 	stw	r2,-12(fp)
   15bf0:	d0a00817 	ldw	r2,-32736(gp)
   15bf4:	1007883a 	mov	r3,r2
   15bf8:	e0bffd17 	ldw	r2,-12(fp)
   15bfc:	18bfd92e 	bgeu	r3,r2,15b64 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15c00:	0005883a 	mov	r2,zero
}
   15c04:	e6ffff04 	addi	sp,fp,-4
   15c08:	dfc00217 	ldw	ra,8(sp)
   15c0c:	df000117 	ldw	fp,4(sp)
   15c10:	dc000017 	ldw	r16,0(sp)
   15c14:	dec00304 	addi	sp,sp,12
   15c18:	f800283a 	ret

00015c1c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15c1c:	defff604 	addi	sp,sp,-40
   15c20:	dfc00915 	stw	ra,36(sp)
   15c24:	df000815 	stw	fp,32(sp)
   15c28:	df000804 	addi	fp,sp,32
   15c2c:	e13ffd15 	stw	r4,-12(fp)
   15c30:	e17ffe15 	stw	r5,-8(fp)
   15c34:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15c38:	00bfffc4 	movi	r2,-1
   15c3c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   15c40:	00bffb44 	movi	r2,-19
   15c44:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15c48:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15c4c:	d1600604 	addi	r5,gp,-32744
   15c50:	e13ffd17 	ldw	r4,-12(fp)
   15c54:	0015d9c0 	call	15d9c <alt_find_dev>
   15c58:	e0bff815 	stw	r2,-32(fp)
   15c5c:	e0bff817 	ldw	r2,-32(fp)
   15c60:	1000051e 	bne	r2,zero,15c78 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15c64:	e13ffd17 	ldw	r4,-12(fp)
   15c68:	0015e2c0 	call	15e2c <alt_find_file>
   15c6c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   15c70:	00800044 	movi	r2,1
   15c74:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15c78:	e0bff817 	ldw	r2,-32(fp)
   15c7c:	10002b26 	beq	r2,zero,15d2c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15c80:	e13ff817 	ldw	r4,-32(fp)
   15c84:	0015f340 	call	15f34 <alt_get_fd>
   15c88:	e0bff915 	stw	r2,-28(fp)
   15c8c:	e0bff917 	ldw	r2,-28(fp)
   15c90:	1000030e 	bge	r2,zero,15ca0 <open+0x84>
    {
      status = index;
   15c94:	e0bff917 	ldw	r2,-28(fp)
   15c98:	e0bffa15 	stw	r2,-24(fp)
   15c9c:	00002506 	br	15d34 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   15ca0:	01400304 	movi	r5,12
   15ca4:	e13ff917 	ldw	r4,-28(fp)
   15ca8:	00131640 	call	13164 <__mulsi3>
   15cac:	1007883a 	mov	r3,r2
   15cb0:	008000b4 	movhi	r2,2
   15cb4:	10a2e204 	addi	r2,r2,-29816
   15cb8:	1885883a 	add	r2,r3,r2
   15cbc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15cc0:	e0fffe17 	ldw	r3,-8(fp)
   15cc4:	00900034 	movhi	r2,16384
   15cc8:	10bfffc4 	addi	r2,r2,-1
   15ccc:	1886703a 	and	r3,r3,r2
   15cd0:	e0bffc17 	ldw	r2,-16(fp)
   15cd4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15cd8:	e0bffb17 	ldw	r2,-20(fp)
   15cdc:	1000051e 	bne	r2,zero,15cf4 <open+0xd8>
   15ce0:	e13ffc17 	ldw	r4,-16(fp)
   15ce4:	0015b300 	call	15b30 <alt_file_locked>
   15ce8:	e0bffa15 	stw	r2,-24(fp)
   15cec:	e0bffa17 	ldw	r2,-24(fp)
   15cf0:	10001016 	blt	r2,zero,15d34 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15cf4:	e0bff817 	ldw	r2,-32(fp)
   15cf8:	10800317 	ldw	r2,12(r2)
   15cfc:	10000826 	beq	r2,zero,15d20 <open+0x104>
   15d00:	e0bff817 	ldw	r2,-32(fp)
   15d04:	10800317 	ldw	r2,12(r2)
   15d08:	e1ffff17 	ldw	r7,-4(fp)
   15d0c:	e1bffe17 	ldw	r6,-8(fp)
   15d10:	e17ffd17 	ldw	r5,-12(fp)
   15d14:	e13ffc17 	ldw	r4,-16(fp)
   15d18:	103ee83a 	callr	r2
   15d1c:	00000106 	br	15d24 <open+0x108>
   15d20:	0005883a 	mov	r2,zero
   15d24:	e0bffa15 	stw	r2,-24(fp)
   15d28:	00000206 	br	15d34 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15d2c:	00bffb44 	movi	r2,-19
   15d30:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15d34:	e0bffa17 	ldw	r2,-24(fp)
   15d38:	1000090e 	bge	r2,zero,15d60 <open+0x144>
  {
    alt_release_fd (index);  
   15d3c:	e13ff917 	ldw	r4,-28(fp)
   15d40:	00144340 	call	14434 <alt_release_fd>
    ALT_ERRNO = -status;
   15d44:	0015af40 	call	15af4 <alt_get_errno>
   15d48:	1007883a 	mov	r3,r2
   15d4c:	e0bffa17 	ldw	r2,-24(fp)
   15d50:	0085c83a 	sub	r2,zero,r2
   15d54:	18800015 	stw	r2,0(r3)
    return -1;
   15d58:	00bfffc4 	movi	r2,-1
   15d5c:	00000106 	br	15d64 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   15d60:	e0bff917 	ldw	r2,-28(fp)
}
   15d64:	e037883a 	mov	sp,fp
   15d68:	dfc00117 	ldw	ra,4(sp)
   15d6c:	df000017 	ldw	fp,0(sp)
   15d70:	dec00204 	addi	sp,sp,8
   15d74:	f800283a 	ret

00015d78 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   15d78:	deffff04 	addi	sp,sp,-4
   15d7c:	df000015 	stw	fp,0(sp)
   15d80:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15d84:	000170fa 	wrctl	ienable,zero
}
   15d88:	0001883a 	nop
   15d8c:	e037883a 	mov	sp,fp
   15d90:	df000017 	ldw	fp,0(sp)
   15d94:	dec00104 	addi	sp,sp,4
   15d98:	f800283a 	ret

00015d9c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15d9c:	defffa04 	addi	sp,sp,-24
   15da0:	dfc00515 	stw	ra,20(sp)
   15da4:	df000415 	stw	fp,16(sp)
   15da8:	df000404 	addi	fp,sp,16
   15dac:	e13ffe15 	stw	r4,-8(fp)
   15db0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15db4:	e0bfff17 	ldw	r2,-4(fp)
   15db8:	10800017 	ldw	r2,0(r2)
   15dbc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15dc0:	e13ffe17 	ldw	r4,-8(fp)
   15dc4:	00104540 	call	10454 <strlen>
   15dc8:	10800044 	addi	r2,r2,1
   15dcc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15dd0:	00000d06 	br	15e08 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15dd4:	e0bffc17 	ldw	r2,-16(fp)
   15dd8:	10800217 	ldw	r2,8(r2)
   15ddc:	e0fffd17 	ldw	r3,-12(fp)
   15de0:	180d883a 	mov	r6,r3
   15de4:	e17ffe17 	ldw	r5,-8(fp)
   15de8:	1009883a 	mov	r4,r2
   15dec:	00160e00 	call	160e0 <memcmp>
   15df0:	1000021e 	bne	r2,zero,15dfc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15df4:	e0bffc17 	ldw	r2,-16(fp)
   15df8:	00000706 	br	15e18 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15dfc:	e0bffc17 	ldw	r2,-16(fp)
   15e00:	10800017 	ldw	r2,0(r2)
   15e04:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15e08:	e0fffc17 	ldw	r3,-16(fp)
   15e0c:	e0bfff17 	ldw	r2,-4(fp)
   15e10:	18bff01e 	bne	r3,r2,15dd4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15e14:	0005883a 	mov	r2,zero
}
   15e18:	e037883a 	mov	sp,fp
   15e1c:	dfc00117 	ldw	ra,4(sp)
   15e20:	df000017 	ldw	fp,0(sp)
   15e24:	dec00204 	addi	sp,sp,8
   15e28:	f800283a 	ret

00015e2c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15e2c:	defffb04 	addi	sp,sp,-20
   15e30:	dfc00415 	stw	ra,16(sp)
   15e34:	df000315 	stw	fp,12(sp)
   15e38:	df000304 	addi	fp,sp,12
   15e3c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15e40:	d0a00417 	ldw	r2,-32752(gp)
   15e44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15e48:	00003106 	br	15f10 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   15e4c:	e0bffd17 	ldw	r2,-12(fp)
   15e50:	10800217 	ldw	r2,8(r2)
   15e54:	1009883a 	mov	r4,r2
   15e58:	00104540 	call	10454 <strlen>
   15e5c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15e60:	e0bffd17 	ldw	r2,-12(fp)
   15e64:	10c00217 	ldw	r3,8(r2)
   15e68:	e0bffe17 	ldw	r2,-8(fp)
   15e6c:	10bfffc4 	addi	r2,r2,-1
   15e70:	1885883a 	add	r2,r3,r2
   15e74:	10800003 	ldbu	r2,0(r2)
   15e78:	10803fcc 	andi	r2,r2,255
   15e7c:	1080201c 	xori	r2,r2,128
   15e80:	10bfe004 	addi	r2,r2,-128
   15e84:	10800bd8 	cmpnei	r2,r2,47
   15e88:	1000031e 	bne	r2,zero,15e98 <alt_find_file+0x6c>
    {
      len -= 1;
   15e8c:	e0bffe17 	ldw	r2,-8(fp)
   15e90:	10bfffc4 	addi	r2,r2,-1
   15e94:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15e98:	e0bffe17 	ldw	r2,-8(fp)
   15e9c:	e0ffff17 	ldw	r3,-4(fp)
   15ea0:	1885883a 	add	r2,r3,r2
   15ea4:	10800003 	ldbu	r2,0(r2)
   15ea8:	10803fcc 	andi	r2,r2,255
   15eac:	1080201c 	xori	r2,r2,128
   15eb0:	10bfe004 	addi	r2,r2,-128
   15eb4:	10800be0 	cmpeqi	r2,r2,47
   15eb8:	1000081e 	bne	r2,zero,15edc <alt_find_file+0xb0>
   15ebc:	e0bffe17 	ldw	r2,-8(fp)
   15ec0:	e0ffff17 	ldw	r3,-4(fp)
   15ec4:	1885883a 	add	r2,r3,r2
   15ec8:	10800003 	ldbu	r2,0(r2)
   15ecc:	10803fcc 	andi	r2,r2,255
   15ed0:	1080201c 	xori	r2,r2,128
   15ed4:	10bfe004 	addi	r2,r2,-128
   15ed8:	10000a1e 	bne	r2,zero,15f04 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15edc:	e0bffd17 	ldw	r2,-12(fp)
   15ee0:	10800217 	ldw	r2,8(r2)
   15ee4:	e0fffe17 	ldw	r3,-8(fp)
   15ee8:	180d883a 	mov	r6,r3
   15eec:	e17fff17 	ldw	r5,-4(fp)
   15ef0:	1009883a 	mov	r4,r2
   15ef4:	00160e00 	call	160e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15ef8:	1000021e 	bne	r2,zero,15f04 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15efc:	e0bffd17 	ldw	r2,-12(fp)
   15f00:	00000706 	br	15f20 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   15f04:	e0bffd17 	ldw	r2,-12(fp)
   15f08:	10800017 	ldw	r2,0(r2)
   15f0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15f10:	e0fffd17 	ldw	r3,-12(fp)
   15f14:	d0a00404 	addi	r2,gp,-32752
   15f18:	18bfcc1e 	bne	r3,r2,15e4c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15f1c:	0005883a 	mov	r2,zero
}
   15f20:	e037883a 	mov	sp,fp
   15f24:	dfc00117 	ldw	ra,4(sp)
   15f28:	df000017 	ldw	fp,0(sp)
   15f2c:	dec00204 	addi	sp,sp,8
   15f30:	f800283a 	ret

00015f34 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15f34:	defffa04 	addi	sp,sp,-24
   15f38:	dfc00515 	stw	ra,20(sp)
   15f3c:	df000415 	stw	fp,16(sp)
   15f40:	dc000315 	stw	r16,12(sp)
   15f44:	df000404 	addi	fp,sp,16
   15f48:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   15f4c:	00bffa04 	movi	r2,-24
   15f50:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15f54:	e03ffc15 	stw	zero,-16(fp)
   15f58:	00001d06 	br	15fd0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   15f5c:	040000b4 	movhi	r16,2
   15f60:	8422e204 	addi	r16,r16,-29816
   15f64:	e0bffc17 	ldw	r2,-16(fp)
   15f68:	01400304 	movi	r5,12
   15f6c:	1009883a 	mov	r4,r2
   15f70:	00131640 	call	13164 <__mulsi3>
   15f74:	8085883a 	add	r2,r16,r2
   15f78:	10800017 	ldw	r2,0(r2)
   15f7c:	1000111e 	bne	r2,zero,15fc4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   15f80:	040000b4 	movhi	r16,2
   15f84:	8422e204 	addi	r16,r16,-29816
   15f88:	e0bffc17 	ldw	r2,-16(fp)
   15f8c:	01400304 	movi	r5,12
   15f90:	1009883a 	mov	r4,r2
   15f94:	00131640 	call	13164 <__mulsi3>
   15f98:	8085883a 	add	r2,r16,r2
   15f9c:	e0fffe17 	ldw	r3,-8(fp)
   15fa0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15fa4:	d0e00817 	ldw	r3,-32736(gp)
   15fa8:	e0bffc17 	ldw	r2,-16(fp)
   15fac:	1880020e 	bge	r3,r2,15fb8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   15fb0:	e0bffc17 	ldw	r2,-16(fp)
   15fb4:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   15fb8:	e0bffc17 	ldw	r2,-16(fp)
   15fbc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   15fc0:	00000606 	br	15fdc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15fc4:	e0bffc17 	ldw	r2,-16(fp)
   15fc8:	10800044 	addi	r2,r2,1
   15fcc:	e0bffc15 	stw	r2,-16(fp)
   15fd0:	e0bffc17 	ldw	r2,-16(fp)
   15fd4:	10800810 	cmplti	r2,r2,32
   15fd8:	103fe01e 	bne	r2,zero,15f5c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15fdc:	e0bffd17 	ldw	r2,-12(fp)
}
   15fe0:	e6ffff04 	addi	sp,fp,-4
   15fe4:	dfc00217 	ldw	ra,8(sp)
   15fe8:	df000117 	ldw	fp,4(sp)
   15fec:	dc000017 	ldw	r16,0(sp)
   15ff0:	dec00304 	addi	sp,sp,12
   15ff4:	f800283a 	ret

00015ff8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15ff8:	defffe04 	addi	sp,sp,-8
   15ffc:	df000115 	stw	fp,4(sp)
   16000:	df000104 	addi	fp,sp,4
   16004:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   16008:	e0bfff17 	ldw	r2,-4(fp)
   1600c:	10bffe84 	addi	r2,r2,-6
   16010:	10c00428 	cmpgeui	r3,r2,16
   16014:	18001a1e 	bne	r3,zero,16080 <alt_exception_cause_generated_bad_addr+0x88>
   16018:	100690ba 	slli	r3,r2,2
   1601c:	00800074 	movhi	r2,1
   16020:	10980c04 	addi	r2,r2,24624
   16024:	1885883a 	add	r2,r3,r2
   16028:	10800017 	ldw	r2,0(r2)
   1602c:	1000683a 	jmp	r2
   16030:	00016070 	cmpltui	zero,zero,1409
   16034:	00016070 	cmpltui	zero,zero,1409
   16038:	00016080 	call	1608 <__alt_mem_onchip_memory2_0-0xe9f8>
   1603c:	00016080 	call	1608 <__alt_mem_onchip_memory2_0-0xe9f8>
   16040:	00016080 	call	1608 <__alt_mem_onchip_memory2_0-0xe9f8>
   16044:	00016070 	cmpltui	zero,zero,1409
   16048:	00016078 	rdprs	zero,zero,1409
   1604c:	00016080 	call	1608 <__alt_mem_onchip_memory2_0-0xe9f8>
   16050:	00016070 	cmpltui	zero,zero,1409
   16054:	00016070 	cmpltui	zero,zero,1409
   16058:	00016080 	call	1608 <__alt_mem_onchip_memory2_0-0xe9f8>
   1605c:	00016070 	cmpltui	zero,zero,1409
   16060:	00016078 	rdprs	zero,zero,1409
   16064:	00016080 	call	1608 <__alt_mem_onchip_memory2_0-0xe9f8>
   16068:	00016080 	call	1608 <__alt_mem_onchip_memory2_0-0xe9f8>
   1606c:	00016070 	cmpltui	zero,zero,1409
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   16070:	00800044 	movi	r2,1
   16074:	00000306 	br	16084 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   16078:	0005883a 	mov	r2,zero
   1607c:	00000106 	br	16084 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   16080:	0005883a 	mov	r2,zero
  }
}
   16084:	e037883a 	mov	sp,fp
   16088:	df000017 	ldw	fp,0(sp)
   1608c:	dec00104 	addi	sp,sp,4
   16090:	f800283a 	ret

00016094 <atexit>:
   16094:	200b883a 	mov	r5,r4
   16098:	000f883a 	mov	r7,zero
   1609c:	000d883a 	mov	r6,zero
   160a0:	0009883a 	mov	r4,zero
   160a4:	00162481 	jmpi	16248 <__register_exitproc>

000160a8 <exit>:
   160a8:	defffe04 	addi	sp,sp,-8
   160ac:	000b883a 	mov	r5,zero
   160b0:	dc000015 	stw	r16,0(sp)
   160b4:	dfc00115 	stw	ra,4(sp)
   160b8:	2021883a 	mov	r16,r4
   160bc:	00163600 	call	16360 <__call_exitprocs>
   160c0:	008000b4 	movhi	r2,2
   160c4:	10a78104 	addi	r2,r2,-25084
   160c8:	11000017 	ldw	r4,0(r2)
   160cc:	20800f17 	ldw	r2,60(r4)
   160d0:	10000126 	beq	r2,zero,160d8 <exit+0x30>
   160d4:	103ee83a 	callr	r2
   160d8:	8009883a 	mov	r4,r16
   160dc:	00164e00 	call	164e0 <_exit>

000160e0 <memcmp>:
   160e0:	01c000c4 	movi	r7,3
   160e4:	3980192e 	bgeu	r7,r6,1614c <memcmp+0x6c>
   160e8:	2144b03a 	or	r2,r4,r5
   160ec:	11c4703a 	and	r2,r2,r7
   160f0:	10000f26 	beq	r2,zero,16130 <memcmp+0x50>
   160f4:	20800003 	ldbu	r2,0(r4)
   160f8:	28c00003 	ldbu	r3,0(r5)
   160fc:	10c0151e 	bne	r2,r3,16154 <memcmp+0x74>
   16100:	31bfff84 	addi	r6,r6,-2
   16104:	01ffffc4 	movi	r7,-1
   16108:	00000406 	br	1611c <memcmp+0x3c>
   1610c:	20800003 	ldbu	r2,0(r4)
   16110:	28c00003 	ldbu	r3,0(r5)
   16114:	31bfffc4 	addi	r6,r6,-1
   16118:	10c00e1e 	bne	r2,r3,16154 <memcmp+0x74>
   1611c:	21000044 	addi	r4,r4,1
   16120:	29400044 	addi	r5,r5,1
   16124:	31fff91e 	bne	r6,r7,1610c <memcmp+0x2c>
   16128:	0005883a 	mov	r2,zero
   1612c:	f800283a 	ret
   16130:	20c00017 	ldw	r3,0(r4)
   16134:	28800017 	ldw	r2,0(r5)
   16138:	18bfee1e 	bne	r3,r2,160f4 <memcmp+0x14>
   1613c:	31bfff04 	addi	r6,r6,-4
   16140:	21000104 	addi	r4,r4,4
   16144:	29400104 	addi	r5,r5,4
   16148:	39bff936 	bltu	r7,r6,16130 <memcmp+0x50>
   1614c:	303fe91e 	bne	r6,zero,160f4 <memcmp+0x14>
   16150:	003ff506 	br	16128 <memcmp+0x48>
   16154:	10c5c83a 	sub	r2,r2,r3
   16158:	f800283a 	ret

0001615c <strncpy>:
   1615c:	2906b03a 	or	r3,r5,r4
   16160:	18c000cc 	andi	r3,r3,3
   16164:	2005883a 	mov	r2,r4
   16168:	18002c1e 	bne	r3,zero,1621c <strncpy+0xc0>
   1616c:	010000c4 	movi	r4,3
   16170:	21802a2e 	bgeu	r4,r6,1621c <strncpy+0xc0>
   16174:	033fbff4 	movhi	r12,65279
   16178:	02e02074 	movhi	r11,32897
   1617c:	633fbfc4 	addi	r12,r12,-257
   16180:	5ae02004 	addi	r11,r11,-32640
   16184:	100f883a 	mov	r7,r2
   16188:	2a000017 	ldw	r8,0(r5)
   1618c:	3815883a 	mov	r10,r7
   16190:	4313883a 	add	r9,r8,r12
   16194:	0206303a 	nor	r3,zero,r8
   16198:	48c6703a 	and	r3,r9,r3
   1619c:	1ac6703a 	and	r3,r3,r11
   161a0:	1800261e 	bne	r3,zero,1623c <strncpy+0xe0>
   161a4:	39c00104 	addi	r7,r7,4
   161a8:	52000015 	stw	r8,0(r10)
   161ac:	31bfff04 	addi	r6,r6,-4
   161b0:	3811883a 	mov	r8,r7
   161b4:	29400104 	addi	r5,r5,4
   161b8:	21bff336 	bltu	r4,r6,16188 <strncpy+0x2c>
   161bc:	30001e26 	beq	r6,zero,16238 <strncpy+0xdc>
   161c0:	29c00003 	ldbu	r7,0(r5)
   161c4:	31bfffc4 	addi	r6,r6,-1
   161c8:	40c00044 	addi	r3,r8,1
   161cc:	41c00005 	stb	r7,0(r8)
   161d0:	39c03fcc 	andi	r7,r7,255
   161d4:	39c0201c 	xori	r7,r7,128
   161d8:	39ffe004 	addi	r7,r7,-128
   161dc:	29400044 	addi	r5,r5,1
   161e0:	38001026 	beq	r7,zero,16224 <strncpy+0xc8>
   161e4:	1811883a 	mov	r8,r3
   161e8:	00000906 	br	16210 <strncpy+0xb4>
   161ec:	29c00003 	ldbu	r7,0(r5)
   161f0:	31bfffc4 	addi	r6,r6,-1
   161f4:	29400044 	addi	r5,r5,1
   161f8:	41c00005 	stb	r7,0(r8)
   161fc:	39c03fcc 	andi	r7,r7,255
   16200:	39c0201c 	xori	r7,r7,128
   16204:	39ffe004 	addi	r7,r7,-128
   16208:	1811883a 	mov	r8,r3
   1620c:	38000526 	beq	r7,zero,16224 <strncpy+0xc8>
   16210:	18c00044 	addi	r3,r3,1
   16214:	303ff51e 	bne	r6,zero,161ec <strncpy+0x90>
   16218:	f800283a 	ret
   1621c:	1011883a 	mov	r8,r2
   16220:	003fe606 	br	161bc <strncpy+0x60>
   16224:	30000726 	beq	r6,zero,16244 <strncpy+0xe8>
   16228:	198d883a 	add	r6,r3,r6
   1622c:	18000005 	stb	zero,0(r3)
   16230:	18c00044 	addi	r3,r3,1
   16234:	19bffd1e 	bne	r3,r6,1622c <strncpy+0xd0>
   16238:	f800283a 	ret
   1623c:	3811883a 	mov	r8,r7
   16240:	003fdf06 	br	161c0 <strncpy+0x64>
   16244:	f800283a 	ret

00016248 <__register_exitproc>:
   16248:	defffa04 	addi	sp,sp,-24
   1624c:	dc000315 	stw	r16,12(sp)
   16250:	040000b4 	movhi	r16,2
   16254:	84278104 	addi	r16,r16,-25084
   16258:	80c00017 	ldw	r3,0(r16)
   1625c:	dc400415 	stw	r17,16(sp)
   16260:	dfc00515 	stw	ra,20(sp)
   16264:	18805217 	ldw	r2,328(r3)
   16268:	2023883a 	mov	r17,r4
   1626c:	10003726 	beq	r2,zero,1634c <__register_exitproc+0x104>
   16270:	10c00117 	ldw	r3,4(r2)
   16274:	010007c4 	movi	r4,31
   16278:	20c00e16 	blt	r4,r3,162b4 <__register_exitproc+0x6c>
   1627c:	1a000044 	addi	r8,r3,1
   16280:	8800221e 	bne	r17,zero,1630c <__register_exitproc+0xc4>
   16284:	18c00084 	addi	r3,r3,2
   16288:	18c7883a 	add	r3,r3,r3
   1628c:	18c7883a 	add	r3,r3,r3
   16290:	12000115 	stw	r8,4(r2)
   16294:	10c7883a 	add	r3,r2,r3
   16298:	19400015 	stw	r5,0(r3)
   1629c:	0005883a 	mov	r2,zero
   162a0:	dfc00517 	ldw	ra,20(sp)
   162a4:	dc400417 	ldw	r17,16(sp)
   162a8:	dc000317 	ldw	r16,12(sp)
   162ac:	dec00604 	addi	sp,sp,24
   162b0:	f800283a 	ret
   162b4:	00800034 	movhi	r2,0
   162b8:	10800004 	addi	r2,r2,0
   162bc:	10002626 	beq	r2,zero,16358 <__register_exitproc+0x110>
   162c0:	01006404 	movi	r4,400
   162c4:	d9400015 	stw	r5,0(sp)
   162c8:	d9800115 	stw	r6,4(sp)
   162cc:	d9c00215 	stw	r7,8(sp)
   162d0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   162d4:	d9400017 	ldw	r5,0(sp)
   162d8:	d9800117 	ldw	r6,4(sp)
   162dc:	d9c00217 	ldw	r7,8(sp)
   162e0:	10001d26 	beq	r2,zero,16358 <__register_exitproc+0x110>
   162e4:	81000017 	ldw	r4,0(r16)
   162e8:	10000115 	stw	zero,4(r2)
   162ec:	02000044 	movi	r8,1
   162f0:	22405217 	ldw	r9,328(r4)
   162f4:	0007883a 	mov	r3,zero
   162f8:	12400015 	stw	r9,0(r2)
   162fc:	20805215 	stw	r2,328(r4)
   16300:	10006215 	stw	zero,392(r2)
   16304:	10006315 	stw	zero,396(r2)
   16308:	883fde26 	beq	r17,zero,16284 <__register_exitproc+0x3c>
   1630c:	18c9883a 	add	r4,r3,r3
   16310:	2109883a 	add	r4,r4,r4
   16314:	1109883a 	add	r4,r2,r4
   16318:	21802215 	stw	r6,136(r4)
   1631c:	01800044 	movi	r6,1
   16320:	12406217 	ldw	r9,392(r2)
   16324:	30cc983a 	sll	r6,r6,r3
   16328:	4992b03a 	or	r9,r9,r6
   1632c:	12406215 	stw	r9,392(r2)
   16330:	21c04215 	stw	r7,264(r4)
   16334:	01000084 	movi	r4,2
   16338:	893fd21e 	bne	r17,r4,16284 <__register_exitproc+0x3c>
   1633c:	11006317 	ldw	r4,396(r2)
   16340:	218cb03a 	or	r6,r4,r6
   16344:	11806315 	stw	r6,396(r2)
   16348:	003fce06 	br	16284 <__register_exitproc+0x3c>
   1634c:	18805304 	addi	r2,r3,332
   16350:	18805215 	stw	r2,328(r3)
   16354:	003fc606 	br	16270 <__register_exitproc+0x28>
   16358:	00bfffc4 	movi	r2,-1
   1635c:	003fd006 	br	162a0 <__register_exitproc+0x58>

00016360 <__call_exitprocs>:
   16360:	defff504 	addi	sp,sp,-44
   16364:	df000915 	stw	fp,36(sp)
   16368:	dd400615 	stw	r21,24(sp)
   1636c:	dc800315 	stw	r18,12(sp)
   16370:	dfc00a15 	stw	ra,40(sp)
   16374:	ddc00815 	stw	r23,32(sp)
   16378:	dd800715 	stw	r22,28(sp)
   1637c:	dd000515 	stw	r20,20(sp)
   16380:	dcc00415 	stw	r19,16(sp)
   16384:	dc400215 	stw	r17,8(sp)
   16388:	dc000115 	stw	r16,4(sp)
   1638c:	d9000015 	stw	r4,0(sp)
   16390:	2839883a 	mov	fp,r5
   16394:	04800044 	movi	r18,1
   16398:	057fffc4 	movi	r21,-1
   1639c:	008000b4 	movhi	r2,2
   163a0:	10a78104 	addi	r2,r2,-25084
   163a4:	12000017 	ldw	r8,0(r2)
   163a8:	45005217 	ldw	r20,328(r8)
   163ac:	44c05204 	addi	r19,r8,328
   163b0:	a0001c26 	beq	r20,zero,16424 <__call_exitprocs+0xc4>
   163b4:	a0800117 	ldw	r2,4(r20)
   163b8:	15ffffc4 	addi	r23,r2,-1
   163bc:	b8000d16 	blt	r23,zero,163f4 <__call_exitprocs+0x94>
   163c0:	14000044 	addi	r16,r2,1
   163c4:	8421883a 	add	r16,r16,r16
   163c8:	8421883a 	add	r16,r16,r16
   163cc:	84402004 	addi	r17,r16,128
   163d0:	a463883a 	add	r17,r20,r17
   163d4:	a421883a 	add	r16,r20,r16
   163d8:	e0001e26 	beq	fp,zero,16454 <__call_exitprocs+0xf4>
   163dc:	80804017 	ldw	r2,256(r16)
   163e0:	e0801c26 	beq	fp,r2,16454 <__call_exitprocs+0xf4>
   163e4:	bdffffc4 	addi	r23,r23,-1
   163e8:	843fff04 	addi	r16,r16,-4
   163ec:	8c7fff04 	addi	r17,r17,-4
   163f0:	bd7ff91e 	bne	r23,r21,163d8 <__call_exitprocs+0x78>
   163f4:	00800034 	movhi	r2,0
   163f8:	10800004 	addi	r2,r2,0
   163fc:	10000926 	beq	r2,zero,16424 <__call_exitprocs+0xc4>
   16400:	a0800117 	ldw	r2,4(r20)
   16404:	1000301e 	bne	r2,zero,164c8 <__call_exitprocs+0x168>
   16408:	a0800017 	ldw	r2,0(r20)
   1640c:	10003226 	beq	r2,zero,164d8 <__call_exitprocs+0x178>
   16410:	a009883a 	mov	r4,r20
   16414:	98800015 	stw	r2,0(r19)
   16418:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   1641c:	9d000017 	ldw	r20,0(r19)
   16420:	a03fe41e 	bne	r20,zero,163b4 <__call_exitprocs+0x54>
   16424:	dfc00a17 	ldw	ra,40(sp)
   16428:	df000917 	ldw	fp,36(sp)
   1642c:	ddc00817 	ldw	r23,32(sp)
   16430:	dd800717 	ldw	r22,28(sp)
   16434:	dd400617 	ldw	r21,24(sp)
   16438:	dd000517 	ldw	r20,20(sp)
   1643c:	dcc00417 	ldw	r19,16(sp)
   16440:	dc800317 	ldw	r18,12(sp)
   16444:	dc400217 	ldw	r17,8(sp)
   16448:	dc000117 	ldw	r16,4(sp)
   1644c:	dec00b04 	addi	sp,sp,44
   16450:	f800283a 	ret
   16454:	a0800117 	ldw	r2,4(r20)
   16458:	80c00017 	ldw	r3,0(r16)
   1645c:	10bfffc4 	addi	r2,r2,-1
   16460:	15c01426 	beq	r2,r23,164b4 <__call_exitprocs+0x154>
   16464:	80000015 	stw	zero,0(r16)
   16468:	183fde26 	beq	r3,zero,163e4 <__call_exitprocs+0x84>
   1646c:	95c8983a 	sll	r4,r18,r23
   16470:	a0806217 	ldw	r2,392(r20)
   16474:	a5800117 	ldw	r22,4(r20)
   16478:	2084703a 	and	r2,r4,r2
   1647c:	10000b26 	beq	r2,zero,164ac <__call_exitprocs+0x14c>
   16480:	a0806317 	ldw	r2,396(r20)
   16484:	2088703a 	and	r4,r4,r2
   16488:	20000c1e 	bne	r4,zero,164bc <__call_exitprocs+0x15c>
   1648c:	89400017 	ldw	r5,0(r17)
   16490:	d9000017 	ldw	r4,0(sp)
   16494:	183ee83a 	callr	r3
   16498:	a0800117 	ldw	r2,4(r20)
   1649c:	15bfbf1e 	bne	r2,r22,1639c <__call_exitprocs+0x3c>
   164a0:	98800017 	ldw	r2,0(r19)
   164a4:	153fcf26 	beq	r2,r20,163e4 <__call_exitprocs+0x84>
   164a8:	003fbc06 	br	1639c <__call_exitprocs+0x3c>
   164ac:	183ee83a 	callr	r3
   164b0:	003ff906 	br	16498 <__call_exitprocs+0x138>
   164b4:	a5c00115 	stw	r23,4(r20)
   164b8:	003feb06 	br	16468 <__call_exitprocs+0x108>
   164bc:	89000017 	ldw	r4,0(r17)
   164c0:	183ee83a 	callr	r3
   164c4:	003ff406 	br	16498 <__call_exitprocs+0x138>
   164c8:	a0800017 	ldw	r2,0(r20)
   164cc:	a027883a 	mov	r19,r20
   164d0:	1029883a 	mov	r20,r2
   164d4:	003fb606 	br	163b0 <__call_exitprocs+0x50>
   164d8:	0005883a 	mov	r2,zero
   164dc:	003ffb06 	br	164cc <__call_exitprocs+0x16c>

000164e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   164e0:	defffc04 	addi	sp,sp,-16
   164e4:	dfc00315 	stw	ra,12(sp)
   164e8:	df000215 	stw	fp,8(sp)
   164ec:	df000204 	addi	fp,sp,8
   164f0:	e13fff15 	stw	r4,-4(fp)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
   164f4:	d0a00a17 	ldw	r2,-32728(gp)
   164f8:	10800058 	cmpnei	r2,r2,1
   164fc:	1000031e 	bne	r2,zero,1650c <_exit+0x2c>
   16500:	010000b4 	movhi	r4,2
   16504:	21209a04 	addi	r4,r4,-32152
   16508:	0013c340 	call	13c34 <alt_log_printf_proc>
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
   1650c:	d0a00a17 	ldw	r2,-32728(gp)
   16510:	10800058 	cmpnei	r2,r2,1
   16514:	1000041e 	bne	r2,zero,16528 <_exit+0x48>
   16518:	e17fff17 	ldw	r5,-4(fp)
   1651c:	010000b4 	movhi	r4,2
   16520:	2120a504 	addi	r4,r4,-32108
   16524:	0013c340 	call	13c34 <alt_log_printf_proc>
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
   16528:	d0a00a17 	ldw	r2,-32728(gp)
   1652c:	10800058 	cmpnei	r2,r2,1
   16530:	1000031e 	bne	r2,zero,16540 <_exit+0x60>
   16534:	010000b4 	movhi	r4,2
   16538:	2120b004 	addi	r4,r4,-32064
   1653c:	0013c340 	call	13c34 <alt_log_printf_proc>
  ALT_OS_STOP();
   16540:	0001883a 	nop

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
   16544:	d0a00a17 	ldw	r2,-32728(gp)
   16548:	10800058 	cmpnei	r2,r2,1
   1654c:	1000031e 	bne	r2,zero,1655c <_exit+0x7c>
   16550:	010000b4 	movhi	r4,2
   16554:	2120ba04 	addi	r4,r4,-32024
   16558:	0013c340 	call	13c34 <alt_log_printf_proc>
   1655c:	e0bfff17 	ldw	r2,-4(fp)
   16560:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   16564:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   16568:	10000226 	beq	r2,zero,16574 <_exit+0x94>
    ALT_SIM_FAIL();
   1656c:	002af070 	cmpltui	zero,zero,43969
   16570:	00000106 	br	16578 <_exit+0x98>
  } else {
    ALT_SIM_PASS();
   16574:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
   16578:	d0a00a17 	ldw	r2,-32728(gp)
   1657c:	10800058 	cmpnei	r2,r2,1
   16580:	1000031e 	bne	r2,zero,16590 <_exit+0xb0>
   16584:	010000b4 	movhi	r4,2
   16588:	2120c404 	addi	r4,r4,-31984
   1658c:	0013c340 	call	13c34 <alt_log_printf_proc>
  while (1);
   16590:	003fff06 	br	16590 <_exit+0xb0>
